(window.webpackJsonp=window.webpackJsonp||[]).push([[2112],{"013z":function(e,t,n){"use strict";var a=n("q1tI"),o=n.n(a),r=n("NmYn"),i=n.n(r),l=n("Wbzz"),p=n("Xrax"),s=n("a7k6"),c=n("TSYQ"),b=n.n(c),d=n("QH2O"),u=n("qKvR");var h=({title:e,tabs:t=[]})=>Object(u.b)("div",{className:b()(d.pageHeader,{[d.withTabs]:t.length})},Object(u.b)("div",{className:"bx--grid"},Object(u.b)("div",{className:"bx--row"},Object(u.b)("div",{className:"bx--col-lg-12"},Object(u.b)("h1",{id:"page-title",className:d.text},e))))),m=n("BAC9");var g=({relativePagePath:e,repository:t})=>{const{site:{siteMetadata:{repository:n}}}=Object(l.useStaticQuery)("1364590287"),{baseUrl:a,subDirectory:o,branch:r}=t||n,i=`${a}/edit/${r}${o}/src/pages${e}`;return a?Object(u.b)("div",{className:"bx--row "+m.row},Object(u.b)("div",{className:"bx--col"},Object(u.b)("a",{className:m.link,href:i},"Edit this page on GitHub"))):null},j=n("FCXl"),O=n("I8xM");class w extends o.a.Component{render(){const{tabs:e,slug:t}=this.props,n=t.split("/").filter(Boolean).slice(-1)[0],a=e.map(e=>{const a=i()(e,{lower:!0,strict:!0}),o=a===n,r=new RegExp(n+"/?(#.*)?$"),p=t.replace(r,a);return Object(u.b)("li",{key:e,className:b()({[O.selectedItem]:o},O.listItem)},Object(u.b)(l.Link,{className:O.link,to:""+p},e))});return Object(u.b)("div",{className:O.tabsContainer},Object(u.b)("div",{className:"bx--grid"},Object(u.b)("div",{className:"bx--row"},Object(u.b)("div",{className:"bx--col-lg-12 bx--col-no-gutter"},Object(u.b)("nav",null,Object(u.b)("ul",{className:O.list},a))))))}}var f=w,N=n("MjG9");t.a=({pageContext:e,children:t,location:n,Title:a})=>{const{frontmatter:o={},relativePagePath:r,titleType:c}=e,{tabs:b,title:d,theme:m,description:O,keywords:w}=o,{site:{pathPrefix:y}}=Object(l.useStaticQuery)("2456312558"),P=y?n.pathname.replace(y,""):n.pathname,C=b?P.split("/").filter(Boolean).slice(-1)[0]||i()(b[0],{lower:!0}):"";return Object(u.b)(s.a,{tabs:b,homepage:!1,theme:m,pageTitle:d,pageDescription:O,pageKeywords:w,titleType:c},Object(u.b)(h,{title:a?Object(u.b)(a,null):d,label:"label",tabs:b}),b&&Object(u.b)(f,{slug:P,tabs:b,currentTab:C}),Object(u.b)(N.a,{padded:!0},t,Object(u.b)(g,{relativePagePath:r})),Object(u.b)(j.a,{pageContext:e,location:n,slug:P,tabs:b,currentTab:C}),Object(u.b)(p.a,null))}},BAC9:function(e,t,n){e.exports={bxTextTruncateEnd:"EditLink-module--bx--text-truncate--end--2pqje",bxTextTruncateFront:"EditLink-module--bx--text-truncate--front--3_lIE",link:"EditLink-module--link--1qzW3",row:"EditLink-module--row--1B9Gk"}},"GD+O":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return p})),n.d(t,"default",(function(){return g}));n("3bBZ"),n("q1tI");var a=n("7ljp"),o=n("013z"),r=n("V8m9");n("qKvR");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const p={},s=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",t)},c=s("PageDescription"),b=s("AnchorLinks"),d=s("AnchorLink"),u=s("InlineNotification"),h={_frontmatter:p},m=o.a;function g(e){let{components:t}=e,n=l(e,["components"]);return Object(a.b)(m,i({},h,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)(c,{mdxType:"PageDescription"},Object(a.b)("p",null,"This step takes our static components and populates them with data from the\nGitHub GraphQL API – loading states and all. We’ll be displaying Carbon\nrepository information in a data table.")),Object(a.b)(b,{mdxType:"AnchorLinks"},Object(a.b)(d,{mdxType:"AnchorLink"},"Fork, clone and branch"),Object(a.b)(d,{mdxType:"AnchorLink"},"Install dependencies"),Object(a.b)(d,{mdxType:"AnchorLink"},"Create access token"),Object(a.b)(d,{mdxType:"AnchorLink"},"Connect to Apollo"),Object(a.b)(d,{mdxType:"AnchorLink"},"Fetch data"),Object(a.b)(d,{mdxType:"AnchorLink"},"Populate data table"),Object(a.b)(d,{mdxType:"AnchorLink"},"Add loading"),Object(a.b)(d,{mdxType:"AnchorLink"},"Add pagination"),Object(a.b)(d,{mdxType:"AnchorLink"},"Submit pull request")),Object(a.b)("h3",null,"Preview"),Object(a.b)("p",null,"The ",Object(a.b)("a",i({parentName:"p"},{href:"https://developer.github.com/v4/"}),"GitHub GraphQL API")," is very well\ndocumented, and even though the focus of this tutorial isn’t learning and using\nGraphQL, it’s a great opportunity to fetch Carbon-related data for this Carbon\ntutorial."),Object(a.b)("p",null,"To do so, we’ll be using Apollo Client, the front-end component of the\n",Object(a.b)("a",i({parentName:"p"},{href:"https://www.apollographql.com/docs/intro/platform"}),"Apollo Platform"),". Apollo\nprovides several open source tools for using GraphQL throughout your\napplication’s stack. Apollo Client is a sophisticated GraphQL client that\nmanages data and state in an application."),Object(a.b)("p",null,"A ",Object(a.b)("a",i({parentName:"p"},{href:"https://react-step-4--carbon-tutorial.netlify.com"}),"preview")," of what you will\nbuild (see repositories page):"),Object(a.b)(r.a,{height:"400",title:"Carbon Tutorial Step 3",src:"https://react-step-4--carbon-tutorial.netlify.com",frameBorder:"no",allowtransparency:"true",allowFullScreen:"true",mdxType:"Preview"}),Object(a.b)("h2",null,"Fork, clone and branch"),Object(a.b)("p",null,"This tutorial has an accompanying GitHub repository called\n",Object(a.b)("a",i({parentName:"p"},{href:"https://github.com/carbon-design-system/carbon-tutorial"}),"carbon-tutorial")," that\nwe’ll use as a starting point for each step. If you haven’t forked and cloned\nthat repository yet, and haven’t added the upstream remote, go ahead and do so\nby following the\n",Object(a.b)("a",i({parentName:"p"},{href:"/developing/react-tutorial/step-1#fork-clone-and-branch"}),"step 1 instructions"),"."),Object(a.b)("h3",null,"Branch"),Object(a.b)("p",null,"With your repository all set up, let’s check out the branch for this tutorial\nstep’s starting point."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"git fetch upstream\ngit checkout -b react-step-3 upstream/react-step-3\n")),Object(a.b)("h3",null,"Build and start app"),Object(a.b)("p",null,"Install the app’s dependencies:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"yarn\n")),Object(a.b)("p",null,"Then, start the app:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"yarn start\n")),Object(a.b)("p",null,"You should see something similar to where the\n",Object(a.b)("a",i({parentName:"p"},{href:"/developing/react-tutorial/step-2"}),"previous step")," left off. Stop your app with\n",Object(a.b)("inlineCode",{parentName:"p"},"CTRL-C")," and let’s get everything installed."),Object(a.b)("h2",null,"Install dependencies"),Object(a.b)("p",null,"We’ll need to install three new dependencies to incorporate Apollo into our\napplication."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"apollo-boost")," - package containing everything you need to set up Apollo\nClient"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"graphql")," - parses your GraphQL queries"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"react-apollo")," - Apollo integration for React")),Object(a.b)("p",null,"Install them with the command:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"yarn add apollo-boost@0.4.2 graphql@14.3.1 react-apollo@2.5.6\n")),Object(a.b)("h2",null,"Create access token"),Object(a.b)("p",null,"You’ll need a personal access token from your GitHub account in order to make\nrequests to the GitHub API. Check out\n",Object(a.b)("a",i({parentName:"p"},{href:"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line"}),"this guide"),"\nto see how to get one."),Object(a.b)("p",null,"When you get to the scope/permissions step, you can leave them all unchecked. We\ndon’t need any special permissions, we just need access to the public API."),Object(a.b)("p",null,"Once you have your token, we need to put it in a place where create-react-app\ncan use it. When your application is being built and developed, create-react-app\nwill parse environmental variables in any file that starts with ",Object(a.b)("inlineCode",{parentName:"p"},".env")," and make\nthem available under ",Object(a.b)("inlineCode",{parentName:"p"},"process.env.MY_VARIABLE"),"."),Object(a.b)("p",null,"One caveat is that we need to start our variables with ",Object(a.b)("inlineCode",{parentName:"p"},"REACT_APP_"),". You can\nread more about environmental variables in\n",Object(a.b)("a",i({parentName:"p"},{href:"https://facebook.github.io/create-react-app/docs/adding-custom-environment-variables"}),"create-react-app’s guide"),"."),Object(a.b)("p",null,"Since we don’t want to commit this file to Git, we can put it in ",Object(a.b)("inlineCode",{parentName:"p"},".env.local"),"\nwhich is in our ",Object(a.b)("inlineCode",{parentName:"p"},".gitignore")," list. Your file should just have a single line like\nthis one, where the ",Object(a.b)("inlineCode",{parentName:"p"},"x"),"s are replaced with your unique token."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash",metastring:"path=.env.local",path:".env.local"}),"REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN=xxxxxx\n")),Object(a.b)("p",null,"Go ahead and start your app with ",Object(a.b)("inlineCode",{parentName:"p"},"yarn start"),", or, if your app is running,\nyou’ll need to restart it to get access to this token."),Object(a.b)("h2",null,"Connect to Apollo"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"react-apollo")," library gives us a component that we need to put at the base\nof our application. Typically the best place for things that need to wrap the\nentire application is at the root of the application. For us, that’s at\n",Object(a.b)("inlineCode",{parentName:"p"},"src/index.js"),"."),Object(a.b)("p",null,"Add these two imports to ",Object(a.b)("inlineCode",{parentName:"p"},"src/index.js"),":"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript",metastring:"path=src/index.js",path:"src/index.js"}),"import ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n")),Object(a.b)("p",null,"Next, make your client by providing a URI for the GitHub GraphQL API as well as\nan authorization header using the environmental variable you just added to\n",Object(a.b)("inlineCode",{parentName:"p"},".env.local"),"."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript",metastring:"path=src/index.js",path:"src/index.js"}),"const client = new ApolloClient({\n  uri: 'https://api.github.com/graphql',\n  headers: {\n    authorization: `Bearer ${process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN}`,\n  },\n});\n")),Object(a.b)("p",null,"Now we can wrap our application with ",Object(a.b)("inlineCode",{parentName:"p"},"ApolloProvider"),". At the same time, we’ll\npass in the client we just made as a prop to the ",Object(a.b)("inlineCode",{parentName:"p"},"ApolloProvider")," component.\nReplace:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-html",metastring:"path=src/index.js",path:"src/index.js"}),"<Router>\n  <App />\n</Router>\n")),Object(a.b)("p",null,"With:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-html",metastring:"path=src/index.js",path:"src/index.js"}),"<ApolloProvider client={client}>\n  <Router>\n    <App />\n  </Router>\n</ApolloProvider>\n")),Object(a.b)("h2",null,"Fetch data"),Object(a.b)("h3",null,"Imports"),Object(a.b)("p",null,"Add the following imports at the top of ",Object(a.b)("inlineCode",{parentName:"p"},"RepoPage.js"),":"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript",metastring:"path=src/content/RepoPage/RepoPage.js",path:"src/content/RepoPage/RepoPage.js"}),"import { gql } from 'apollo-boost';\nimport { Query } from 'react-apollo';\n")),Object(a.b)("h3",null,"Query"),Object(a.b)("p",null,"Next we’ll assemble our GraphQL query to fetch only the data we need from the\nGraphQL API. We’ll do this using the ",Object(a.b)("inlineCode",{parentName:"p"},"gql")," helper we just imported. The ",Object(a.b)("inlineCode",{parentName:"p"},"gql"),"\nhelper lets you write GraphQL queries using interpolated strings (backticks) in\nJavaScript. In addition, we’ll be using the ",Object(a.b)("inlineCode",{parentName:"p"},"Query")," component from\n",Object(a.b)("inlineCode",{parentName:"p"},"react-apollo")," which gives us some great information about our query’s loading\nstate in addition to the data."),Object(a.b)("p",null,"You can use GitHub’s ",Object(a.b)("a",i({parentName:"p"},{href:"https://developer.github.com/v4/explorer/"}),"explorer")," tool\nto write and test your own queries. Try copying the query below and experiment\nwith changing the properties. You can also click the “Docs” button in the top\nright of the explorer to view all of the available data and query parameters."),Object(a.b)("p",null,"If you’d like some more information regarding writing queries and using the\nQuery component, we recommend\n",Object(a.b)("a",i({parentName:"p"},{href:"https://www.apollographql.com/docs/tutorial/queries"}),"Apollo’s documentation")," on\nthis topic."),Object(a.b)("p",null,"Add this after your imports:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-graphql",metastring:"path=src/content/RepoPage/RepoPage.js",path:"src/content/RepoPage/RepoPage.js"}),"const REPO_QUERY = gql`\n  query REPO_QUERY {\n    # Let's use carbon as our organization\n    organization(login: \"carbon-design-system\") {\n      # We'll grab all the repositories in one go. To load more resources\n      # continuously, see the advanced topics.\n      repositories(first: 75, orderBy: { field: UPDATED_AT, direction: DESC }) {\n        totalCount\n        nodes {\n          url\n          homepageUrl\n          issues(filterBy: { states: OPEN }) {\n            totalCount\n          }\n          stargazers {\n            totalCount\n          }\n          releases(first: 1) {\n            totalCount\n            nodes {\n              name\n            }\n          }\n          name\n          updatedAt\n          createdAt\n          description\n          id\n        }\n      }\n    }\n  }\n`;\n")),Object(a.b)("h3",null,"Helpers"),Object(a.b)("p",null,"Below that, we should have our table headers set in a previous step that are\ngood to go. Let’s also keep our example rows below that."),Object(a.b)("p",null,"Our last column in the data table will be a comma-separated list of repository\nand home page links, so let’s create a component called ",Object(a.b)("inlineCode",{parentName:"p"},"LinkList"),"."),Object(a.b)("p",null,"Import ",Object(a.b)("inlineCode",{parentName:"p"},"Link")," at the top of ",Object(a.b)("inlineCode",{parentName:"p"},"RepoPage.js"),"."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript",metastring:"path=src/content/RepoPage/RepoPage.js",path:"src/content/RepoPage/RepoPage.js"}),"import { Link } from 'carbon-components-react';\n")),Object(a.b)("p",null,"Then use ",Object(a.b)("inlineCode",{parentName:"p"},"Link")," in this component that has two props (",Object(a.b)("inlineCode",{parentName:"p"},"url")," and ",Object(a.b)("inlineCode",{parentName:"p"},"homepageUrl"),")\nand returns an unordered list. If the repository does not have a home page URL,\nonly render the repository link."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript",metastring:"path=src/content/RepoPage/RepoPage.js",path:"src/content/RepoPage/RepoPage.js"}),"const LinkList = ({ url, homepageUrl }) => (\n  <ul style={{ display: 'flex' }}>\n    <li>\n      <Link href={url}>GitHub</Link>\n    </li>\n    {homepageUrl && (\n      <li>\n        <span>&nbsp;|&nbsp;</span>\n        <Link href={homepageUrl}>Homepage</Link>\n      </li>\n    )}\n  </ul>\n);\n")),Object(a.b)("p",null,"As a final helper, let’s create a function that transforms row data to our\nexpected header keys. Notice how we’re using our new ",Object(a.b)("inlineCode",{parentName:"p"},"LinkList")," component to\ngenerate the value of the ",Object(a.b)("inlineCode",{parentName:"p"},"links")," key in each row."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript",metastring:"path=src/content/RepoPage/RepoPage.js",path:"src/content/RepoPage/RepoPage.js"}),"const getRowItems = (rows) =>\n  rows.map((row) => ({\n    ...row,\n    key: row.id,\n    stars: row.stargazers.totalCount,\n    issueCount: row.issues.totalCount,\n    createdAt: new Date(row.createdAt).toLocaleDateString(),\n    updatedAt: new Date(row.updatedAt).toLocaleDateString(),\n    links: <LinkList url={row.url} homepageUrl={row.homepageUrl} />,\n  }));\n")),Object(a.b)("h3",null,"Query component"),Object(a.b)("p",null,"At this point, we should run our query and ",Object(a.b)("inlineCode",{parentName:"p"},"console.log()")," the results to verify\nthat the request is working."),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"Query")," component from ",Object(a.b)("inlineCode",{parentName:"p"},"react-apollo")," lets us render different content based\non the state of our request. When ",Object(a.b)("inlineCode",{parentName:"p"},"loading")," is true, we’ll render ",Object(a.b)("inlineCode",{parentName:"p"},"Loading..."),"\nfor the time being. If there’s an issue, we’ll render the corresponding error\nmessage."),Object(a.b)("p",null,"Finally, if neither of those are true, it means we have our data! One nice\nadvantage of GraphQL is that as long as there are no errors, we can be certain\nthe properties on the data we requested aren’t ",Object(a.b)("inlineCode",{parentName:"p"},"undefined"),"."),Object(a.b)("p",null,"We need to render the ",Object(a.b)("inlineCode",{parentName:"p"},"RepoTable")," in ",Object(a.b)("inlineCode",{parentName:"p"},"Query"),"’s ",Object(a.b)("inlineCode",{parentName:"p"},"return()")," statement once the\nrequest is no longer loading and when there are no errors. To do so, replace the\n",Object(a.b)("inlineCode",{parentName:"p"},"RepoTable")," line with the following ",Object(a.b)("inlineCode",{parentName:"p"},"Query"),"."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript",metastring:"path=src/content/RepoPage/RepoPage.js",path:"src/content/RepoPage/RepoPage.js"}),"<RepoTable headers={headers} rows={rows} />\n")),Object(a.b)("p",null,"Notice how we’re passing the ",Object(a.b)("inlineCode",{parentName:"p"},"REPO_QUERY")," that we previously defined into the\n",Object(a.b)("inlineCode",{parentName:"p"},"query")," prop."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript",metastring:"path=src/content/RepoPage/RepoPage.js",path:"src/content/RepoPage/RepoPage.js"}),"<Query query={REPO_QUERY}>\n  {({ loading, error, data }) => {\n    // Wait for the request to complete\n    if (loading) return 'Loading...';\n\n    // Something went wrong with the data fetching\n    if (error) return `Error! ${error.message}`;\n\n    // If we're here, we've got our data!\n    console.log(data.organization);\n\n    return (\n      <>\n        <RepoTable headers={headers} rows={rows} />\n      </>\n    );\n  }}\n</Query>\n")),Object(a.b)("p",null,"The page will look the same as we’re still rendering our static example rows,\nbut if you view your browser’s console (e.g.\n",Object(a.b)("a",i({parentName:"p"},{href:"https://developers.google.com/web/tools/chrome-devtools/"}),"Chrome DevTools"),"),\nyou should see the response from GitHub!"),Object(a.b)("h2",null,"Populate data table"),Object(a.b)("p",null,"Now that we have that data, let’s populate the data table. Replace\n",Object(a.b)("inlineCode",{parentName:"p"},"console.log(data.organization);")," with the following that destructures the\n",Object(a.b)("inlineCode",{parentName:"p"},"data.organization")," object. Once we have the repositories, we can call our\n",Object(a.b)("inlineCode",{parentName:"p"},"getRowItems()")," helper to build the data table rows."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript",metastring:"path=src/content/RepoPage/RepoPage.js",path:"src/content/RepoPage/RepoPage.js"}),"// If we're here, we've got our data!\nconst { repositories } = data.organization;\nconst rows = getRowItems(repositories.nodes);\n")),Object(a.b)("p",null,"Then, towards the top of ",Object(a.b)("inlineCode",{parentName:"p"},"RepoPage.js")," delete the ",Object(a.b)("inlineCode",{parentName:"p"},"rows")," array because we no\nlonger need the example rows."),Object(a.b)("h3",null,"Render repository descriptions"),Object(a.b)("p",null,"The data table component and its pieces use a common React pattern called\n",Object(a.b)("a",i({parentName:"p"},{href:"https://reactjs.org/docs/render-props.html"}),"render props"),". This a really\npowerful way for libraries to give developers control of rendering and\nmanipulating their data."),Object(a.b)("p",null,"Revisiting ",Object(a.b)("inlineCode",{parentName:"p"},"RepoTable.js"),", we are already passing in our row objects along with\nheaders for each column. The ",Object(a.b)("inlineCode",{parentName:"p"},"render")," prop is being used to tell the data table\nhow to render the headers and rows. That prop takes a function that receives the\nprocessed headers and rows as arguments as well as some helper functions for\nrendering the table."),Object(a.b)("p",null,"One common hurdle with the data table is how to access data that might not\ncorrespond with a table column but is needed to compute the value of a cell that\ndoes. The data table component processes and controls only the row properties\nwhich corresponds to headers (columns). Because of this, the ",Object(a.b)("inlineCode",{parentName:"p"},"rows")," object you\nget access to in the render prop function is ",Object(a.b)("em",{parentName:"p"},"different")," than the one you passed\nin to the ",Object(a.b)("inlineCode",{parentName:"p"},"rows")," prop."),Object(a.b)("p",null,"We need to modify one aspect of the data table because if you expand a row, it\nsays ",Object(a.b)("inlineCode",{parentName:"p"},"Row description"),". We want to update that with the repository description\ncoming from the GitHub API. This is an example of where we need a simple look-up\nfunction to find the data we care about - data that does not directly correspond\nto a column."),Object(a.b)("p",null,"To do so, in ",Object(a.b)("inlineCode",{parentName:"p"},"RepoTable.js"),", add this look-up function as the first lines inside\nthe ",Object(a.b)("inlineCode",{parentName:"p"},"RepoTable"),". This should go immediately before the component’s ",Object(a.b)("inlineCode",{parentName:"p"},"return()"),"."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript",metastring:"path=src/content/RepoPage/RepoTable.js",path:"src/content/RepoPage/RepoTable.js"}),"const getRowDescription = (rowId) => {\n  const row = rows.find(({ id }) => id === rowId);\n  return row ? row.description : '';\n};\n")),Object(a.b)("p",null,"Finally, in ",Object(a.b)("inlineCode",{parentName:"p"},"RepoTable.js"),", replace ",Object(a.b)("inlineCode",{parentName:"p"},"<p>Row description</p>")," with:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-html",metastring:"path=src/content/RepoPage/RepoTable.js",path:"src/content/RepoPage/RepoTable.js"}),"<p>{getRowDescription(row.id)}</p>\n")),Object(a.b)("h2",null,"Add loading"),Object(a.b)("p",null,"At this point, the first time that you visit the repositories page, we’re\nquerying the GitHub API and rendering the response through the ",Object(a.b)("inlineCode",{parentName:"p"},"DataTable"),"\ncomponent. We could stop here, but there’s more to be done! Let’s replace the\n",Object(a.b)("inlineCode",{parentName:"p"},"Loading...")," string with the\n",Object(a.b)("a",i({parentName:"p"},{href:"http://react.carbondesignsystem.com/?selectedKind=DataTableSkeleton"}),"DataTableSkeleton component"),"."),Object(a.b)("p",null,"To do so, back to ",Object(a.b)("inlineCode",{parentName:"p"},"RepoPage.js"),", add the ",Object(a.b)("inlineCode",{parentName:"p"},"DataTableSkeleton")," import by modifying\nthe existing ",Object(a.b)("inlineCode",{parentName:"p"},"carbon-components-react")," import."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript",metastring:"path=src/content/RepoPage/RepoPage.js",path:"src/content/RepoPage/RepoPage.js"}),"import { Link, DataTableSkeleton } from 'carbon-components-react';\n")),Object(a.b)("p",null,"Then replace the ",Object(a.b)("inlineCode",{parentName:"p"},"if (loading) return 'Loading...';")," with:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript",metastring:"path=src/content/RepoPage/RepoPage.js",path:"src/content/RepoPage/RepoPage.js"}),"if (loading)\n  return (\n    <DataTableSkeleton\n      columnCount={headers.length + 1}\n      rowCount={10}\n      headers={headers}\n    />\n  );\n")),Object(a.b)("p",null,"We need to tell the loading skeleton how many rows to render, so let’s use 10\nskeleton rows to prepare for the next enhancement…"),Object(a.b)("h2",null,"Add pagination"),Object(a.b)("p",null,"Pagination! Instead of rendering every repository, let’s add pagination to the\ndata table to only render 10 at a time. Depending on your specific requirements,\nyou may need to fetch new data each time that you interact with the pagination\ncomponent, but for simplicity, we’re going to make one request to fetch all\ndata, and then paginate the in-memory row data."),Object(a.b)("p",null,"We’ll be using ",Object(a.b)("a",i({parentName:"p"},{href:"https://reactjs.org/docs/hooks-intro.html"}),"React Hooks")," to\nmanage our state. Hooks are a relatively new React API that allows us to author\na React component’s stateful logic in a function component rather than a class\ncomponent. Using hooks means we don’t need to worry about complex lifecycle\nmethods."),Object(a.b)("p",null,"Import React’s ",Object(a.b)("a",i({parentName:"p"},{href:"https://reactjs.org/docs/hooks-state.html"}),"useState")," by\nmodifying the ",Object(a.b)("inlineCode",{parentName:"p"},"React")," import."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript",metastring:"path=src/content/RepoPage/RepoPage.js",path:"src/content/RepoPage/RepoPage.js"}),"import React, { useState } from 'react';\n")),Object(a.b)("p",null,"Then initialize the new state variables that we’ll use for pagination as the\nfirst lines inside the ",Object(a.b)("inlineCode",{parentName:"p"},"RepoPage")," component, above the outer ",Object(a.b)("inlineCode",{parentName:"p"},"return()"),"."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript",metastring:"path=src/content/RepoPage/RepoPage.js",path:"src/content/RepoPage/RepoPage.js"}),"const RepoPage = () => {\n  const [totalItems, setTotalItems] = useState(0);\n  const [firstRowIndex, setFirstRowIndex] = useState(0);\n  const [currentPageSize, setCurrentPageSize] = useState(10);\n...\n")),Object(a.b)("p",null,"This initializes the total number of rows and the index of the first row to ",Object(a.b)("inlineCode",{parentName:"p"},"0"),",\nand the page size to ",Object(a.b)("inlineCode",{parentName:"p"},"10")," as we also specified in our loading skeleton."),Object(a.b)("p",null,"Next we need to use the function that updates the ",Object(a.b)("inlineCode",{parentName:"p"},"totalItems")," state,\n",Object(a.b)("inlineCode",{parentName:"p"},"setTotalItems()"),", after we destructure our ",Object(a.b)("inlineCode",{parentName:"p"},"data.organization.repositories"),".\nYour block that transforms row data should look like:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript",metastring:"path=src/content/RepoPage/RepoPage.js",path:"src/content/RepoPage/RepoPage.js"}),"// If we're here, we've got our data!\nconst { repositories } = data.organization;\nsetTotalItems(repositories.totalCount);\nconst rows = getRowItems(repositories.nodes);\n")),Object(a.b)("p",null,"Then we need to update our ",Object(a.b)("inlineCode",{parentName:"p"},"RepoTable")," ",Object(a.b)("inlineCode",{parentName:"p"},"rows")," prop to only render the subset of\nrows for the current “page”. Update\n",Object(a.b)("inlineCode",{parentName:"p"},"<RepoTable headers={headers} rows={rows} />")," to:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript",metastring:"path=src/content/RepoPage/RepoPage.js",path:"src/content/RepoPage/RepoPage.js"}),"<RepoTable\n  headers={headers}\n  rows={rows.slice(\n    firstRowIndex,\n    firstRowIndex + currentPageSize\n  )}\n/>\n")),Object(a.b)(u,{mdxType:"InlineNotification"},Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note:")," We only pass the rows that we want our table to display. We can do\nthis by slicing the our array of rows depending on the first item and the page\nsize.")),Object(a.b)("p",null,"Finally, let’s add the ",Object(a.b)("inlineCode",{parentName:"p"},"Pagination")," to update our state variables and cause the\ndata table to render new rows."),Object(a.b)("p",null,"Import ",Object(a.b)("inlineCode",{parentName:"p"},"Pagination")," by updating the ",Object(a.b)("inlineCode",{parentName:"p"},"carbon-components-react")," import."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript",metastring:"path=src/content/RepoPage/RepoPage.js",path:"src/content/RepoPage/RepoPage.js"}),"import { Link, DataTableSkeleton, Pagination } from 'carbon-components-react';\n")),Object(a.b)("p",null,"Immediately after the ",Object(a.b)("inlineCode",{parentName:"p"},"RepoTable")," closing tag (",Object(a.b)("inlineCode",{parentName:"p"},"/>"),"), add the ",Object(a.b)("inlineCode",{parentName:"p"},"Pagination"),"\ncomponent using the state variables that we previously initialized."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript",metastring:"path=src/content/RepoPage/RepoPage.js",path:"src/content/RepoPage/RepoPage.js"}),'<Pagination\n  totalItems={totalItems}\n  backwardText="Previous page"\n  forwardText="Next page"\n  pageSize={currentPageSize}\n  pageSizes={[5, 10, 15, 25]}\n  itemsPerPageText="Items per page"\n  onChange={({ page, pageSize }) => {\n    if (pageSize !== currentPageSize) {\n      setCurrentPageSize(pageSize);\n    }\n    setFirstRowIndex(pageSize * (page - 1));\n  }}\n/>\n')),Object(a.b)(u,{mdxType:"InlineNotification"},Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note:")," The ",Object(a.b)("inlineCode",{parentName:"p"},"Pagination")," component isn’t inherently connected in any way to\nthe ",Object(a.b)("inlineCode",{parentName:"p"},"DataTable")," - we need to tell it what to do when a change occurs using the\n",Object(a.b)("inlineCode",{parentName:"p"},"onChange")," prop. This includes both page size changes and displaying different\nrows.")),Object(a.b)(u,{mdxType:"InlineNotification"},Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note:")," Like the other Carbon React components, ",Object(a.b)("inlineCode",{parentName:"p"},"Pagination")," component\nexamples can be found in\n",Object(a.b)("a",i({parentName:"p"},{href:"http://react.carbondesignsystem.com/?selectedKind=Pagination"}),"Storybook")," by\nbrowsing the story and knobs.")),Object(a.b)("p",null,"That does it! Your data table should fetch GitHub data on first render. You can\nexpand each row to see the repository’s description. You can modify the\npagination items per page and cycle through pages or jump to a specific page of\nrepositories."),Object(a.b)("h2",null,"Submit pull request"),Object(a.b)("p",null,"We’re going to submit a pull request to verify completion of this tutorial step."),Object(a.b)("h3",null,"Continuous integration (CI) check"),Object(a.b)("p",null,"Run the CI check to make sure we’re all set to submit a pull request."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"yarn ci-check\n")),Object(a.b)(u,{mdxType:"InlineNotification"},Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note:")," Having issues running the CI check?\n",Object(a.b)("a",i({parentName:"p"},{href:"/developing/react-tutorial/step-1#continuous-integration-(ci)-check"}),"Step 1"),"\nhas troubleshooting notes that may help.")),Object(a.b)("h3",null,"Git commit and push"),Object(a.b)("p",null,"Before we can create a pull request, stage and commit all of your changes:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),'git add --all && git commit -m "feat(tutorial): complete step 3"\n')),Object(a.b)("p",null,"Then, push to your repository:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"git push origin react-step-3\n")),Object(a.b)(u,{mdxType:"InlineNotification"},Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note:")," Having issues pushing your changes?\n",Object(a.b)("a",i({parentName:"p"},{href:"/developing/react-tutorial/step-1#git-commit-and-push"}),"Step 1")," has\ntroubleshooting notes that may help.")),Object(a.b)("h3",null,"Pull request (PR)"),Object(a.b)("p",null,"Finally, visit\n",Object(a.b)("a",i({parentName:"p"},{href:"https://github.com/carbon-design-system/carbon-tutorial"}),"carbon-tutorial")," to\n“Compare & pull request”. In doing so, make sure that you are comparing to\n",Object(a.b)("inlineCode",{parentName:"p"},"react-step-3")," into ",Object(a.b)("inlineCode",{parentName:"p"},"base: react-step-3"),"."),Object(a.b)(u,{mdxType:"InlineNotification"},Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note:")," Expect your tutorial step PRs to be reviewed by the Carbon team but\nnot merged. We’ll close your PR so we can keep the repository’s remote branches\npristine and ready for the next person!")),Object(a.b)(u,{mdxType:"InlineNotification"},Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note:")," If your PR fails the CircleCI test with the error\n",Object(a.b)("inlineCode",{parentName:"p"},"Can't make a request in offline mode"),", try running the following command:\n",Object(a.b)("inlineCode",{parentName:"p"},"rm -rf .yarn-offline-mirror node_modules && yarn cache clean && yarn install"),".\nAdd and commit the changes once this completes, and try pushing again.")))}g.isMDXComponent=!0},I8xM:function(e,t,n){e.exports={bxTextTruncateEnd:"PageTabs-module--bx--text-truncate--end--267NA",bxTextTruncateFront:"PageTabs-module--bx--text-truncate--front--3xEQF",tabsContainer:"PageTabs-module--tabs-container--8N4k0",list:"PageTabs-module--list--3eFQc",listItem:"PageTabs-module--list-item--nUmtD",link:"PageTabs-module--link--1mDJ1",selectedItem:"PageTabs-module--selected-item--YPVr3"}},QH2O:function(e,t,n){e.exports={bxTextTruncateEnd:"PageHeader-module--bx--text-truncate--end--mZWeX",bxTextTruncateFront:"PageHeader-module--bx--text-truncate--front--3zvrI",pageHeader:"PageHeader-module--page-header--3hIan",withTabs:"PageHeader-module--with-tabs--3nKxA",text:"PageHeader-module--text--o9LFq"}}}]);
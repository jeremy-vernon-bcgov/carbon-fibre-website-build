{"componentChunkName":"component---src-pages-components-button-usage-mdx","path":"/components/button/usage/","result":{"pageContext":{"frontmatter":{"title":"Button","description":"Buttons are used to initialize an action. Button labels express what action will occur when the user interacts with it.","tabs":["Usage","Style","Code","Accessibility"]},"relativePagePath":"/components/button/usage.mdx","titleType":"prepend","MdxNode":{"id":"ffabe156-8033-5ca7-8ee1-73795deec76d","children":[],"parent":"e292d4fe-9800-5baf-9247-5b0ff7cf70ed","internal":{"content":"---\ntitle: Button\ndescription:\n  Buttons are used to initialize an action. Button labels express what action\n  will occur when the user interacts with it.\ntabs: ['Usage', 'Style', 'Code', 'Accessibility']\n---\n\n<PageDescription>\n\nButtons are used to initialize an action. Button labels express what action will\noccur when the user interacts with it.\n\n</PageDescription>\n\n<InlineNotification>\n\n**Note:** Some of the examples we discuss here include fluid (full-span) and\nhanging buttons which are not available for production use. This guidance\nreflects our current understanding of these topics and we are working towards\nreleasing this work in a future version of Carbon.\n\n</InlineNotification>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Live demo</AnchorLink>\n<AnchorLink>Formatting</AnchorLink>\n<AnchorLink>Content</AnchorLink>\n<AnchorLink>Behaviors</AnchorLink>\n<AnchorLink>Modifiers</AnchorLink>\n<AnchorLink>Related</AnchorLink>\n<AnchorLink>References</AnchorLink>\n<AnchorLink>Feedback</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nButtons are clickable elements that are used to trigger actions. They\ncommunicate calls to action to the user and allow users to interact with pages\nin a variety of ways. Button labels express what action will occur when the user\ninteracts with it.\n\n#### When to use\n\nUse buttons to communicate actions users can take and to allow users to interact\nwith the page. Each page should have one primary button, and any remaining calls\nto action should be represented as lower emphasis buttons.\n\n#### When not to use\n\nDo not use buttons as navigational elements. Instead, use\n[links](https://www.carbondesignsystem.com/components/link/usage) when the\ndesired action is to take the user to a new page.\n\n### Button types\n\n<Row>\n<Column colLg={12}>\n\n![Button types](images/button_usage_1.png)\n\n</Column>\n</Row>\n\n| Type        | Purpose                                                                                                                                                       |\n| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| _Primary_   | For the principal call to action on the page. Primary buttons should only appear once per screen (not including the application header or in a modal dialog). |\n| _Secondary_ | For secondary actions on each page; these can only be used  in conjunction with a primary button.                                                             |\n| _Tertiary_  | For less prominent actions; tertiary buttons can be used in isolation  or paired with a primary button when there are multiple calls to action.               |\n| _Danger_    | For actions that could have destructive effects on the user’s data  (delete, remove, etc.).                                                                   |\n| _Ghost_     | For the least pronounced actions; often used in conjunction with a primary button.                                                                            |\n\n## Live demo\n\nimport { Add16 } from '@carbon/icons-react';\n\n<ComponentDemo\n  scope={{ Add16 }}\n  components={[\n    {\n      id: 'button',\n      label: 'Button',\n    },\n    {\n      id: 'button-with-icon',\n      label: 'Button with icon',\n    },\n    {\n      id: 'icon-only',\n      label: 'Icon only',\n    },\n  ]}>\n  <ComponentVariant\n    id=\"button\"\n    knobs={{\n      Button: ['kind', 'disabled', 'size'],\n    }}\n    links={{\n      React:\n        'http://react.carbondesignsystem.com/?path=/story/buttons--default',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-button--basic',\n      Vue:\n        'http://vue.carbondesignsystem.com/?path=/story/components-cvbutton--default',\n      Vanilla: 'https://the-carbon-components.netlify.com/?nav=button',\n    }}>{`\n      <Button>Button</Button>\n    `}</ComponentVariant>\n  <ComponentVariant\n    id=\"button-with-icon\"\n    knobs={{\n      Button: ['kind', 'disabled', 'size'],\n    }}\n    links={{\n      React:\n        'http://react.carbondesignsystem.com/?path=/story/buttons--default',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-button--basic',\n      Vue:\n        'http://vue.carbondesignsystem.com/?path=/story/components-cvbutton--default',\n      Vanilla: 'https://the-carbon-components.netlify.com/?nav=button',\n    }}>{`\n      <Button renderIcon={Add16}>Button</Button>\n    `}</ComponentVariant>\n  <ComponentVariant\n    id=\"icon-only\"\n    knobs={{\n      Button: ['kind', 'disabled', 'size'],\n    }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/buttons--icon-only-buttons',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-button--basic',\n      Vue:\n        'http://vue.carbondesignsystem.com/?path=/story/components-cvbutton--icon-only',\n      Vanilla: 'https://the-carbon-components.netlify.com/?nav=button',\n    }}>{`\n      <Button\n        hasIconOnly\n        renderIcon={Add16}\n        tooltipAlignment=\"center\"\n        tooltipPosition=\"bottom\"\n        iconDescription=\"Button description here\"\n      />\n  `}</ComponentVariant>\n</ComponentDemo>\n\n## Formatting\n\n### Anatomy\n\nA button’s text label is the most important element on a button, as it\ncommunicates the action that will be performed when the user interacts with it.\nIn a contained button the text is always left-aligned, not centered. By default\nCarbon uses sentence case for all button labels.\n\nIf a text label is not used, an icon should be present to signify what the\nbutton does.\n\n<Row>\n<Column colLg={8}>\n\n![Button anatomy](images/button_usage_2.png)\n\n</Column>\n</Row>\n\n<Row>\n<Column colSm={2} colMd={4} colLg={4}>\n\n#### 1. Contained button\n\nA. Text label <br /> B. Container <br /> C. Icon (optional)\n\n#### 3. Ghost button\n\nA. Text label <br /> C. Icon (optional)\n\n</Column>\n<Column colSm={2} colMd={4} colLg={4}>\n\n#### 2. Outlined button\n\nA. Text label <br /> B. Container <br /> C. Icon (optional)\n\n#### 4. Icon button\n\nB. Container (optional) <br /> C. Icon\n\n</Column>\n</Row>\n\n<DoDontRow>\n  <DoDont caption=\"Do left-align text in a button, even if the button is wide.\">\n\n![Do left-align text in a button, even if the button is wide.](images/button_usage_5.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not center text in a button, even if the button is wide.\">\n\n![Do not center text in a button, even if the button is wide.](images/button_usage_6.png)\n\n  </DoDont>\n</DoDontRow>\n\n### Button size\n\nButtons are named according to their size and usage in the Carbon Sketch kit and\nin the code. The table below adds more context around the use case for each\nsize.\n\n<Row>\n<Column colLg={8}>\n\n![Button sizes](images/button_usage_3.png)\n\n</Column>\n</Row>\n\n| Name         | Height (px/rem) | Use Case                                                                                                                                                                                                                                                                           |\n| ------------ | --------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| _Full bleed_ | 64/4            | Use when buttons bleed to the edge of a larger component, like side panels or modals. _Note: This variant is not offered in the kit because it does not have a coded counterpart. Carbon only offers this button in the context of the [modal component](components/modal/usage)._ |\n| _Default_    | 48/3            | Use as primary page actions and other standalone actions.                                                                                                                                                                                                                          |\n| _Field_      | 40/2.5          | Use when buttons are paired with input fields.                                                                                                                                                                                                                                     |\n| _Small_      | 32/2            | Use when there is not enough vertical space for the default or field-sized button.                                                                                                                                                                                                 |\n\n### Emphasis\n\nYou don’t necessarily need to use the buttons in the order that their labels\nimply. For example, you don’t always need to use the secondary button as the\nsecond button in your layout. The most important thing is to establish a visual\nhierarchy between the buttons in your UI. Keep these best practices in mind.\n\n#### A single, high-emphasis button\n\nAs a general rule, a layout should contain a single high-emphasis button that\nmakes it clear that other buttons have less importance in the hierarchy. This\nhigh-emphasis button commands the most attention.\n\n#### Multiple button emphasis\n\nA high-emphasis button can be accompanied by medium- and low-emphasis buttons\nthat perform less important actions. Keep in mind that you should only group\ntogether calls to action that have a relationship to one another.\n\nAlthough secondary buttons have less visual prominence because they are less\nsaturated than their primary counterparts, they are still tonally heavy. If your\nlayout requires multiple actions—as is the case with some toolbars, data lists\nand dashboards—low emphasis buttons (tertiary or ghost) may be a better choice.\n\n<Row>\n<Column colLg={8}>\n\n![Button emphasis](images/button_usage_7.png)\n\n</Column>\n</Row>\n\n<DoDontRow>\n  <DoDont caption=\"Do use high-emphasis and medium-emphasis buttons in a button group.\">\n\n![Do use high-emphasis and medium-emphasis buttons in a button group.](images/button_usage_8_test.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not use two high-emphasis buttons in a button group.\">\n\n![Do not use two high-emphasis buttons in a button group.](images/button_usage_9_test.png)\n\n  </DoDont>\n</DoDontRow>\n\n### Alignment\n\nAlignment refers to whether the buttons are aligned to the right or the left of\na window, container, or layout. Buttons are unique, more so than any other\ncomponent, in that their alignment depends on where they appear and whether or\nnot they’re contained within another component.\n\nAs a general rule, on full-page designs, the primary button is on the left side\nof the page. When the browser window is large and the user is scrolling to read,\nit’s best to have the primary button where the user’s attention has been focused\nall along. Whereas in wizards, where a user is progressing through a series of\nsteps or dialog windows, the primary action traditionally sits at the bottom\nright. Buttons within components such as notifications, search fields, and data\ntables are also right-aligned.\n\nIn some cases a button group—or even a single button in the case of a side panel\nor small tile—may span the entire width of a window or container. Typical nested\nbutton locations include:\n\n- Banner calls to action\n- Dialog windows\n- Wizards\n- Forms\n- Cards\n- Toolbars\n\n<Row>\n<Column colLg={8}>\n\n![Primary button context](images/button_usage_10.png)\n\n</Column>\n</Row>\n\n| Alignment         | Use case                                                                                                                                                        |\n| ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| _Left-justified_  | Banner call to actions, in-page forms, and nested buttons in components like tiles                                                                              |\n| _Right-justified_ | Inline notifications, inline field buttons and  data tables, progressive forms, wizards, and single-button dialogs                                              |\n| _Full-span_       | Dialogs, side panels, and small tiles; currently Carbon does not offer a way to implement full-span buttons in code, without an override, they max out at 320px |\n\n#### Fluid versus fixed buttons\n\nButton alignment is also closely related to whether the button is treated as a\nfixed or a fluid element within a layout. When we say “fluid”, we mean that the\nbutton becomes a part of a larger, compound component by bleeding to two or more\nedges of its container. Rather than defining the a fluid button’s width in\ncolumns or mini units, its width is defined as a percentage (often 50%) of the\ncontainer’s width. Also, as a general rule, fluid buttons are never left-aligned\nin a layout or a container—they’re always either right-aligned, or span the full\nwidth of the container.\n\nFluid components like button never exist in isolation. As you can see in the\nexamples above, they are always part of another component, like modal or form.\nOther fluid components include tiles and most recently,\n[text inputs](/components/text-input/usage).\n\n<Row>\n<Column colLg={8}>\n\n![Example of a fluid input field and fluid button](images/button_usage_11.png)\n\n<Caption>\n  Example of a login screen using a fluid input field and a fluid button\n</Caption>\n\n</Column>\n</Row>\n\n<DoDontRow>\n  <DoDont caption=\"Do bleed ghost button hovers when they are paired with other fluid buttons.\">\n\n![Do bleed ghost button hovers when they are paired with other fluid buttons.](images/button_usage_12.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not use a tertiary button in a fluid application.\">\n\n![Do not use a tertiary button in a fluid application.](images/button_usage_13.png)\n\n  </DoDont>\n</DoDontRow>\n\n#### Fluid button border\n\nMany product designers have approached us looking for more guidance around\nborders between all fluid buttons. Although we haven’t made\n[this update](https://github.com/carbon-design-system/carbon/issues/5638) yet,\nwe plan to add a 1px border between all fluid buttons that calls the `$ui-03`\ntoken for subtle borders. This feature will add a 3:1 distinction between the\ntwo interactive UI elements. The border is a recommended feature to improve\naccessibility in data visualizations and the same logic should apply here.\n\n<Row>\n<Column colLg={8}>\n\n![Example of $ui-03 token border between fluid buttons](images/button_usage_14.png)\n\n<Caption>Example of $ui-03 token border between fluid buttons</Caption>\n\n</Column>\n</Row>\n\n#### Using the grid\n\nBy default the container’s width is set to the size of the text label with 64px\nfixed padding on the right side and 16px fixed padding on the left. However,\nwhen possible set the button container’s relative position to the responsive\nlayout grid and match buttton width to the other elements on the page. Ideally,\nwhen using groups of related buttons (not including ghost buttons), they should\nall be the same width. See [button groups](#Button-groups) below for more\ndetailed information.\n\n<Row>\n<Column colLg={8}>\n\n![Example of a primary button matching the width of a card in a layout](images/button_usage_15_test.png)\n\n<Caption>\n  Example of a primary button matching the width of a card in a layout\n</Caption>\n\n</Column>\n</Row>\n\n### Button groups\n\nButton groups are a useful way of aligning buttons that have a relationship.\nGroup the buttons logically into sets based on usage and importance. Too many\ncalls to action will overwhelm and confuse users so they should be avoided.\n\nAs mentioned in the [Emphasis section](#Emphasis), you don’t necessarily need to\nuse the buttons in the order that their labels imply. Either a secondary or a\ntertiary button can be used in conjunction with a primary button. In fact, due\nto the visual weight of the secondary button, it’s recommended to use tertiary\nor ghost buttons in layouts with more than three calls to action.\n\n<Row>\n<Column colLg={8}>\n\n![multiple buttons in a layout](images/button_usage_16.png)\n\n</Column>\n</Row>\n\n<DoDontRow>\n  <DoDont caption=\"Do use a primary and two of the same lower emphasis buttons in a button group.\">\n\n![Do use a primary and two of the same lower emphasis buttons in a button group.](images/button_usage_17.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not mix primary, secondary, and tertiary buttons in the same button group.\">\n\n![Do not mix primary, secondary, and tertiary buttons in the same button group.](images/button_usage_18.png)\n\n  </DoDont>\n</DoDontRow>\n\n#### Button groups and the grid\n\nIdeally, when using groups of related buttons (not including ghost buttons),\nthey should all be the same width. This can be achieved in one of two ways, both\nof which are acceptable. The first approach involves using the\n[narrow grid mode](/guidelines/2x-grid/implementation#grid-modes). In this\nsituation each button would be set individually on the column grid. _Note:\nCarbon developers are working on the narrow grid mode, currently left-hanging\nbuttons can only be achieved with an override._\n\n<Row>\n<Column colLg={8}>\n\n![Example of hanging buttons on the grid](images/button_usage_19.png)\n\n<Caption>Example of hanging buttons</Caption>\n\n</Column>\n</Row>\n\nSome products don’t want to hang their buttons into the gutter, but still want a\n16px distance between buttons. This can be achieved while maintaining same-width\nbuttons by treating the button group as a single object (rather than two\nseparate entities) on the grid. Each button will essentially span 50% of their\ncontainer with a programmatic 16px gutter between them.\n\n<Row>\n<Column colLg={8}>\n\n![Button group as single grid element](images/button_usage_20.png)\n\n<Caption>\n  Here the button group is treated as one element on the grid to achieve a 16px\n  gutter between the two, without gutter hang.\n</Caption>\n\n</Column>\n</Row>\n\n<DoDontRow>\n  <DoDont caption=\"Do apply the same width to all buttons in a group, even if they don’t bleed.\">\n\n![Do apply the same width to all buttons in a group](images/button_usage_21.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not make buttons in a group different widths.\">\n\n![Do not make buttons in a group different widths.](images/button_usage_22.png)\n\n  </DoDont>\n</DoDontRow>\n\n#### Horizontally arranged groups\n\nWhen using multiple buttons, the position of the primary button adheres to the\n[alignment guidance](#Alignment) above. To sum up, a primary button will be\nleft-aligned and positioned to the left of the secondary/tertiary button on\nfull-page designs. The primary button will be right-aligned and appear to the\nright of the secondary/tertiary button within wizards and dialog windows.\n\n<InlineNotification>\n\n**Note:** This guidance has changed. Previously we advocated maintaining the\nprimary button position to the right of the secondary button when the button\ngroup was left-aligned. After talking to teams and doing more research, we’ve\nrevised our position.\n\n</InlineNotification>\n\n<Row>\n<Column colLg={8}>\n\n![Button groups in context](images/button_usage_23.png)\n\n</Column>\n</Row>\n\n#### Stacked button groups\n\nTypical landing pages for product have buttons side by side. However vertical\nbutton groups are also common in products, to save real estate in narrow columns\nand occasionally side panels. In these instances, the primary button is always\non top and the secondary or tertiary button is below.\n\nGenerally, when designers stack buttons, they tend to use the fixed buttons.\nHowever, stacked fluid buttons are also an option in desktop side panels with\nespecially long calls to action. _Note: experimenting with stacked fluid buttons\nwould require an override to the existing code._\n\n<Row>\n<Column colLg={12}>\n\n![Fluid and fixed stacked button group examples](images/button_usage_24.png)\n\n</Column>\n</Row>\n\n#### Groups with Danger buttons\n\nDanger buttons have a different visual style to inform users of potentially\ndestructive actions they are about to take. Within a set, the danger button\nshould be styled as a primary button.\n\n<Row>\n<Column colLg={8}>\n\n![Danger button treated as Primary button in a modal](images/button_usage_25.png)\n\n</Column>\n</Row>\n\n## Content\n\n### Text labels\n\nA button’s text label is the most important element on a button, as it\ncommunicates the action that will be performed when the user interacts with it.\nButtons need to be clear and predictable.\n\nButton labels should clearly indicate the action of the button. To provide\nenough context, use the {verb} + {noun} content formula on buttons except in the\ncase of common actions like “Done”, “Close”, “Cancel”, “Add”, or “Delete”.\n\nThere are exceptions to this rule for situations in which button length could\ncause problems in compact UIs or negatively impact translation, but the {verb} +\n{noun} formula is still best practice.\n\nFor consistency, see Carbon’s\n[content guidelines](/guidelines/content/action-labels) for a list of\nrecommended action labels.\n\n<DoDontRow>\n  <DoDont caption=\"Do use the {verb} + {noun} content formula in buttons whenever possible.\">\n\n![Do use the verb + noun content formula in buttons whenever possible](images/button_usage_26.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not use only a noun as a button label.\">\n\n![Do not use only a noun as a button label](images/button_usage_27.png)\n\n  </DoDont>\n</DoDontRow>\n\n## Behaviors\n\n### Interactions\n\n#### Mouse\n\nUsers can trigger a button by clicking anywhere within the button container.\n\n#### Keyboard\n\nUsers can trigger a button by pressing `Enter` or `Space` while the button has\nfocus. For additional keyboard interactions, see the accessibility tab.\n\n#### Screen readers\n\nVoiceOver: Users can trigger a button by pressing `Enter` or `Space` while the\nbutton has focus.\n\nJAWS: Users can trigger a button by pressing `Enter` or `Space` while the button\nhas focus.\n\nNVDA: Users can trigger a button by pressing `Enter` or `Space` while the button\nhas focus.\n\n## Modifiers\n\n### Buttons with icons\n\nIcons can be placed next to labels to both clarify an action and call attention\nto a button. There are certain instances where an icon will suffice in place of\na text label, but use icon buttons cautiously.\n\n- Use glyphs (16px) within buttons\n- Glyphs are distinguished by their solid shape and knocked-out details\n- Glyphs should always appear to the right of the text\n- Glyphs used in buttons must be directly related to the action that the user is\n  taking\n- Glyphs must be the same color value as the text within a button\n\n<DoDontRow>\n  <DoDont caption=\"Do place the icon on the right side of the button after the text.\">\n\n![Do place the icon on the right side of the button after the text](images/button_usage_28.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not place the icon on the left side of the button before the text.\">\n\n![Do not place the icon on the left side of the button before the text](images/button_usage_29.png)\n\n  </DoDont>\n</DoDontRow>\n\n### Icon-only buttons\n\nIcon buttons allow users to take actions, and make choices, with a single tap.\nIcon buttons can take the form of any of the five types above but most commonly\nwill be styled as primary or ghost buttons.\n\n<Row>\n<Column colLg={8}>\n\n![Example of an icon-only ghost button in a data table](images/button_usage_30.png)\n\n<Caption>Example of an icon-only ghost button in a data table</Caption>\n\n</Column>\n</Row>\n\n## Related\n\n- [Link component](/components/link/usage)\n- [Modal component](/components/modal/usage)\n- [Form pattern](/patterns/forms-pattern)\n\n## References\n\n- Mehmet Goktürk,\n  [_The Glossary of Human Computer Interaction, Chapter 37_](https://www.interaction-design.org/literature/book/the-glossary-of-human-computer-interaction/fitts-s-law)\n  (The Interaction Design Foundation)\n- Jakob Nielsen,\n  [_OK-Cancel or Cancel-OK? The Trouble With Buttons_](https://www.nngroup.com/articles/ok-cancel-or-cancel-ok/)\n  (Nielsen Norman Group, 2008)\n- Artem Syzonenko\n  [_Buttons on the web: placement and order_](https://uxdesign.cc/buttons-placement-and-order-bb1c4abadfcb)\n  (UX Collective, 2019)\n\n## Feedback\n\nHelp us improve this component by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","type":"Mdx","contentDigest":"e3f1ce5bc8a8fc1bb525911fcf5fbde7","counter":1801,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Button","description":"Buttons are used to initialize an action. Button labels express what action will occur when the user interacts with it.","tabs":["Usage","Style","Code","Accessibility"]},"exports":{},"rawBody":"---\ntitle: Button\ndescription:\n  Buttons are used to initialize an action. Button labels express what action\n  will occur when the user interacts with it.\ntabs: ['Usage', 'Style', 'Code', 'Accessibility']\n---\n\n<PageDescription>\n\nButtons are used to initialize an action. Button labels express what action will\noccur when the user interacts with it.\n\n</PageDescription>\n\n<InlineNotification>\n\n**Note:** Some of the examples we discuss here include fluid (full-span) and\nhanging buttons which are not available for production use. This guidance\nreflects our current understanding of these topics and we are working towards\nreleasing this work in a future version of Carbon.\n\n</InlineNotification>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Live demo</AnchorLink>\n<AnchorLink>Formatting</AnchorLink>\n<AnchorLink>Content</AnchorLink>\n<AnchorLink>Behaviors</AnchorLink>\n<AnchorLink>Modifiers</AnchorLink>\n<AnchorLink>Related</AnchorLink>\n<AnchorLink>References</AnchorLink>\n<AnchorLink>Feedback</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nButtons are clickable elements that are used to trigger actions. They\ncommunicate calls to action to the user and allow users to interact with pages\nin a variety of ways. Button labels express what action will occur when the user\ninteracts with it.\n\n#### When to use\n\nUse buttons to communicate actions users can take and to allow users to interact\nwith the page. Each page should have one primary button, and any remaining calls\nto action should be represented as lower emphasis buttons.\n\n#### When not to use\n\nDo not use buttons as navigational elements. Instead, use\n[links](https://www.carbondesignsystem.com/components/link/usage) when the\ndesired action is to take the user to a new page.\n\n### Button types\n\n<Row>\n<Column colLg={12}>\n\n![Button types](images/button_usage_1.png)\n\n</Column>\n</Row>\n\n| Type        | Purpose                                                                                                                                                       |\n| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| _Primary_   | For the principal call to action on the page. Primary buttons should only appear once per screen (not including the application header or in a modal dialog). |\n| _Secondary_ | For secondary actions on each page; these can only be used  in conjunction with a primary button.                                                             |\n| _Tertiary_  | For less prominent actions; tertiary buttons can be used in isolation  or paired with a primary button when there are multiple calls to action.               |\n| _Danger_    | For actions that could have destructive effects on the user’s data  (delete, remove, etc.).                                                                   |\n| _Ghost_     | For the least pronounced actions; often used in conjunction with a primary button.                                                                            |\n\n## Live demo\n\nimport { Add16 } from '@carbon/icons-react';\n\n<ComponentDemo\n  scope={{ Add16 }}\n  components={[\n    {\n      id: 'button',\n      label: 'Button',\n    },\n    {\n      id: 'button-with-icon',\n      label: 'Button with icon',\n    },\n    {\n      id: 'icon-only',\n      label: 'Icon only',\n    },\n  ]}>\n  <ComponentVariant\n    id=\"button\"\n    knobs={{\n      Button: ['kind', 'disabled', 'size'],\n    }}\n    links={{\n      React:\n        'http://react.carbondesignsystem.com/?path=/story/buttons--default',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-button--basic',\n      Vue:\n        'http://vue.carbondesignsystem.com/?path=/story/components-cvbutton--default',\n      Vanilla: 'https://the-carbon-components.netlify.com/?nav=button',\n    }}>{`\n      <Button>Button</Button>\n    `}</ComponentVariant>\n  <ComponentVariant\n    id=\"button-with-icon\"\n    knobs={{\n      Button: ['kind', 'disabled', 'size'],\n    }}\n    links={{\n      React:\n        'http://react.carbondesignsystem.com/?path=/story/buttons--default',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-button--basic',\n      Vue:\n        'http://vue.carbondesignsystem.com/?path=/story/components-cvbutton--default',\n      Vanilla: 'https://the-carbon-components.netlify.com/?nav=button',\n    }}>{`\n      <Button renderIcon={Add16}>Button</Button>\n    `}</ComponentVariant>\n  <ComponentVariant\n    id=\"icon-only\"\n    knobs={{\n      Button: ['kind', 'disabled', 'size'],\n    }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/buttons--icon-only-buttons',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-button--basic',\n      Vue:\n        'http://vue.carbondesignsystem.com/?path=/story/components-cvbutton--icon-only',\n      Vanilla: 'https://the-carbon-components.netlify.com/?nav=button',\n    }}>{`\n      <Button\n        hasIconOnly\n        renderIcon={Add16}\n        tooltipAlignment=\"center\"\n        tooltipPosition=\"bottom\"\n        iconDescription=\"Button description here\"\n      />\n  `}</ComponentVariant>\n</ComponentDemo>\n\n## Formatting\n\n### Anatomy\n\nA button’s text label is the most important element on a button, as it\ncommunicates the action that will be performed when the user interacts with it.\nIn a contained button the text is always left-aligned, not centered. By default\nCarbon uses sentence case for all button labels.\n\nIf a text label is not used, an icon should be present to signify what the\nbutton does.\n\n<Row>\n<Column colLg={8}>\n\n![Button anatomy](images/button_usage_2.png)\n\n</Column>\n</Row>\n\n<Row>\n<Column colSm={2} colMd={4} colLg={4}>\n\n#### 1. Contained button\n\nA. Text label <br /> B. Container <br /> C. Icon (optional)\n\n#### 3. Ghost button\n\nA. Text label <br /> C. Icon (optional)\n\n</Column>\n<Column colSm={2} colMd={4} colLg={4}>\n\n#### 2. Outlined button\n\nA. Text label <br /> B. Container <br /> C. Icon (optional)\n\n#### 4. Icon button\n\nB. Container (optional) <br /> C. Icon\n\n</Column>\n</Row>\n\n<DoDontRow>\n  <DoDont caption=\"Do left-align text in a button, even if the button is wide.\">\n\n![Do left-align text in a button, even if the button is wide.](images/button_usage_5.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not center text in a button, even if the button is wide.\">\n\n![Do not center text in a button, even if the button is wide.](images/button_usage_6.png)\n\n  </DoDont>\n</DoDontRow>\n\n### Button size\n\nButtons are named according to their size and usage in the Carbon Sketch kit and\nin the code. The table below adds more context around the use case for each\nsize.\n\n<Row>\n<Column colLg={8}>\n\n![Button sizes](images/button_usage_3.png)\n\n</Column>\n</Row>\n\n| Name         | Height (px/rem) | Use Case                                                                                                                                                                                                                                                                           |\n| ------------ | --------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| _Full bleed_ | 64/4            | Use when buttons bleed to the edge of a larger component, like side panels or modals. _Note: This variant is not offered in the kit because it does not have a coded counterpart. Carbon only offers this button in the context of the [modal component](components/modal/usage)._ |\n| _Default_    | 48/3            | Use as primary page actions and other standalone actions.                                                                                                                                                                                                                          |\n| _Field_      | 40/2.5          | Use when buttons are paired with input fields.                                                                                                                                                                                                                                     |\n| _Small_      | 32/2            | Use when there is not enough vertical space for the default or field-sized button.                                                                                                                                                                                                 |\n\n### Emphasis\n\nYou don’t necessarily need to use the buttons in the order that their labels\nimply. For example, you don’t always need to use the secondary button as the\nsecond button in your layout. The most important thing is to establish a visual\nhierarchy between the buttons in your UI. Keep these best practices in mind.\n\n#### A single, high-emphasis button\n\nAs a general rule, a layout should contain a single high-emphasis button that\nmakes it clear that other buttons have less importance in the hierarchy. This\nhigh-emphasis button commands the most attention.\n\n#### Multiple button emphasis\n\nA high-emphasis button can be accompanied by medium- and low-emphasis buttons\nthat perform less important actions. Keep in mind that you should only group\ntogether calls to action that have a relationship to one another.\n\nAlthough secondary buttons have less visual prominence because they are less\nsaturated than their primary counterparts, they are still tonally heavy. If your\nlayout requires multiple actions—as is the case with some toolbars, data lists\nand dashboards—low emphasis buttons (tertiary or ghost) may be a better choice.\n\n<Row>\n<Column colLg={8}>\n\n![Button emphasis](images/button_usage_7.png)\n\n</Column>\n</Row>\n\n<DoDontRow>\n  <DoDont caption=\"Do use high-emphasis and medium-emphasis buttons in a button group.\">\n\n![Do use high-emphasis and medium-emphasis buttons in a button group.](images/button_usage_8_test.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not use two high-emphasis buttons in a button group.\">\n\n![Do not use two high-emphasis buttons in a button group.](images/button_usage_9_test.png)\n\n  </DoDont>\n</DoDontRow>\n\n### Alignment\n\nAlignment refers to whether the buttons are aligned to the right or the left of\na window, container, or layout. Buttons are unique, more so than any other\ncomponent, in that their alignment depends on where they appear and whether or\nnot they’re contained within another component.\n\nAs a general rule, on full-page designs, the primary button is on the left side\nof the page. When the browser window is large and the user is scrolling to read,\nit’s best to have the primary button where the user’s attention has been focused\nall along. Whereas in wizards, where a user is progressing through a series of\nsteps or dialog windows, the primary action traditionally sits at the bottom\nright. Buttons within components such as notifications, search fields, and data\ntables are also right-aligned.\n\nIn some cases a button group—or even a single button in the case of a side panel\nor small tile—may span the entire width of a window or container. Typical nested\nbutton locations include:\n\n- Banner calls to action\n- Dialog windows\n- Wizards\n- Forms\n- Cards\n- Toolbars\n\n<Row>\n<Column colLg={8}>\n\n![Primary button context](images/button_usage_10.png)\n\n</Column>\n</Row>\n\n| Alignment         | Use case                                                                                                                                                        |\n| ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| _Left-justified_  | Banner call to actions, in-page forms, and nested buttons in components like tiles                                                                              |\n| _Right-justified_ | Inline notifications, inline field buttons and  data tables, progressive forms, wizards, and single-button dialogs                                              |\n| _Full-span_       | Dialogs, side panels, and small tiles; currently Carbon does not offer a way to implement full-span buttons in code, without an override, they max out at 320px |\n\n#### Fluid versus fixed buttons\n\nButton alignment is also closely related to whether the button is treated as a\nfixed or a fluid element within a layout. When we say “fluid”, we mean that the\nbutton becomes a part of a larger, compound component by bleeding to two or more\nedges of its container. Rather than defining the a fluid button’s width in\ncolumns or mini units, its width is defined as a percentage (often 50%) of the\ncontainer’s width. Also, as a general rule, fluid buttons are never left-aligned\nin a layout or a container—they’re always either right-aligned, or span the full\nwidth of the container.\n\nFluid components like button never exist in isolation. As you can see in the\nexamples above, they are always part of another component, like modal or form.\nOther fluid components include tiles and most recently,\n[text inputs](/components/text-input/usage).\n\n<Row>\n<Column colLg={8}>\n\n![Example of a fluid input field and fluid button](images/button_usage_11.png)\n\n<Caption>\n  Example of a login screen using a fluid input field and a fluid button\n</Caption>\n\n</Column>\n</Row>\n\n<DoDontRow>\n  <DoDont caption=\"Do bleed ghost button hovers when they are paired with other fluid buttons.\">\n\n![Do bleed ghost button hovers when they are paired with other fluid buttons.](images/button_usage_12.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not use a tertiary button in a fluid application.\">\n\n![Do not use a tertiary button in a fluid application.](images/button_usage_13.png)\n\n  </DoDont>\n</DoDontRow>\n\n#### Fluid button border\n\nMany product designers have approached us looking for more guidance around\nborders between all fluid buttons. Although we haven’t made\n[this update](https://github.com/carbon-design-system/carbon/issues/5638) yet,\nwe plan to add a 1px border between all fluid buttons that calls the `$ui-03`\ntoken for subtle borders. This feature will add a 3:1 distinction between the\ntwo interactive UI elements. The border is a recommended feature to improve\naccessibility in data visualizations and the same logic should apply here.\n\n<Row>\n<Column colLg={8}>\n\n![Example of $ui-03 token border between fluid buttons](images/button_usage_14.png)\n\n<Caption>Example of $ui-03 token border between fluid buttons</Caption>\n\n</Column>\n</Row>\n\n#### Using the grid\n\nBy default the container’s width is set to the size of the text label with 64px\nfixed padding on the right side and 16px fixed padding on the left. However,\nwhen possible set the button container’s relative position to the responsive\nlayout grid and match buttton width to the other elements on the page. Ideally,\nwhen using groups of related buttons (not including ghost buttons), they should\nall be the same width. See [button groups](#Button-groups) below for more\ndetailed information.\n\n<Row>\n<Column colLg={8}>\n\n![Example of a primary button matching the width of a card in a layout](images/button_usage_15_test.png)\n\n<Caption>\n  Example of a primary button matching the width of a card in a layout\n</Caption>\n\n</Column>\n</Row>\n\n### Button groups\n\nButton groups are a useful way of aligning buttons that have a relationship.\nGroup the buttons logically into sets based on usage and importance. Too many\ncalls to action will overwhelm and confuse users so they should be avoided.\n\nAs mentioned in the [Emphasis section](#Emphasis), you don’t necessarily need to\nuse the buttons in the order that their labels imply. Either a secondary or a\ntertiary button can be used in conjunction with a primary button. In fact, due\nto the visual weight of the secondary button, it’s recommended to use tertiary\nor ghost buttons in layouts with more than three calls to action.\n\n<Row>\n<Column colLg={8}>\n\n![multiple buttons in a layout](images/button_usage_16.png)\n\n</Column>\n</Row>\n\n<DoDontRow>\n  <DoDont caption=\"Do use a primary and two of the same lower emphasis buttons in a button group.\">\n\n![Do use a primary and two of the same lower emphasis buttons in a button group.](images/button_usage_17.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not mix primary, secondary, and tertiary buttons in the same button group.\">\n\n![Do not mix primary, secondary, and tertiary buttons in the same button group.](images/button_usage_18.png)\n\n  </DoDont>\n</DoDontRow>\n\n#### Button groups and the grid\n\nIdeally, when using groups of related buttons (not including ghost buttons),\nthey should all be the same width. This can be achieved in one of two ways, both\nof which are acceptable. The first approach involves using the\n[narrow grid mode](/guidelines/2x-grid/implementation#grid-modes). In this\nsituation each button would be set individually on the column grid. _Note:\nCarbon developers are working on the narrow grid mode, currently left-hanging\nbuttons can only be achieved with an override._\n\n<Row>\n<Column colLg={8}>\n\n![Example of hanging buttons on the grid](images/button_usage_19.png)\n\n<Caption>Example of hanging buttons</Caption>\n\n</Column>\n</Row>\n\nSome products don’t want to hang their buttons into the gutter, but still want a\n16px distance between buttons. This can be achieved while maintaining same-width\nbuttons by treating the button group as a single object (rather than two\nseparate entities) on the grid. Each button will essentially span 50% of their\ncontainer with a programmatic 16px gutter between them.\n\n<Row>\n<Column colLg={8}>\n\n![Button group as single grid element](images/button_usage_20.png)\n\n<Caption>\n  Here the button group is treated as one element on the grid to achieve a 16px\n  gutter between the two, without gutter hang.\n</Caption>\n\n</Column>\n</Row>\n\n<DoDontRow>\n  <DoDont caption=\"Do apply the same width to all buttons in a group, even if they don’t bleed.\">\n\n![Do apply the same width to all buttons in a group](images/button_usage_21.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not make buttons in a group different widths.\">\n\n![Do not make buttons in a group different widths.](images/button_usage_22.png)\n\n  </DoDont>\n</DoDontRow>\n\n#### Horizontally arranged groups\n\nWhen using multiple buttons, the position of the primary button adheres to the\n[alignment guidance](#Alignment) above. To sum up, a primary button will be\nleft-aligned and positioned to the left of the secondary/tertiary button on\nfull-page designs. The primary button will be right-aligned and appear to the\nright of the secondary/tertiary button within wizards and dialog windows.\n\n<InlineNotification>\n\n**Note:** This guidance has changed. Previously we advocated maintaining the\nprimary button position to the right of the secondary button when the button\ngroup was left-aligned. After talking to teams and doing more research, we’ve\nrevised our position.\n\n</InlineNotification>\n\n<Row>\n<Column colLg={8}>\n\n![Button groups in context](images/button_usage_23.png)\n\n</Column>\n</Row>\n\n#### Stacked button groups\n\nTypical landing pages for product have buttons side by side. However vertical\nbutton groups are also common in products, to save real estate in narrow columns\nand occasionally side panels. In these instances, the primary button is always\non top and the secondary or tertiary button is below.\n\nGenerally, when designers stack buttons, they tend to use the fixed buttons.\nHowever, stacked fluid buttons are also an option in desktop side panels with\nespecially long calls to action. _Note: experimenting with stacked fluid buttons\nwould require an override to the existing code._\n\n<Row>\n<Column colLg={12}>\n\n![Fluid and fixed stacked button group examples](images/button_usage_24.png)\n\n</Column>\n</Row>\n\n#### Groups with Danger buttons\n\nDanger buttons have a different visual style to inform users of potentially\ndestructive actions they are about to take. Within a set, the danger button\nshould be styled as a primary button.\n\n<Row>\n<Column colLg={8}>\n\n![Danger button treated as Primary button in a modal](images/button_usage_25.png)\n\n</Column>\n</Row>\n\n## Content\n\n### Text labels\n\nA button’s text label is the most important element on a button, as it\ncommunicates the action that will be performed when the user interacts with it.\nButtons need to be clear and predictable.\n\nButton labels should clearly indicate the action of the button. To provide\nenough context, use the {verb} + {noun} content formula on buttons except in the\ncase of common actions like “Done”, “Close”, “Cancel”, “Add”, or “Delete”.\n\nThere are exceptions to this rule for situations in which button length could\ncause problems in compact UIs or negatively impact translation, but the {verb} +\n{noun} formula is still best practice.\n\nFor consistency, see Carbon’s\n[content guidelines](/guidelines/content/action-labels) for a list of\nrecommended action labels.\n\n<DoDontRow>\n  <DoDont caption=\"Do use the {verb} + {noun} content formula in buttons whenever possible.\">\n\n![Do use the verb + noun content formula in buttons whenever possible](images/button_usage_26.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not use only a noun as a button label.\">\n\n![Do not use only a noun as a button label](images/button_usage_27.png)\n\n  </DoDont>\n</DoDontRow>\n\n## Behaviors\n\n### Interactions\n\n#### Mouse\n\nUsers can trigger a button by clicking anywhere within the button container.\n\n#### Keyboard\n\nUsers can trigger a button by pressing `Enter` or `Space` while the button has\nfocus. For additional keyboard interactions, see the accessibility tab.\n\n#### Screen readers\n\nVoiceOver: Users can trigger a button by pressing `Enter` or `Space` while the\nbutton has focus.\n\nJAWS: Users can trigger a button by pressing `Enter` or `Space` while the button\nhas focus.\n\nNVDA: Users can trigger a button by pressing `Enter` or `Space` while the button\nhas focus.\n\n## Modifiers\n\n### Buttons with icons\n\nIcons can be placed next to labels to both clarify an action and call attention\nto a button. There are certain instances where an icon will suffice in place of\na text label, but use icon buttons cautiously.\n\n- Use glyphs (16px) within buttons\n- Glyphs are distinguished by their solid shape and knocked-out details\n- Glyphs should always appear to the right of the text\n- Glyphs used in buttons must be directly related to the action that the user is\n  taking\n- Glyphs must be the same color value as the text within a button\n\n<DoDontRow>\n  <DoDont caption=\"Do place the icon on the right side of the button after the text.\">\n\n![Do place the icon on the right side of the button after the text](images/button_usage_28.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not place the icon on the left side of the button before the text.\">\n\n![Do not place the icon on the left side of the button before the text](images/button_usage_29.png)\n\n  </DoDont>\n</DoDontRow>\n\n### Icon-only buttons\n\nIcon buttons allow users to take actions, and make choices, with a single tap.\nIcon buttons can take the form of any of the five types above but most commonly\nwill be styled as primary or ghost buttons.\n\n<Row>\n<Column colLg={8}>\n\n![Example of an icon-only ghost button in a data table](images/button_usage_30.png)\n\n<Caption>Example of an icon-only ghost button in a data table</Caption>\n\n</Column>\n</Row>\n\n## Related\n\n- [Link component](/components/link/usage)\n- [Modal component](/components/modal/usage)\n- [Form pattern](/patterns/forms-pattern)\n\n## References\n\n- Mehmet Goktürk,\n  [_The Glossary of Human Computer Interaction, Chapter 37_](https://www.interaction-design.org/literature/book/the-glossary-of-human-computer-interaction/fitts-s-law)\n  (The Interaction Design Foundation)\n- Jakob Nielsen,\n  [_OK-Cancel or Cancel-OK? The Trouble With Buttons_](https://www.nngroup.com/articles/ok-cancel-or-cancel-ok/)\n  (Nielsen Norman Group, 2008)\n- Artem Syzonenko\n  [_Buttons on the web: placement and order_](https://uxdesign.cc/buttons-placement-and-order-bb1c4abadfcb)\n  (UX Collective, 2019)\n\n## Feedback\n\nHelp us improve this component by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","fileAbsolutePath":"/Users/jvernon/Documents/Design System/carbon/carbon-website/src/pages/components/button/usage.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}
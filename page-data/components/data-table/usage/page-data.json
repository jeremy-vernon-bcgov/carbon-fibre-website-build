{"componentChunkName":"component---src-pages-components-data-table-usage-mdx","path":"/components/data-table/usage/","result":{"pageContext":{"frontmatter":{"title":"Data table","description":"The data table component allows for the flexible display and sorting of information.","tabs":["Usage","Style","Code","Accessibility"]},"relativePagePath":"/components/data-table/usage.mdx","titleType":"prepend","MdxNode":{"id":"b715368b-3385-54ea-a614-cd7a134b8d40","children":[],"parent":"bed44eed-668d-54f3-8dc8-55206d6a9d95","internal":{"content":"---\ntitle: Data table\ndescription:\n  The data table component allows for the flexible display and sorting of\n  information.\ntabs: ['Usage', 'Style', 'Code', 'Accessibility']\n---\n\n<PageDescription>\n\nData tables are used to organize and display data efficiently. The data table\ncomponent allows for customization with additional functionality, as needed by\nyour product's users.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Live demo</AnchorLink>\n<AnchorLink>Formatting</AnchorLink>\n<AnchorLink>Content</AnchorLink>\n<AnchorLink>Behaviors</AnchorLink>\n<AnchorLink>Modifiers</AnchorLink>\n<AnchorLink>Related</AnchorLink>\n<AnchorLink>Feedback</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nThe data table's features are ideal for organizing and displaying data in a UI.\nThe column headers can sort data in ascending or descending order, rows can be\nexpanded to progressively disclose information, and single or batch actions can\nbe taken on rows.\n\nThe data table toolbar gives a location for primary buttons, search, filtering,\ntable display settings, and other utilities.\n\n### When to use\n\n- To organize and display data.\n- If your user must navigate to a specific piece of data to complete a task.\n- Displaying all of a user's resources.\n\n### When not to use\n\n- When a more complex display of the data or interactions are required.\n- As a replacement for a spreadsheet application.\n\n### Types\n\n| Type             | Purpose                                                                                                                                                                                                                             |\n| ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| _Default_        | The default data table comes with a base style with only the title, header, and table elements. rows.                                                                                                                               |\n| _With selection_ | Batch actions are functions that may be performed on multiple items within a table. This type of table enables the user to select individual rows and apply an action. A batch action toolbar appears when table rows are selected. |\n| _With expansion_ | The expandable data table is useful for presenting large amounts of data in a small space. Rows are collapsed and can be expanded to reveal extra information.                                                                      |\n\n## Live demo\n\nimport { rowData, headerData } from '../../../data/components/data-table.js';\nimport {\n  Delete16 as Delete,\n  Save16 as Save,\n  Download16 as Download,\n} from '@carbon/icons-react';\n\n<ComponentDemo\n  components={[\n    {\n      id: 'default-table',\n      label: 'Default',\n    },\n    {\n      id: 'with-selection',\n      label: 'With selection',\n    },\n    {\n      id: 'with-expansion',\n      label: 'With expansion',\n    },\n    {\n      id: 'with-batch-actions',\n      label: 'With batch actions',\n    },\n  ]}\n  scope={{ rowData, headerData, React, Delete, Save, Download }}>\n  <ComponentVariant\n    id=\"default-table\"\n    knobs={{ DataTable: ['isSortable'], Table: ['size', 'useZebraStyles'] }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/datatable--default',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-table--basic',\n      Vue:\n        'http://vue.carbondesignsystem.com/?path=/story/components-cvdatatable--minimal',\n      Vanilla: 'https://the-carbon-components.netlify.com/?nav=data-table',\n    }}>\n    {`<DataTable\n    rows={rowData}\n    headers={headerData}\n    render={({ rows, headers, getHeaderProps, getTableProps }) => (\n    <TableContainer title=\"DataTable\">\n      <Table {...getTableProps()}>\n        <TableHead>\n          <TableRow>\n            {headers.map(header => (\n              <TableHeader {...getHeaderProps({ header })}>\n                {header.header}\n              </TableHeader>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map(row => (\n            <TableRow key={row.id}>\n              {row.cells.map(cell => (\n                <TableCell key={cell.id}>{cell.value}</TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>)}\n    />`}\n  </ComponentVariant>\n  <ComponentVariant\n    id=\"with-selection\"\n    knobs={{ DataTable: ['isSortable'], Table: ['size', 'useZebraStyles'] }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/datatable--with-selection',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-table--basic',\n      Vue:\n        'http://vue.carbondesignsystem.com/?path=/story/components-cvdatatable--default',\n      Vanilla: 'https://the-carbon-components.netlify.com/?nav=data-table',\n    }}>\n    {`<DataTable\n  rows={rowData}\n  headers={headerData}\n  render={({\n    rows,\n    headers,\n    getHeaderProps,\n    getSelectionProps,\n    getRowProps,\n    getTableProps\n  }) => (\n  <TableContainer title=\"DataTable with selection\">\n    <Table {...getTableProps()}>\n      <TableHead>\n        <TableRow>\n          <TableSelectAll {...getSelectionProps()} />\n          {headers.map(header => (\n            <TableHeader {...getHeaderProps({ header })}>\n              {header.header}\n            </TableHeader>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {rows.map(row => (\n          <TableRow {...getRowProps({ row })}>\n            <TableSelectRow {...getSelectionProps({ row })} />\n            {row.cells.map(cell => (\n              <TableCell key={cell.id}>{cell.value}</TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </TableContainer>)}\n/>`}\n  </ComponentVariant>\n  <ComponentVariant\n    id=\"with-expansion\"\n    knobs={{ DataTable: ['isSortable'] }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/datatable--with-expansion',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-table--with-expansion',\n      Vue:\n        'http://vue.carbondesignsystem.com/?path=/story/components-cvdatatable--slotted-expanding-data',\n      Vanilla: 'https://the-carbon-components.netlify.com/?nav=data-table',\n    }}>\n    {`<DataTable\n  rows={rowData}\n  headers={headerData}\n  render={({ rows, headers, getHeaderProps, getRowProps, getTableProps }) => (\n  <TableContainer title=\"DataTable with expansion\">\n    <Table {...getTableProps()}>\n      <TableHead>\n        <TableRow>\n          <TableExpandHeader />\n          {headers.map(header => (\n            <TableHeader {...getHeaderProps({ header })}>\n              {header.header}\n            </TableHeader>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {rows.map(row => (\n          <React.Fragment key={row.id}>\n            <TableExpandRow {...getRowProps({ row })}>\n              {row.cells.map(cell => (\n                <TableCell key={cell.id}>{cell.value}</TableCell>\n              ))}\n            </TableExpandRow>\n            {row.isExpanded && (\n              <TableExpandedRow colSpan={headers.length + 1}>\n                <p>Aux squad rules</p>\n              </TableExpandedRow>\n            )}\n          </React.Fragment>\n        ))}\n      </TableBody>\n    </Table>\n  </TableContainer>\n)}/>`}\n  </ComponentVariant>\n  <ComponentVariant\n    id=\"with-batch-actions\"\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/datatable--with-batch-actions',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-table--with-toolbar',\n      Vue:\n        'http://vue.carbondesignsystem.com/?path=/story/components-cvdatatable--default',\n      Vanilla: 'https://the-carbon-components.netlify.com/?nav=data-table',\n    }}>\n    {`<DataTable\n  rows={rowData}\n  headers={headerData}\n  render={({ rows,\n      headers,\n      getHeaderProps,\n      getRowProps,\n      getSelectionProps,\n      getBatchActionProps,\n      onInputChange,\n      selectedRows,}) => (\n  <TableContainer title=\"DataTable with batch actions\">\n    <TableToolbar>\n          <TableBatchActions {...getBatchActionProps()}>\n            <TableBatchAction\n              tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n              renderIcon={Delete}\n              onClick={()=>console.log('clicked')}>\n              Delete\n            </TableBatchAction>\n            <TableBatchAction\n              tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n              renderIcon={Save}\n              onClick={()=>console.log('clicked')}>\n              Save\n            </TableBatchAction>\n            <TableBatchAction\n              tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n              renderIcon={Download}\n              onClick={()=>console.log('clicked')}>\n              Download\n            </TableBatchAction>\n          </TableBatchActions>\n          <TableToolbarContent>\n            <TableToolbarSearch\n              tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n              onChange={onInputChange}\n            />\n            <TableToolbarMenu\n              tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}>\n              <TableToolbarAction primaryFocus onClick={() => alert('Alert 1')}>\n                Action 1\n              </TableToolbarAction>\n              <TableToolbarAction onClick={() => alert('Alert 2')}>\n                Action 2\n              </TableToolbarAction>\n              <TableToolbarAction onClick={() => alert('Alert 3')}>\n                Action 3\n              </TableToolbarAction>\n            </TableToolbarMenu>\n            <Button\n              tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n              onClick={()=> console.log('clicked')}\n              size=\"small\"\n              kind=\"primary\">\n              Add new\n            </Button>\n          </TableToolbarContent>\n        </TableToolbar>\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableSelectAll {...getSelectionProps()} />\n          {headers.map(header => (\n            <TableHeader {...getHeaderProps({ header })}>\n              {header.header}\n            </TableHeader>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {rows.map(row => (\n          <TableRow {...getRowProps({ row })}>\n            <TableSelectRow {...getSelectionProps({ row })} />\n            {row.cells.map(cell => (\n              <TableCell key={cell.id}>{cell.value}</TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </TableContainer>)}\n/>`}\n  </ComponentVariant>\n</ComponentDemo>\n\n## Formatting\n\n### Anatomy\n\n<Row>\n<Column colLg={12}>\n\n![data table anatomy](images/datatable-anatomy.png)\n\n</Column>\n</Row>\n\n1. **Title and description**: contains the data table title and an optional\n   description.\n2. **Toolbar**: global data table controls including search and table settings.\n3. **Column header**: title for the row header with the optional sorting\n   behavior.\n4. **Table row**: can be configured to show different types of data. Rows can be\n   selectable, expandable, and modified to show alternating zebra stripe\n   background colors.\n5. **Pagination table bar**: an optional component that lets a user navigate\n   data as pages when the amount of data it too large to be shown at once.\n\n### Sizing\n\nThe data table is available in four different\n[row sizes](/data-table/style#row-sizes): tall, normal, short, compact.\n\n<Row>\n<Column colLg={8}>\n\n![data table size](images/datatable-sizes.png)\n\n</Column>\n</Row>\n\nThe column header row `.bx--data-table thead` should always match the row size\nof the table. Tall row heights are only recommended if your data is expected to\nhave 2 lines of content in a single row.\n\n<DoDontRow>\n<DoDont\ncolMd={4} colLg={4}\ncaption=\"Do use the same row height for the table and header rows.\">\n\n![Do: Do use the same row height for the table and header rows.](./images/datatable-header-size-do.png)\n\n</DoDont>\n<DoDont\ncolMd={4} colLg={4}\ntype=\"dont\"\ncaption=\"Don’t mix row heights for the table and header rows.\">\n\n![Don’t: mix row heights for the table and header rows.](./images/datatable-header-size-dont.png)\n\n</DoDont>\n</DoDontRow>\n\nTwo heights are available to be paired with the row heights of the data table.\nThe tall toolbar should only be paired with the normal and tall row heights and\nthe small toolbar should only be used with the small and compact row heights.\n\n<Row>\n<Column colLg={12}>\n\n![data table toolbar size](images/datatable-toolbar-sizes.png)\n\n<Caption>\n  A small toolbar on a short data table and a tall toolbar on a normal data\n  table{' '}\n</Caption>\n\n</Column>\n</Row>\n\n### Placement\n\nData tables should be placed in a page's main content area and given plenty of\nspace to display data without truncation. Avoid placing data tables inside\nmodals or smaller containers where the information can feel cramped or needs\ntruncation.\n\nThe data table can be placed on the grid following the three different\n[grid modes](/guidelines/2x-grid/implementation#grid-modes) outlined in the 2x\ngrid guidelines. Although, the data table can share horizontal space with other\ncomponents and content, consider giving your data table the most width on the\npage to help your user view dense data.\n\nThese three examples show the data table on the wide (default), narrow, and\ncondensed grid modes. Note the different type alignments and gutter sizes.\n\n#### Wide grid mode\n\nThe wide grid mode is the default and gives the most breathing room between the\ndata table and the other components or content.\n\n<Row>\n<Column colLg={12}>\n\n![data table wide ](images/datatable-alignment-wide.png)\n\n<Caption>Data table on a wide (default) grid</Caption>\n\n</Column>\n</Row>\n\n#### Narrow grid mode\n\nUsing the data table on a narrow grid will hang the component into the gutter\nand create a desirable type alignment between the the data table's title and\nother type on the page.\n\n<Row>\n<Column colLg={12}>\n\n![data table narrow ](images/datatable-alignment-narrow.png)\n\n<Caption>Data table on a narrow grid</Caption>\n\n</Column>\n</Row>\n\n#### Condensed grid mode\n\nThe data table can be used on a condensed grid, but care should be taken to\navoid any unintentional relationships with other UI elements. Use a hybrid grid\nor a dissimilar background color to avoid the components blending in to each\nother.\n\n<Row>\n<Column colLg={12}>\n\n![data table condensed ](images/datatable-alignment-condensed.png)\n\n<Caption>Data table on a condensed grid</Caption>\n\n</Column>\n</Row>\n\n## Content\n\n### Main elements\n\n#### Data table title and description\n\n- The table title should make it clear to the user what this the data has in\n  common and what purpose it serves in the UI.\n- A description can be added under the title to provide more information about\n  the data or its source.\n- A data table's title and description should use\n  [sentence-case capitalization.](/guidelines/content/guidance#use-sentence-case-capitalization)\n\n#### Column titles\n\n- Column titles should stick to one or two words that describe the data in that\n  column.\n- In cases where a column title is too long, wrap the text to two lines and then\n  truncate the rest of the text. The full text should be shown in a tooltip on\n  hover.\n- Column titles should use\n  [sentence-case capitalization.](/guidelines/content/guidance#use-sentence-case-capitalization)\n\n#### Primary button\n\n- A data table using a primary action should follow the guidance for\n  [primary button](/components/button/usage#labels) usage and\n  [action labels.](/guidelines/content/action-labels)\n\nFor further content guidance, see Carbon's\n[content guidelines](/guidelines/content/overview).\n\n## Behaviors\n\n### Interactions\n\n#### Mouse\n\nThe data table's toolbar and rows follow interaction conventions found in other\nCarbon components. Buttons, checkboxes, radio buttons, overflow menus, search,\nand expanding elements can be found in the data table and all behave the same\nway across Carbon components. See the style tab for detailed visual information\nabout the various states.\n\n<Row>\n<Column colLg={12}>\n\n![data table target areas](images/datatable-target.png)\n\n<Caption>Highlighted target areas for data table mouse interactions</Caption>\n\n</Column>\n</Row>\n\n### Hover\n\nThe data table's row hover state can help your user visually scan the columns of\ndata in a row even if the row is not interactive.\n\n<Row>\n<Column colLg={8}>\n\n![data table row hover](images/datatable-hover.png)\n\n</Column>\n</Row>\n\n### Pagination\n\nPagination divides table data into separate pages. Simple pagination indicates\nthe current page in view and offers controls to incrementally navigate to the\nprevious or next page. Advanced pagination is accompanied by an option that\nenables the user to change the number of items per page and to jump to a\nspecific page number. The pagination component is always placed at the bottom of\nthe data table. See the [pagination](/components/pagination/code) component for\nfurther guidelines and configurations.\n\n<Row>\n<Column colLg={12}>\n\n![data table target areas](images/datatable-pagination.png)\n\n<Caption>Simple (top) and advanced (bottom) pagination configurations</Caption>\n\n</Column>\n</Row>\n\n### Search\n\nA search field can be triggered through an icon button in the data table\ntoolbar. By default the search functionality follows the\n[active search](/patterns/search-pattern/#active-search) pattern. The search\nshould be closed by default, and placed below the table title.\n\n<Row>\n<Column colLg={12}>\n\n![data table search](images/datatable_search.gif)\n\n</Column>\n</Row>\n\n### Sorting\n\nColumns can be sorted in ascending or descending order. Sorting controls are\nlocated in the column headers and indicated with an arrow icon on hover and when\na column has been sorted.\n\nA sorted data table has three states: unsorted (`arrows`), sorted-up\n(`arrow--up`) or sorted-down (`arrow--down`). The icon indicates the current\nsorted state and is only shown if sorting is activated. Only the column being\nsorted should display an icon, and unsorted icons are only visible on hover. You\ncan see a demo of table sorting in\nCarbon’s [React Storybook](http://react.carbondesignsystem.com/?path=/story/datatable--with-sorting).\n\n<Row>\n<Column colLg={12}>\n\n![data table unsorted](images/datatable-sorting.png)\n\n</Column>\n</Row>\n\n### Table toolbar\n\nThe table toolbar is reserved for global table actions such as table settings,\ncomplex filters, exporting, or editing table data. Additional options can be\nadded if you have an icon to support that function. Icons should be 16x16 px\n(glyphs). We recommend using no more than 5 icons within the table toolbar.\n\n<Row>\n<Column colLg={8}>\n\n![data table sorting in descending order](images/datatable-toolbar.png)\n\n</Column>\n</Row>\n\n### Multi-select / batch action\n\nBatch actions are functions that may be performed on multiple items within a\ntable. Once the user selects at least one row from the table, the batch action\nbar appears at the top of the table, presenting the user with actions they can\ntake. To exit or escape “batch action mode”, the user can cancel out or deselect\nthe items.\n\n<Row>\n<Column colLg={12}>\n\n![data table multi select](images/datatable-multi-select.png)\n\n</Column>\n</Row>\n\n### Inline actions\n\nInline actions are functions that may be performed on a specific table row. Each\nrow is accompanied by\nan [overflow menu](https://www.carbondesignsystem.com/components/overflow-menu/code) that\ncontains actions related specifically to that row.\n\n<Row>\n<Column colLg={8}>\n\n![data table inline actions](images/datatable-inline-actions.png)\n\n</Column>\n</Row>\n\nWhen the overflow menu contains less than three options, keep the actions inline\nas icon buttons instead. This reduces a click and makes available actions\nvisible at a glance.\n\n### Overflow menu\n\nBy default, the overflow menu icons are persistent on each row. Having the\noverflow menus always visible signals to the user actions can be taken on the\ntable rows. Alternatively, a product team may use the `overflowMenuOnHover` prop\nto only show the overflow menu on hover and focus to reduce the visual clutter\nof an overflow menu on every row.\n\nFor mobile and touch devices the data table will detect if the user agent\nsupports hover-over and persist the overflow menus even if the\n`overflowMenuOnHover` prop is enabled.\n\n<Row>\n<Column colLg={8}>\n\n![data table inline actions](images/datatable-persistent-hover.png)\n\n</Column>\n</Row>\n\n### Expandable\n\nThe expandable data table is useful for presenting large amounts of data in a\nsmall space. Use the expanded section for supplementary information or data that\nneeds additional query time. When the content in the expanded area begins to\nfeel cramped, consider taking the user to a dedicated page or opening a modal to\nview the information and complete tasks.\n\n<Row>\n<Column colLg={12}>\n\n![data table in expanded and collapsed state](images/datatable-expand.png)\n\n<Caption>Expandable data table with one row expanded</Caption>\n\n</Column>\n</Row>\n\nBy default, the expand-all chevron is not shown. Keeping detailed information in\nexpanded section saves user loading time by postponing some data queries until\nneeded. Expanding all rows at once will typically negate this advantages of the\nexpandable table. If additional load time is expected to display expanded\ninformation, use skeleton states instead of spinners.\n\n<Row>\n<Column colLg={12}>\n\n![data table in expanded and collapsed state](images/datatable-skeleton.png)\n\n<Caption>Expanding all rows with skeleton states</Caption>\n\n</Column>\n</Row>\n\n## Modifiers\n\nThe data table features a zebra stripes modifier that styles the table rows with\nalternating colors to make scanning horizontal information easier for the user.\n\n<Row>\n<Column colLg={8}>\n\n![data table with zebra stripes](images/datatable-zebra.png)\n\n</Column>\n</Row>\n\n### Related\n\nThe following components are additional ways to organize and navigate data.\n\n- [Accordion](/components/accordion/code/)\n\n- [List](/components/list/code/)\n\n- [Pagination](/components/pagination/code/)\n\n- [Structured list](/components/structured-list/code/)\n\n### Feedback\n\nHelp us improve this pattern by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","type":"Mdx","contentDigest":"9bbb0848946c49af89af74beb8217c1a","counter":3183,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Data table","description":"The data table component allows for the flexible display and sorting of information.","tabs":["Usage","Style","Code","Accessibility"]},"exports":{},"rawBody":"---\ntitle: Data table\ndescription:\n  The data table component allows for the flexible display and sorting of\n  information.\ntabs: ['Usage', 'Style', 'Code', 'Accessibility']\n---\n\n<PageDescription>\n\nData tables are used to organize and display data efficiently. The data table\ncomponent allows for customization with additional functionality, as needed by\nyour product's users.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Live demo</AnchorLink>\n<AnchorLink>Formatting</AnchorLink>\n<AnchorLink>Content</AnchorLink>\n<AnchorLink>Behaviors</AnchorLink>\n<AnchorLink>Modifiers</AnchorLink>\n<AnchorLink>Related</AnchorLink>\n<AnchorLink>Feedback</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nThe data table's features are ideal for organizing and displaying data in a UI.\nThe column headers can sort data in ascending or descending order, rows can be\nexpanded to progressively disclose information, and single or batch actions can\nbe taken on rows.\n\nThe data table toolbar gives a location for primary buttons, search, filtering,\ntable display settings, and other utilities.\n\n### When to use\n\n- To organize and display data.\n- If your user must navigate to a specific piece of data to complete a task.\n- Displaying all of a user's resources.\n\n### When not to use\n\n- When a more complex display of the data or interactions are required.\n- As a replacement for a spreadsheet application.\n\n### Types\n\n| Type             | Purpose                                                                                                                                                                                                                             |\n| ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| _Default_        | The default data table comes with a base style with only the title, header, and table elements. rows.                                                                                                                               |\n| _With selection_ | Batch actions are functions that may be performed on multiple items within a table. This type of table enables the user to select individual rows and apply an action. A batch action toolbar appears when table rows are selected. |\n| _With expansion_ | The expandable data table is useful for presenting large amounts of data in a small space. Rows are collapsed and can be expanded to reveal extra information.                                                                      |\n\n## Live demo\n\nimport { rowData, headerData } from '../../../data/components/data-table.js';\nimport {\n  Delete16 as Delete,\n  Save16 as Save,\n  Download16 as Download,\n} from '@carbon/icons-react';\n\n<ComponentDemo\n  components={[\n    {\n      id: 'default-table',\n      label: 'Default',\n    },\n    {\n      id: 'with-selection',\n      label: 'With selection',\n    },\n    {\n      id: 'with-expansion',\n      label: 'With expansion',\n    },\n    {\n      id: 'with-batch-actions',\n      label: 'With batch actions',\n    },\n  ]}\n  scope={{ rowData, headerData, React, Delete, Save, Download }}>\n  <ComponentVariant\n    id=\"default-table\"\n    knobs={{ DataTable: ['isSortable'], Table: ['size', 'useZebraStyles'] }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/datatable--default',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-table--basic',\n      Vue:\n        'http://vue.carbondesignsystem.com/?path=/story/components-cvdatatable--minimal',\n      Vanilla: 'https://the-carbon-components.netlify.com/?nav=data-table',\n    }}>\n    {`<DataTable\n    rows={rowData}\n    headers={headerData}\n    render={({ rows, headers, getHeaderProps, getTableProps }) => (\n    <TableContainer title=\"DataTable\">\n      <Table {...getTableProps()}>\n        <TableHead>\n          <TableRow>\n            {headers.map(header => (\n              <TableHeader {...getHeaderProps({ header })}>\n                {header.header}\n              </TableHeader>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map(row => (\n            <TableRow key={row.id}>\n              {row.cells.map(cell => (\n                <TableCell key={cell.id}>{cell.value}</TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>)}\n    />`}\n  </ComponentVariant>\n  <ComponentVariant\n    id=\"with-selection\"\n    knobs={{ DataTable: ['isSortable'], Table: ['size', 'useZebraStyles'] }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/datatable--with-selection',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-table--basic',\n      Vue:\n        'http://vue.carbondesignsystem.com/?path=/story/components-cvdatatable--default',\n      Vanilla: 'https://the-carbon-components.netlify.com/?nav=data-table',\n    }}>\n    {`<DataTable\n  rows={rowData}\n  headers={headerData}\n  render={({\n    rows,\n    headers,\n    getHeaderProps,\n    getSelectionProps,\n    getRowProps,\n    getTableProps\n  }) => (\n  <TableContainer title=\"DataTable with selection\">\n    <Table {...getTableProps()}>\n      <TableHead>\n        <TableRow>\n          <TableSelectAll {...getSelectionProps()} />\n          {headers.map(header => (\n            <TableHeader {...getHeaderProps({ header })}>\n              {header.header}\n            </TableHeader>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {rows.map(row => (\n          <TableRow {...getRowProps({ row })}>\n            <TableSelectRow {...getSelectionProps({ row })} />\n            {row.cells.map(cell => (\n              <TableCell key={cell.id}>{cell.value}</TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </TableContainer>)}\n/>`}\n  </ComponentVariant>\n  <ComponentVariant\n    id=\"with-expansion\"\n    knobs={{ DataTable: ['isSortable'] }}\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/datatable--with-expansion',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-table--with-expansion',\n      Vue:\n        'http://vue.carbondesignsystem.com/?path=/story/components-cvdatatable--slotted-expanding-data',\n      Vanilla: 'https://the-carbon-components.netlify.com/?nav=data-table',\n    }}>\n    {`<DataTable\n  rows={rowData}\n  headers={headerData}\n  render={({ rows, headers, getHeaderProps, getRowProps, getTableProps }) => (\n  <TableContainer title=\"DataTable with expansion\">\n    <Table {...getTableProps()}>\n      <TableHead>\n        <TableRow>\n          <TableExpandHeader />\n          {headers.map(header => (\n            <TableHeader {...getHeaderProps({ header })}>\n              {header.header}\n            </TableHeader>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {rows.map(row => (\n          <React.Fragment key={row.id}>\n            <TableExpandRow {...getRowProps({ row })}>\n              {row.cells.map(cell => (\n                <TableCell key={cell.id}>{cell.value}</TableCell>\n              ))}\n            </TableExpandRow>\n            {row.isExpanded && (\n              <TableExpandedRow colSpan={headers.length + 1}>\n                <p>Aux squad rules</p>\n              </TableExpandedRow>\n            )}\n          </React.Fragment>\n        ))}\n      </TableBody>\n    </Table>\n  </TableContainer>\n)}/>`}\n  </ComponentVariant>\n  <ComponentVariant\n    id=\"with-batch-actions\"\n    links={{\n      React:\n        'https://react.carbondesignsystem.com/?path=/story/datatable--with-batch-actions',\n      Angular:\n        'https://angular.carbondesignsystem.com/?path=/story/components-table--with-toolbar',\n      Vue:\n        'http://vue.carbondesignsystem.com/?path=/story/components-cvdatatable--default',\n      Vanilla: 'https://the-carbon-components.netlify.com/?nav=data-table',\n    }}>\n    {`<DataTable\n  rows={rowData}\n  headers={headerData}\n  render={({ rows,\n      headers,\n      getHeaderProps,\n      getRowProps,\n      getSelectionProps,\n      getBatchActionProps,\n      onInputChange,\n      selectedRows,}) => (\n  <TableContainer title=\"DataTable with batch actions\">\n    <TableToolbar>\n          <TableBatchActions {...getBatchActionProps()}>\n            <TableBatchAction\n              tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n              renderIcon={Delete}\n              onClick={()=>console.log('clicked')}>\n              Delete\n            </TableBatchAction>\n            <TableBatchAction\n              tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n              renderIcon={Save}\n              onClick={()=>console.log('clicked')}>\n              Save\n            </TableBatchAction>\n            <TableBatchAction\n              tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n              renderIcon={Download}\n              onClick={()=>console.log('clicked')}>\n              Download\n            </TableBatchAction>\n          </TableBatchActions>\n          <TableToolbarContent>\n            <TableToolbarSearch\n              tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n              onChange={onInputChange}\n            />\n            <TableToolbarMenu\n              tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}>\n              <TableToolbarAction primaryFocus onClick={() => alert('Alert 1')}>\n                Action 1\n              </TableToolbarAction>\n              <TableToolbarAction onClick={() => alert('Alert 2')}>\n                Action 2\n              </TableToolbarAction>\n              <TableToolbarAction onClick={() => alert('Alert 3')}>\n                Action 3\n              </TableToolbarAction>\n            </TableToolbarMenu>\n            <Button\n              tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n              onClick={()=> console.log('clicked')}\n              size=\"small\"\n              kind=\"primary\">\n              Add new\n            </Button>\n          </TableToolbarContent>\n        </TableToolbar>\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableSelectAll {...getSelectionProps()} />\n          {headers.map(header => (\n            <TableHeader {...getHeaderProps({ header })}>\n              {header.header}\n            </TableHeader>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {rows.map(row => (\n          <TableRow {...getRowProps({ row })}>\n            <TableSelectRow {...getSelectionProps({ row })} />\n            {row.cells.map(cell => (\n              <TableCell key={cell.id}>{cell.value}</TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </TableContainer>)}\n/>`}\n  </ComponentVariant>\n</ComponentDemo>\n\n## Formatting\n\n### Anatomy\n\n<Row>\n<Column colLg={12}>\n\n![data table anatomy](images/datatable-anatomy.png)\n\n</Column>\n</Row>\n\n1. **Title and description**: contains the data table title and an optional\n   description.\n2. **Toolbar**: global data table controls including search and table settings.\n3. **Column header**: title for the row header with the optional sorting\n   behavior.\n4. **Table row**: can be configured to show different types of data. Rows can be\n   selectable, expandable, and modified to show alternating zebra stripe\n   background colors.\n5. **Pagination table bar**: an optional component that lets a user navigate\n   data as pages when the amount of data it too large to be shown at once.\n\n### Sizing\n\nThe data table is available in four different\n[row sizes](/data-table/style#row-sizes): tall, normal, short, compact.\n\n<Row>\n<Column colLg={8}>\n\n![data table size](images/datatable-sizes.png)\n\n</Column>\n</Row>\n\nThe column header row `.bx--data-table thead` should always match the row size\nof the table. Tall row heights are only recommended if your data is expected to\nhave 2 lines of content in a single row.\n\n<DoDontRow>\n<DoDont\ncolMd={4} colLg={4}\ncaption=\"Do use the same row height for the table and header rows.\">\n\n![Do: Do use the same row height for the table and header rows.](./images/datatable-header-size-do.png)\n\n</DoDont>\n<DoDont\ncolMd={4} colLg={4}\ntype=\"dont\"\ncaption=\"Don’t mix row heights for the table and header rows.\">\n\n![Don’t: mix row heights for the table and header rows.](./images/datatable-header-size-dont.png)\n\n</DoDont>\n</DoDontRow>\n\nTwo heights are available to be paired with the row heights of the data table.\nThe tall toolbar should only be paired with the normal and tall row heights and\nthe small toolbar should only be used with the small and compact row heights.\n\n<Row>\n<Column colLg={12}>\n\n![data table toolbar size](images/datatable-toolbar-sizes.png)\n\n<Caption>\n  A small toolbar on a short data table and a tall toolbar on a normal data\n  table{' '}\n</Caption>\n\n</Column>\n</Row>\n\n### Placement\n\nData tables should be placed in a page's main content area and given plenty of\nspace to display data without truncation. Avoid placing data tables inside\nmodals or smaller containers where the information can feel cramped or needs\ntruncation.\n\nThe data table can be placed on the grid following the three different\n[grid modes](/guidelines/2x-grid/implementation#grid-modes) outlined in the 2x\ngrid guidelines. Although, the data table can share horizontal space with other\ncomponents and content, consider giving your data table the most width on the\npage to help your user view dense data.\n\nThese three examples show the data table on the wide (default), narrow, and\ncondensed grid modes. Note the different type alignments and gutter sizes.\n\n#### Wide grid mode\n\nThe wide grid mode is the default and gives the most breathing room between the\ndata table and the other components or content.\n\n<Row>\n<Column colLg={12}>\n\n![data table wide ](images/datatable-alignment-wide.png)\n\n<Caption>Data table on a wide (default) grid</Caption>\n\n</Column>\n</Row>\n\n#### Narrow grid mode\n\nUsing the data table on a narrow grid will hang the component into the gutter\nand create a desirable type alignment between the the data table's title and\nother type on the page.\n\n<Row>\n<Column colLg={12}>\n\n![data table narrow ](images/datatable-alignment-narrow.png)\n\n<Caption>Data table on a narrow grid</Caption>\n\n</Column>\n</Row>\n\n#### Condensed grid mode\n\nThe data table can be used on a condensed grid, but care should be taken to\navoid any unintentional relationships with other UI elements. Use a hybrid grid\nor a dissimilar background color to avoid the components blending in to each\nother.\n\n<Row>\n<Column colLg={12}>\n\n![data table condensed ](images/datatable-alignment-condensed.png)\n\n<Caption>Data table on a condensed grid</Caption>\n\n</Column>\n</Row>\n\n## Content\n\n### Main elements\n\n#### Data table title and description\n\n- The table title should make it clear to the user what this the data has in\n  common and what purpose it serves in the UI.\n- A description can be added under the title to provide more information about\n  the data or its source.\n- A data table's title and description should use\n  [sentence-case capitalization.](/guidelines/content/guidance#use-sentence-case-capitalization)\n\n#### Column titles\n\n- Column titles should stick to one or two words that describe the data in that\n  column.\n- In cases where a column title is too long, wrap the text to two lines and then\n  truncate the rest of the text. The full text should be shown in a tooltip on\n  hover.\n- Column titles should use\n  [sentence-case capitalization.](/guidelines/content/guidance#use-sentence-case-capitalization)\n\n#### Primary button\n\n- A data table using a primary action should follow the guidance for\n  [primary button](/components/button/usage#labels) usage and\n  [action labels.](/guidelines/content/action-labels)\n\nFor further content guidance, see Carbon's\n[content guidelines](/guidelines/content/overview).\n\n## Behaviors\n\n### Interactions\n\n#### Mouse\n\nThe data table's toolbar and rows follow interaction conventions found in other\nCarbon components. Buttons, checkboxes, radio buttons, overflow menus, search,\nand expanding elements can be found in the data table and all behave the same\nway across Carbon components. See the style tab for detailed visual information\nabout the various states.\n\n<Row>\n<Column colLg={12}>\n\n![data table target areas](images/datatable-target.png)\n\n<Caption>Highlighted target areas for data table mouse interactions</Caption>\n\n</Column>\n</Row>\n\n### Hover\n\nThe data table's row hover state can help your user visually scan the columns of\ndata in a row even if the row is not interactive.\n\n<Row>\n<Column colLg={8}>\n\n![data table row hover](images/datatable-hover.png)\n\n</Column>\n</Row>\n\n### Pagination\n\nPagination divides table data into separate pages. Simple pagination indicates\nthe current page in view and offers controls to incrementally navigate to the\nprevious or next page. Advanced pagination is accompanied by an option that\nenables the user to change the number of items per page and to jump to a\nspecific page number. The pagination component is always placed at the bottom of\nthe data table. See the [pagination](/components/pagination/code) component for\nfurther guidelines and configurations.\n\n<Row>\n<Column colLg={12}>\n\n![data table target areas](images/datatable-pagination.png)\n\n<Caption>Simple (top) and advanced (bottom) pagination configurations</Caption>\n\n</Column>\n</Row>\n\n### Search\n\nA search field can be triggered through an icon button in the data table\ntoolbar. By default the search functionality follows the\n[active search](/patterns/search-pattern/#active-search) pattern. The search\nshould be closed by default, and placed below the table title.\n\n<Row>\n<Column colLg={12}>\n\n![data table search](images/datatable_search.gif)\n\n</Column>\n</Row>\n\n### Sorting\n\nColumns can be sorted in ascending or descending order. Sorting controls are\nlocated in the column headers and indicated with an arrow icon on hover and when\na column has been sorted.\n\nA sorted data table has three states: unsorted (`arrows`), sorted-up\n(`arrow--up`) or sorted-down (`arrow--down`). The icon indicates the current\nsorted state and is only shown if sorting is activated. Only the column being\nsorted should display an icon, and unsorted icons are only visible on hover. You\ncan see a demo of table sorting in\nCarbon’s [React Storybook](http://react.carbondesignsystem.com/?path=/story/datatable--with-sorting).\n\n<Row>\n<Column colLg={12}>\n\n![data table unsorted](images/datatable-sorting.png)\n\n</Column>\n</Row>\n\n### Table toolbar\n\nThe table toolbar is reserved for global table actions such as table settings,\ncomplex filters, exporting, or editing table data. Additional options can be\nadded if you have an icon to support that function. Icons should be 16x16 px\n(glyphs). We recommend using no more than 5 icons within the table toolbar.\n\n<Row>\n<Column colLg={8}>\n\n![data table sorting in descending order](images/datatable-toolbar.png)\n\n</Column>\n</Row>\n\n### Multi-select / batch action\n\nBatch actions are functions that may be performed on multiple items within a\ntable. Once the user selects at least one row from the table, the batch action\nbar appears at the top of the table, presenting the user with actions they can\ntake. To exit or escape “batch action mode”, the user can cancel out or deselect\nthe items.\n\n<Row>\n<Column colLg={12}>\n\n![data table multi select](images/datatable-multi-select.png)\n\n</Column>\n</Row>\n\n### Inline actions\n\nInline actions are functions that may be performed on a specific table row. Each\nrow is accompanied by\nan [overflow menu](https://www.carbondesignsystem.com/components/overflow-menu/code) that\ncontains actions related specifically to that row.\n\n<Row>\n<Column colLg={8}>\n\n![data table inline actions](images/datatable-inline-actions.png)\n\n</Column>\n</Row>\n\nWhen the overflow menu contains less than three options, keep the actions inline\nas icon buttons instead. This reduces a click and makes available actions\nvisible at a glance.\n\n### Overflow menu\n\nBy default, the overflow menu icons are persistent on each row. Having the\noverflow menus always visible signals to the user actions can be taken on the\ntable rows. Alternatively, a product team may use the `overflowMenuOnHover` prop\nto only show the overflow menu on hover and focus to reduce the visual clutter\nof an overflow menu on every row.\n\nFor mobile and touch devices the data table will detect if the user agent\nsupports hover-over and persist the overflow menus even if the\n`overflowMenuOnHover` prop is enabled.\n\n<Row>\n<Column colLg={8}>\n\n![data table inline actions](images/datatable-persistent-hover.png)\n\n</Column>\n</Row>\n\n### Expandable\n\nThe expandable data table is useful for presenting large amounts of data in a\nsmall space. Use the expanded section for supplementary information or data that\nneeds additional query time. When the content in the expanded area begins to\nfeel cramped, consider taking the user to a dedicated page or opening a modal to\nview the information and complete tasks.\n\n<Row>\n<Column colLg={12}>\n\n![data table in expanded and collapsed state](images/datatable-expand.png)\n\n<Caption>Expandable data table with one row expanded</Caption>\n\n</Column>\n</Row>\n\nBy default, the expand-all chevron is not shown. Keeping detailed information in\nexpanded section saves user loading time by postponing some data queries until\nneeded. Expanding all rows at once will typically negate this advantages of the\nexpandable table. If additional load time is expected to display expanded\ninformation, use skeleton states instead of spinners.\n\n<Row>\n<Column colLg={12}>\n\n![data table in expanded and collapsed state](images/datatable-skeleton.png)\n\n<Caption>Expanding all rows with skeleton states</Caption>\n\n</Column>\n</Row>\n\n## Modifiers\n\nThe data table features a zebra stripes modifier that styles the table rows with\nalternating colors to make scanning horizontal information easier for the user.\n\n<Row>\n<Column colLg={8}>\n\n![data table with zebra stripes](images/datatable-zebra.png)\n\n</Column>\n</Row>\n\n### Related\n\nThe following components are additional ways to organize and navigate data.\n\n- [Accordion](/components/accordion/code/)\n\n- [List](/components/list/code/)\n\n- [Pagination](/components/pagination/code/)\n\n- [Structured list](/components/structured-list/code/)\n\n### Feedback\n\nHelp us improve this pattern by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","fileAbsolutePath":"/Users/jvernon/Documents/Design System/carbon/carbon-website/src/pages/components/data-table/usage.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2368708353","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","711213475","768070550"]}
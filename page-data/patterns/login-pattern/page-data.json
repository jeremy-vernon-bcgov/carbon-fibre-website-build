{"componentChunkName":"component---src-pages-patterns-login-pattern-index-mdx","path":"/patterns/login-pattern/","result":{"pageContext":{"frontmatter":{"title":"Login","description":"The login page allows a user to gain access to an application by entering their username and password."},"relativePagePath":"/patterns/login-pattern/index.mdx","titleType":"prepend","MdxNode":{"id":"7a0d0ede-5b61-5885-8dff-d6747add2f82","children":[],"parent":"7d1489e5-8522-572a-9753-8c88c87810b0","internal":{"content":"---\ntitle: Login\ndescription:\n  The login page allows a user to gain access to an application by entering\n  their username and password.\n---\n\n<PageDescription>\n\nThe login page allows a user to gain access to an application by entering their\nuser ID and password, or by using another method of authentication.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Behavior</AnchorLink>\n<AnchorLink>Design and layout</AnchorLink>\n<AnchorLink>Accessibility</AnchorLink>\n<AnchorLink>Related</AnchorLink>\n<AnchorLink>References</AnchorLink>\n<AnchorLink>Feedback</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nLogin is often the first interaction a user has with your product. This entry\npoint experience is an important moment in establishing your product's brand and\nexperience and sets the tone for their overall experience with the product.\n\n### Anatomy of a basic login screen\n\n<Row>\n<Column colLg={12}>\n\n![Anatomy of a login page](./images/1_Login_anatomy_1120.png)\n\n</Column>\n</Row>\n\n1. **Title:** Located at the top of the log in flow. For consistency, the title\n   should include the words “Log in” rather than “Sign in” or another variant.\n   The title can also include the product name if that makes sense for your\n   situation. If necessary the title can wrap to the next line.\n2. **Create account (optional):** Link to URX form to create an account;\n   location of this element can vary with layout.\n3. **Required fields:** The user ID and password fields are both required\n   although, in IBM’s preferred log in flow, the password field is progressively\n   disclosed, because it has a dependency on the user ID. User IDs are usually\n   in the form of an email address. Depending on the product, this area may also\n   include a filter to specify the ID type.\n4. **Forgot username/password link:** Takes users to a page where they can\n   recover their username and/or password.\n5. **Remember ID (optional):** Saves the user ID and presents the completed\n   input field the next time the user logs in; it is located under the required\n   field. Clarify what is being remembered (that is, “user ID\") to avoid\n   confusion.\n6. **Alternative logins (optional):** Displays alternative login methods in\n   order.\n7. **Continue button:** Button label should be “Continue” for the primary call\n   to action. When clicked, the email address is validated and routes the user\n   to either the single sign-on or password flow.\n8. **Need help? (optional):** Help link specifically for user ID questions and\n   issues.\n9. **Background image (optional):** Check your product team's guidance and\n   choose an asset accordingly; all product team guidance should adhere to the\n   IBM Design Language. Brand and sub-brand guidance can be found on\n   [IBM Brand Center](https://www.ibm.com/brand/).\n\n### When to use\n\nThe login page is presented to users in the following scenarios:\n\n- When a user wants to gain access to an app.\n- When a user has logged out voluntarily. They will see a confirmation message\n  after which they will be automatically redirected back to the login page.\n- When a user has been logged out due to inactivity. In this scenario, when the\n  user logs back in they should be redirected to the last page they were on,\n  before being logged out.\n\n## Behavior\n\n### Progressive authentication\n\nIBM defaults to progressive authentication for logging into products. This\ndecreases the user’s cognitive load by eliminating non-essential distractions\nand automatically directing them to the necessary login flow.\n\nAs illustrated below, the user ID should be requested upfront with a “Continue”\nbutton to move forward. This allows the system to distinguish which path the\nuser needs to take in the background instead of making the user read through\noptions and choose. From this point the user will either continue to a single\nsign-on (SSO) flow or they’ll be presented a password field.\n\n#### SSO\n\nSingle sign-on (SSO) enables users to log into multiple, unrelated products\nthrough one authentication portal, rather than using a unique username and\npassword for each product. Many companies use SSO to give their employees access\nto a suite of unrelated tools with only one login.\n\nWhen users input an SSO email and click “Continue” they are taken to their\norganization’s SSO flow. If it is not possible to determine whether a user is\nusing an SSO email in the backend, provide users with a button to take them to\ntheir SSO flow.\n\n#### Username and password\n\nIf a user enters an email that does not use SSO, they are taken to the password\nflow. The password page includes a way to return to the previous page in case\nthe user makes a mistake while filling out their user ID, as well as a “Forgot\npassword” button.\n\nDo not give users an error if they enter an email or username that is not valid\nuntil after they have clicked “Log in” on the password page. This protects valid\nemail addresses and usernames from being exposed and helps keep your product\nsecure.\n\n<Row>\n<Column colLg={12}>\n\n![Username and password pages](./images/2_Login_flow_1120.png)\n\n</Column>\n</Row>\n\n#### Multi-factor authentication\n\nMulti-Factor Authentication (MFA) requires a user to present more than one\ncredential, in order to verify their identity. This method provides an added\nlayer of security, while still maintaining ease of use. This often includes a\npassword and an additional credential, like an SMS code or known backup code.\n\nCarbon does not have consolidated guidance around multi-factor authentication.\nSince it’s something that products approach in different ways, we'd like to\nconduct more research with a view to offering more robust, centralized guidance\nin the future.\n\n#### Separate authentication methods\n\nIf distinguishing between the authentication methods in the background is not\ntechnically feasible, provide users buttons to the various paths upfront.\nConsult your product team's guidance to determine which alternative logins your\nplatform or product offers.\n\nFixed text inputs and buttons should be used for this design so that the primary\nbutton can maintain its position next to the input field. See the\n[Fluid vs. fixed inputs](#fluid-vs.-fixed-components) section below for more\nspecific usage guidance. Also, please refer to brand guidelines when using logos\nfor alternative logins. Examples of brand guidelines for a few commonly used\nalternative logins include:\n\n- [Azure brand guidelines](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-add-branding-in-azure-ad-apps)\n- [Github brand guidelines](https://github.com/logos)\n- [Google brand guidelines](https://developers.google.com/identity/branding-guidelines)\n\n<Row>\n<Column colLg={12}>\n\n![Example of login form with alternate login options](./images/3_Login_alternates_1120.png)\n\n<Caption>Example of a login form with alternate login options</Caption>\n\n</Column>\n</Row>\n\n### Errors and validation\n\nEffective error messaging is important for creating great experiences. Not being\nable to log into an application is frustrating and blocks users from\naccomplishing their tasks.\n\nAlways present error states on the login screen, and use inline errors whenever\npossible. The error state you use will depend on whether the validation happens\non the client or the server.\n\n#### Content guidelines\n\nError messages should be clear and concise. They should help users understand\nwhat went wrong and give users steps to resolve the error. Be as specific as\npossible in your error messages. If the message is written as a complete\nsentence always use a period. If the message is a short fragment then feel free\nto omit the period.\n\n#### Client-side validation\n\nValidate as much of the user's data before submission as possible. This\nreal-time validation should happen when the input field loses focus and checks\nfor input errors like invalid characters and empty fields. This helps users\neasily identify mistakes and fix them before submitting the login form.\n\nCommon client-side errors:\n\n- Empty required fields\n- Invalid characters\n- Incorrect input format\n\n<Row>\n<Column colLg={12}>\n\n![Examples of client-side errors](./images/4_Login_errors_1120.png)\n\n<Caption>Examples of client-side errors</Caption>\n\n</Column>\n</Row>\n\nWhether you are using fixed or fluid text inputs in your login flow, inline\nerror messages should be displayed below any required field that is empty once\nthe field loses focus or an action button (“Continue” or “Log in”) is clicked.\nSee the fluid text input specs for more information on error states. Once the\nfield is filled, the error message should disappear.\n\nThe following error messages are suggested:\n\n| Use case                                            | Message                              |\n| --------------------------------------------------- | ------------------------------------ |\n| _Empty username field_                              | IBMid or email is required           |\n| _Empty password field_                              | Password is required                 |\n| _Invalid character in an IBMid or email address_    | Enter a valid IBMid or email address |\n| _Incorrect formatting of an IBMid or email address_ | Enter a valid IBMid or email address |\n\n#### Server-side errors\n\nIf there are server-side errors when the user submits the login form, the page\nshould be reloaded, the password field cleared, and the user returned to the\nusername input field. Use an inline notification to display the errors and\nprovide clear direction on how users should resolve the issue. If there are\nmultiple server errors, the inline notifications should stack.\n\n<Row>\n<Column colLg={8}>\n\n![Example of a server-side notificaiton on a login flow.](./images/5_Login_inline_error_736.png)\n\n<Caption>Example of a server-side notificaiton on a login flow</Caption>\n\n</Column>\n</Row>\n\nIncorrect username and/or password are the most common server errors. The\napplication should wait until both the username and password have been submitted\nbefore checking they are valid. The same generic error message is suggested for\nincorrect usernames or passwords. As mentioned earlier, this protects valid\nemail addresses and usernames from being exposed and helps keep your product\nsecure.\n\nThe following error messages are suggested:\n\n| Use case         | Message                                 |\n| ---------------- | --------------------------------------- |\n| _Wrong username_ | Incorrect IBMid or password. Try again. |\n| _Wrong password_ | Incorrect IBMid or password. Try again. |\n\n## Design and layout\n\n### Fluid vs. fixed components\n\nAlthough the fluid inputs have not been added as a variant to Carbon core\ncomponents yet, they have complete\n[design specs](https://github.com/carbon-design-system/carbon/issues/5416) and\nare currently under development. Since many product teams have expressed\ninterest in using the fluid inputs for Login and Sign up flows, the Carbon team\nwanted to consolidate exploration and present a clear path forward. What we have\npresented above is the ideal future state of the login pattern.\n\nHowever, since a coded variant does not exist for fluid inputs, many teams may\nchoose to proceed with the fixed inputs. Below are several alternate examples\nillustrating the login flow with fixed inputs.\n\nFluid buttons and inputs require floating containers, whereas fixed buttons and\ninputs can either sit on the page, without a container, or sit in a side-aligned\nfull bleed container (much like a panel).\n\n<Row>\n<Column colLg={12}>\n\n![Example of a log in flow using fixed text input components](./images/6_Login_alternates_fixed_1120.png)\n\n<Caption>Example of a log in flow using fixed text input components</Caption>\n\n</Column>\n</Row>\n\n#### Designing for multiple alternate logins\n\nAs mentioned above, we prefer that the system distinguishes the path a user\nneeds to take in the background rather than making them choose in the UI.\nHowever, with certain products, that’s not an option. In order to present\nmultiple alternate logins to the user up front, designers must use fixed text\ninputs and fixed buttons so that the primary button can remain close to the\ninput field.\n\nBe mindful of the hierarchy and avoid layouts that emphasize alternate logins\nover the preferred login path.\n\n<Row>\n<Column colLg={12}>\n\n![Example of a log in flow using multiple alternate logins](./images/7_Login_multiple_alts_1120.png)\n\n<Caption>\n  Keep the primary button closest to the text input when presenting multiple\n  alternate logins.\n</Caption>\n\n</Column>\n</Row>\n\n<DoDontRow>\n<DoDont\ntype=\"dont\"\ncaption=\"Do not put alternate login buttons between the username input and the primary button.\">\n\n![Do not put alternate login buttons between the username input and the primary button](./images/8_dont_alt_logins_544.png)\n\n</DoDont>\n\n<DoDont\ntype=\"dont\"\ncaption=\"Do not put alternate login buttons at the top of the login form.\">\n\n![Do not put alternate login buttons at the top of the login form](./images/9_dont_alt_logins_544.png)\n\n</DoDont>\n</DoDontRow>\n\n### Position\n\nCarbon provides best practice advice on the login pattern but will leave more\nspecific design guidance to the product teams. For instance, decisions like\nwhere to position the login flow on a page (i.e. left, right, or center), or\nwhether to use fluid or fixed inputs, can be made at the product team level as\nlong as the fields remain on the grid. Designers can also choose whether to\nincorporate brand-approved background textures, illustrations and/or marketing\ncontent. Visit the [IBM Brand Center](https://www.ibm.com/brand/) for specific\nguidance and approved assets relating to your brand and/or sub-brand.\n\n#### Centered layout\n\nPlacing the fluid login form in the center of the screen creates a simple entry\npoint for users. Without any distractions on the page, users can focus on their\nprimary goal of logging in to the application or product. Through navigating to\nthe login page, users have already shown intent to log in so additional content\nabout the product isn’t necessary.\n\nThis type of login is often paired with a solid color background or a\nbrand-approved background texture. Because the form is the focal point, complex\nillustrations are not appropriate in this situation.\n\n<Row>\n<Column colLg={8}>\n\n![Example of centered login forms paired with a background texture](./images/10_Login_centered_736.png)\n\n<Caption>\n  Example of centered login forms paired with a background texture\n</Caption>\n\n</Column>\n</Row>\n\n#### Split-screen layout\n\nThe split-screen page is an alternate design that can be used to include some\nmarketing content or other visual treatment related to the product. The login\nportion of this layout uses the same design and behavior as the centered layout\nbut is confined to one part of the page.\n\nAny additional content on this page should be minimal and easy to scan. It\nshouldn’t distract from the login form. The user’s primary goal is logging in\nand that should be reflected in the visual design and emphasis on the page.\n\nBrand-approved background textures or illustrations are appropriate for use with\nthe login form as long as the pairing is accessible and enhances the experience.\nWhen choosing colors for your illustrations, consider their association with\nyour particular product or communication. Lean on IBM Design Language layout\nprinciples along with the type scale to achieve a clear hierarchy.\n\nPlease note that the fluid login form can also be side-aligned to create space\nfor marketing content or an illustration.\n\n<Row>\n<Column colLg={8}>\n\n![Example of split-screen login forms paired with an illustration](./images/11_Login_positions_736.png)\n\n<Caption>\n  Example of split-screen login forms paired with an illustration\n</Caption>\n\n</Column>\n</Row>\n\nThere may be a need to include some marketing content on this page. When\nincluding additional content, be sure to keep the marketing and login content\nseparated. Testing has shown that users don’t look outside of the login region\nto find related actions such as create account or SSO buttons, and often miss\nthose actions if they are embedded in the marketing content.\n\n<Row>\n<Column colLg={12}>\n\n![Example of split-screen login form paired with marketing content](./images/12_Login_split_1120.png)\n\n<Caption>\n  Keep marketing content, including links and CTAs separate from the login.\n</Caption>\n\n</Column>\n</Row>\n\n### Spacing\n\nSince login forms can appear as the central focus of the screen or in\nconjunction with marketing content in a split-screen layout, margins and\nvertical spacing can vary according to context.\n\n#### Fluid login form\n\nThe fluid login form has consistent margins regardless of its width on the grid\nor whether it uses fluid or fixed inputs. When the password input appears in\nplace of the username input, all of the spatial relationships remain the same,\neven though certain options (for example, “Remember ID” and alternate logins)\ndisappear. This prevents an awkward resizing or jumping during the animation.\n\nEven if your team chooses not to incorporate the “Remember ID” piece, please do\nnot adjust the spacing of the fluid login form, just remove it.\n\n<Row>\n<Column colLg={8}>\n\n![Specs for margins and vertical spacing in a centered login form with fluid input](./images/13_Login_centered_fluid_specs_736.png)\n\n<Caption>\n  Specs for margins and vertical spacing in a centered login form with fluid\n  input\n</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![Specs for margins and vertical spacing in a centered login form with fixed input](./images/14_Login_centered_fixed_specs_736.png)\n\n<Caption>\n  Specs for margins and vertical spacing in a centered login form with fixed\n  input\n</Caption>\n\n</Column>\n</Row>\n\n#### Fixed login form\n\nThe fixed login form may or may not appear within a container and margins will\nvary according to its location on the grid. Adhere to the vertical spacing in\nthe specs below regardless of the container.\n\nIf teams choose not to use “Remember ID” (which is optional), they can simply\nremove the 24px margin top along with it, to adjust the spacing.\n\n<Row>\n<Column colLg={8}>\n\n![Specs for margins and vertical spacing in a split-screen login form with fixed input](./images/15_Login_centered_fixed_form_specs_736.png)\n\n<Caption>\n  Specs for margins and vertical spacing in a split-screen login form with fixed\n  input\n</Caption>\n\n</Column>\n</Row>\n\n## Accessibility\n\nEnsure that users can tab through the login form and navigate the page using\nonly a keyboard. Use landmark regions to designate the login region and allow\nscreen readers to skip directly to the input fields. This is especially\nimportant if you are using the split-screen layout or have additional content on\nthe page.\n\n## Related\n\n- [Button](https://www.carbondesignsystem.com/components/button/usage)\n- [Link](https://www.carbondesignsystem.com/components/link/usage)\n- [Text input](https://www.carbondesignsystem.com/components/text-input/usage)\n\n## References\n\n- Raluca Budiu,\n  [Login Walls Stop Users in Their Tracks](https://www.nngroup.com/articles/login-walls/)\n  (Nielsen Norman Group, 2014)\n- Lee Munroe, [Login vs Sign in](https://www.leemunroe.com/login-vs-signin/),\n  (2010)\n- W3C,\n  [Using AIRA landmarks to identify regions of a page](https://www.w3.org/TR/WCAG20-TECHS/ARIA11.html)\n- Susan M. Weinschenk, Ph.D., 100 Things Every Designer Needs to Know about\n  People (New Riders, 2011)\n\n## Feedback\n\nHelp us improve this pattern by providing feedback, asking questions, and\nleaving any other comments\non [GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","type":"Mdx","contentDigest":"27015df2e90e0998d01623e696df4fb8","counter":2983,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Login","description":"The login page allows a user to gain access to an application by entering their username and password."},"exports":{},"rawBody":"---\ntitle: Login\ndescription:\n  The login page allows a user to gain access to an application by entering\n  their username and password.\n---\n\n<PageDescription>\n\nThe login page allows a user to gain access to an application by entering their\nuser ID and password, or by using another method of authentication.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Behavior</AnchorLink>\n<AnchorLink>Design and layout</AnchorLink>\n<AnchorLink>Accessibility</AnchorLink>\n<AnchorLink>Related</AnchorLink>\n<AnchorLink>References</AnchorLink>\n<AnchorLink>Feedback</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nLogin is often the first interaction a user has with your product. This entry\npoint experience is an important moment in establishing your product's brand and\nexperience and sets the tone for their overall experience with the product.\n\n### Anatomy of a basic login screen\n\n<Row>\n<Column colLg={12}>\n\n![Anatomy of a login page](./images/1_Login_anatomy_1120.png)\n\n</Column>\n</Row>\n\n1. **Title:** Located at the top of the log in flow. For consistency, the title\n   should include the words “Log in” rather than “Sign in” or another variant.\n   The title can also include the product name if that makes sense for your\n   situation. If necessary the title can wrap to the next line.\n2. **Create account (optional):** Link to URX form to create an account;\n   location of this element can vary with layout.\n3. **Required fields:** The user ID and password fields are both required\n   although, in IBM’s preferred log in flow, the password field is progressively\n   disclosed, because it has a dependency on the user ID. User IDs are usually\n   in the form of an email address. Depending on the product, this area may also\n   include a filter to specify the ID type.\n4. **Forgot username/password link:** Takes users to a page where they can\n   recover their username and/or password.\n5. **Remember ID (optional):** Saves the user ID and presents the completed\n   input field the next time the user logs in; it is located under the required\n   field. Clarify what is being remembered (that is, “user ID\") to avoid\n   confusion.\n6. **Alternative logins (optional):** Displays alternative login methods in\n   order.\n7. **Continue button:** Button label should be “Continue” for the primary call\n   to action. When clicked, the email address is validated and routes the user\n   to either the single sign-on or password flow.\n8. **Need help? (optional):** Help link specifically for user ID questions and\n   issues.\n9. **Background image (optional):** Check your product team's guidance and\n   choose an asset accordingly; all product team guidance should adhere to the\n   IBM Design Language. Brand and sub-brand guidance can be found on\n   [IBM Brand Center](https://www.ibm.com/brand/).\n\n### When to use\n\nThe login page is presented to users in the following scenarios:\n\n- When a user wants to gain access to an app.\n- When a user has logged out voluntarily. They will see a confirmation message\n  after which they will be automatically redirected back to the login page.\n- When a user has been logged out due to inactivity. In this scenario, when the\n  user logs back in they should be redirected to the last page they were on,\n  before being logged out.\n\n## Behavior\n\n### Progressive authentication\n\nIBM defaults to progressive authentication for logging into products. This\ndecreases the user’s cognitive load by eliminating non-essential distractions\nand automatically directing them to the necessary login flow.\n\nAs illustrated below, the user ID should be requested upfront with a “Continue”\nbutton to move forward. This allows the system to distinguish which path the\nuser needs to take in the background instead of making the user read through\noptions and choose. From this point the user will either continue to a single\nsign-on (SSO) flow or they’ll be presented a password field.\n\n#### SSO\n\nSingle sign-on (SSO) enables users to log into multiple, unrelated products\nthrough one authentication portal, rather than using a unique username and\npassword for each product. Many companies use SSO to give their employees access\nto a suite of unrelated tools with only one login.\n\nWhen users input an SSO email and click “Continue” they are taken to their\norganization’s SSO flow. If it is not possible to determine whether a user is\nusing an SSO email in the backend, provide users with a button to take them to\ntheir SSO flow.\n\n#### Username and password\n\nIf a user enters an email that does not use SSO, they are taken to the password\nflow. The password page includes a way to return to the previous page in case\nthe user makes a mistake while filling out their user ID, as well as a “Forgot\npassword” button.\n\nDo not give users an error if they enter an email or username that is not valid\nuntil after they have clicked “Log in” on the password page. This protects valid\nemail addresses and usernames from being exposed and helps keep your product\nsecure.\n\n<Row>\n<Column colLg={12}>\n\n![Username and password pages](./images/2_Login_flow_1120.png)\n\n</Column>\n</Row>\n\n#### Multi-factor authentication\n\nMulti-Factor Authentication (MFA) requires a user to present more than one\ncredential, in order to verify their identity. This method provides an added\nlayer of security, while still maintaining ease of use. This often includes a\npassword and an additional credential, like an SMS code or known backup code.\n\nCarbon does not have consolidated guidance around multi-factor authentication.\nSince it’s something that products approach in different ways, we'd like to\nconduct more research with a view to offering more robust, centralized guidance\nin the future.\n\n#### Separate authentication methods\n\nIf distinguishing between the authentication methods in the background is not\ntechnically feasible, provide users buttons to the various paths upfront.\nConsult your product team's guidance to determine which alternative logins your\nplatform or product offers.\n\nFixed text inputs and buttons should be used for this design so that the primary\nbutton can maintain its position next to the input field. See the\n[Fluid vs. fixed inputs](#fluid-vs.-fixed-components) section below for more\nspecific usage guidance. Also, please refer to brand guidelines when using logos\nfor alternative logins. Examples of brand guidelines for a few commonly used\nalternative logins include:\n\n- [Azure brand guidelines](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-add-branding-in-azure-ad-apps)\n- [Github brand guidelines](https://github.com/logos)\n- [Google brand guidelines](https://developers.google.com/identity/branding-guidelines)\n\n<Row>\n<Column colLg={12}>\n\n![Example of login form with alternate login options](./images/3_Login_alternates_1120.png)\n\n<Caption>Example of a login form with alternate login options</Caption>\n\n</Column>\n</Row>\n\n### Errors and validation\n\nEffective error messaging is important for creating great experiences. Not being\nable to log into an application is frustrating and blocks users from\naccomplishing their tasks.\n\nAlways present error states on the login screen, and use inline errors whenever\npossible. The error state you use will depend on whether the validation happens\non the client or the server.\n\n#### Content guidelines\n\nError messages should be clear and concise. They should help users understand\nwhat went wrong and give users steps to resolve the error. Be as specific as\npossible in your error messages. If the message is written as a complete\nsentence always use a period. If the message is a short fragment then feel free\nto omit the period.\n\n#### Client-side validation\n\nValidate as much of the user's data before submission as possible. This\nreal-time validation should happen when the input field loses focus and checks\nfor input errors like invalid characters and empty fields. This helps users\neasily identify mistakes and fix them before submitting the login form.\n\nCommon client-side errors:\n\n- Empty required fields\n- Invalid characters\n- Incorrect input format\n\n<Row>\n<Column colLg={12}>\n\n![Examples of client-side errors](./images/4_Login_errors_1120.png)\n\n<Caption>Examples of client-side errors</Caption>\n\n</Column>\n</Row>\n\nWhether you are using fixed or fluid text inputs in your login flow, inline\nerror messages should be displayed below any required field that is empty once\nthe field loses focus or an action button (“Continue” or “Log in”) is clicked.\nSee the fluid text input specs for more information on error states. Once the\nfield is filled, the error message should disappear.\n\nThe following error messages are suggested:\n\n| Use case                                            | Message                              |\n| --------------------------------------------------- | ------------------------------------ |\n| _Empty username field_                              | IBMid or email is required           |\n| _Empty password field_                              | Password is required                 |\n| _Invalid character in an IBMid or email address_    | Enter a valid IBMid or email address |\n| _Incorrect formatting of an IBMid or email address_ | Enter a valid IBMid or email address |\n\n#### Server-side errors\n\nIf there are server-side errors when the user submits the login form, the page\nshould be reloaded, the password field cleared, and the user returned to the\nusername input field. Use an inline notification to display the errors and\nprovide clear direction on how users should resolve the issue. If there are\nmultiple server errors, the inline notifications should stack.\n\n<Row>\n<Column colLg={8}>\n\n![Example of a server-side notificaiton on a login flow.](./images/5_Login_inline_error_736.png)\n\n<Caption>Example of a server-side notificaiton on a login flow</Caption>\n\n</Column>\n</Row>\n\nIncorrect username and/or password are the most common server errors. The\napplication should wait until both the username and password have been submitted\nbefore checking they are valid. The same generic error message is suggested for\nincorrect usernames or passwords. As mentioned earlier, this protects valid\nemail addresses and usernames from being exposed and helps keep your product\nsecure.\n\nThe following error messages are suggested:\n\n| Use case         | Message                                 |\n| ---------------- | --------------------------------------- |\n| _Wrong username_ | Incorrect IBMid or password. Try again. |\n| _Wrong password_ | Incorrect IBMid or password. Try again. |\n\n## Design and layout\n\n### Fluid vs. fixed components\n\nAlthough the fluid inputs have not been added as a variant to Carbon core\ncomponents yet, they have complete\n[design specs](https://github.com/carbon-design-system/carbon/issues/5416) and\nare currently under development. Since many product teams have expressed\ninterest in using the fluid inputs for Login and Sign up flows, the Carbon team\nwanted to consolidate exploration and present a clear path forward. What we have\npresented above is the ideal future state of the login pattern.\n\nHowever, since a coded variant does not exist for fluid inputs, many teams may\nchoose to proceed with the fixed inputs. Below are several alternate examples\nillustrating the login flow with fixed inputs.\n\nFluid buttons and inputs require floating containers, whereas fixed buttons and\ninputs can either sit on the page, without a container, or sit in a side-aligned\nfull bleed container (much like a panel).\n\n<Row>\n<Column colLg={12}>\n\n![Example of a log in flow using fixed text input components](./images/6_Login_alternates_fixed_1120.png)\n\n<Caption>Example of a log in flow using fixed text input components</Caption>\n\n</Column>\n</Row>\n\n#### Designing for multiple alternate logins\n\nAs mentioned above, we prefer that the system distinguishes the path a user\nneeds to take in the background rather than making them choose in the UI.\nHowever, with certain products, that’s not an option. In order to present\nmultiple alternate logins to the user up front, designers must use fixed text\ninputs and fixed buttons so that the primary button can remain close to the\ninput field.\n\nBe mindful of the hierarchy and avoid layouts that emphasize alternate logins\nover the preferred login path.\n\n<Row>\n<Column colLg={12}>\n\n![Example of a log in flow using multiple alternate logins](./images/7_Login_multiple_alts_1120.png)\n\n<Caption>\n  Keep the primary button closest to the text input when presenting multiple\n  alternate logins.\n</Caption>\n\n</Column>\n</Row>\n\n<DoDontRow>\n<DoDont\ntype=\"dont\"\ncaption=\"Do not put alternate login buttons between the username input and the primary button.\">\n\n![Do not put alternate login buttons between the username input and the primary button](./images/8_dont_alt_logins_544.png)\n\n</DoDont>\n\n<DoDont\ntype=\"dont\"\ncaption=\"Do not put alternate login buttons at the top of the login form.\">\n\n![Do not put alternate login buttons at the top of the login form](./images/9_dont_alt_logins_544.png)\n\n</DoDont>\n</DoDontRow>\n\n### Position\n\nCarbon provides best practice advice on the login pattern but will leave more\nspecific design guidance to the product teams. For instance, decisions like\nwhere to position the login flow on a page (i.e. left, right, or center), or\nwhether to use fluid or fixed inputs, can be made at the product team level as\nlong as the fields remain on the grid. Designers can also choose whether to\nincorporate brand-approved background textures, illustrations and/or marketing\ncontent. Visit the [IBM Brand Center](https://www.ibm.com/brand/) for specific\nguidance and approved assets relating to your brand and/or sub-brand.\n\n#### Centered layout\n\nPlacing the fluid login form in the center of the screen creates a simple entry\npoint for users. Without any distractions on the page, users can focus on their\nprimary goal of logging in to the application or product. Through navigating to\nthe login page, users have already shown intent to log in so additional content\nabout the product isn’t necessary.\n\nThis type of login is often paired with a solid color background or a\nbrand-approved background texture. Because the form is the focal point, complex\nillustrations are not appropriate in this situation.\n\n<Row>\n<Column colLg={8}>\n\n![Example of centered login forms paired with a background texture](./images/10_Login_centered_736.png)\n\n<Caption>\n  Example of centered login forms paired with a background texture\n</Caption>\n\n</Column>\n</Row>\n\n#### Split-screen layout\n\nThe split-screen page is an alternate design that can be used to include some\nmarketing content or other visual treatment related to the product. The login\nportion of this layout uses the same design and behavior as the centered layout\nbut is confined to one part of the page.\n\nAny additional content on this page should be minimal and easy to scan. It\nshouldn’t distract from the login form. The user’s primary goal is logging in\nand that should be reflected in the visual design and emphasis on the page.\n\nBrand-approved background textures or illustrations are appropriate for use with\nthe login form as long as the pairing is accessible and enhances the experience.\nWhen choosing colors for your illustrations, consider their association with\nyour particular product or communication. Lean on IBM Design Language layout\nprinciples along with the type scale to achieve a clear hierarchy.\n\nPlease note that the fluid login form can also be side-aligned to create space\nfor marketing content or an illustration.\n\n<Row>\n<Column colLg={8}>\n\n![Example of split-screen login forms paired with an illustration](./images/11_Login_positions_736.png)\n\n<Caption>\n  Example of split-screen login forms paired with an illustration\n</Caption>\n\n</Column>\n</Row>\n\nThere may be a need to include some marketing content on this page. When\nincluding additional content, be sure to keep the marketing and login content\nseparated. Testing has shown that users don’t look outside of the login region\nto find related actions such as create account or SSO buttons, and often miss\nthose actions if they are embedded in the marketing content.\n\n<Row>\n<Column colLg={12}>\n\n![Example of split-screen login form paired with marketing content](./images/12_Login_split_1120.png)\n\n<Caption>\n  Keep marketing content, including links and CTAs separate from the login.\n</Caption>\n\n</Column>\n</Row>\n\n### Spacing\n\nSince login forms can appear as the central focus of the screen or in\nconjunction with marketing content in a split-screen layout, margins and\nvertical spacing can vary according to context.\n\n#### Fluid login form\n\nThe fluid login form has consistent margins regardless of its width on the grid\nor whether it uses fluid or fixed inputs. When the password input appears in\nplace of the username input, all of the spatial relationships remain the same,\neven though certain options (for example, “Remember ID” and alternate logins)\ndisappear. This prevents an awkward resizing or jumping during the animation.\n\nEven if your team chooses not to incorporate the “Remember ID” piece, please do\nnot adjust the spacing of the fluid login form, just remove it.\n\n<Row>\n<Column colLg={8}>\n\n![Specs for margins and vertical spacing in a centered login form with fluid input](./images/13_Login_centered_fluid_specs_736.png)\n\n<Caption>\n  Specs for margins and vertical spacing in a centered login form with fluid\n  input\n</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![Specs for margins and vertical spacing in a centered login form with fixed input](./images/14_Login_centered_fixed_specs_736.png)\n\n<Caption>\n  Specs for margins and vertical spacing in a centered login form with fixed\n  input\n</Caption>\n\n</Column>\n</Row>\n\n#### Fixed login form\n\nThe fixed login form may or may not appear within a container and margins will\nvary according to its location on the grid. Adhere to the vertical spacing in\nthe specs below regardless of the container.\n\nIf teams choose not to use “Remember ID” (which is optional), they can simply\nremove the 24px margin top along with it, to adjust the spacing.\n\n<Row>\n<Column colLg={8}>\n\n![Specs for margins and vertical spacing in a split-screen login form with fixed input](./images/15_Login_centered_fixed_form_specs_736.png)\n\n<Caption>\n  Specs for margins and vertical spacing in a split-screen login form with fixed\n  input\n</Caption>\n\n</Column>\n</Row>\n\n## Accessibility\n\nEnsure that users can tab through the login form and navigate the page using\nonly a keyboard. Use landmark regions to designate the login region and allow\nscreen readers to skip directly to the input fields. This is especially\nimportant if you are using the split-screen layout or have additional content on\nthe page.\n\n## Related\n\n- [Button](https://www.carbondesignsystem.com/components/button/usage)\n- [Link](https://www.carbondesignsystem.com/components/link/usage)\n- [Text input](https://www.carbondesignsystem.com/components/text-input/usage)\n\n## References\n\n- Raluca Budiu,\n  [Login Walls Stop Users in Their Tracks](https://www.nngroup.com/articles/login-walls/)\n  (Nielsen Norman Group, 2014)\n- Lee Munroe, [Login vs Sign in](https://www.leemunroe.com/login-vs-signin/),\n  (2010)\n- W3C,\n  [Using AIRA landmarks to identify regions of a page](https://www.w3.org/TR/WCAG20-TECHS/ARIA11.html)\n- Susan M. Weinschenk, Ph.D., 100 Things Every Designer Needs to Know about\n  People (New Riders, 2011)\n\n## Feedback\n\nHelp us improve this pattern by providing feedback, asking questions, and\nleaving any other comments\non [GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","fileAbsolutePath":"/Users/jvernon/Documents/Design System/carbon/carbon-website/src/pages/patterns/login-pattern/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2368708353","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","711213475","768070550"]}
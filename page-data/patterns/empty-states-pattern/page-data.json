{"componentChunkName":"component---src-pages-patterns-empty-states-pattern-index-mdx","path":"/patterns/empty-states-pattern/","result":{"pageContext":{"frontmatter":{"title":"Empty states","description":"Empty states are moments in an app where there is no data to display to the user."},"relativePagePath":"/patterns/empty-states-pattern/index.mdx","titleType":"prepend","MdxNode":{"id":"210fd55b-64bc-5d3f-bfe1-34287c5c2c79","children":[],"parent":"bcff3ec5-de54-5251-aa65-5faaa0d51698","internal":{"content":"---\ntitle: Empty states\ndescription:\n  Empty states are moments in an app where there is no data to display to the\n  user.\n---\n\nimport {\n  StructuredListWrapper,\n  StructuredListHead,\n  StructuredListBody,\n  StructuredListRow,\n  StructuredListInput,\n  StructuredListCell,\n  UnorderedList,\n  ListItem,\n} from 'carbon-components-react';\n\n<PageDescription>\n\nEmpty states are moments in an app where there is no data to display to the\nuser. They are most commonly seen the first time a user interacts with a product\nor page, but can be used when data has been deleted or is unavailable.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Anatomy</AnchorLink>\n  <AnchorLink>Designing with empty states</AnchorLink>\n  <AnchorLink>Types of empty states</AnchorLink>\n  <AnchorLink>In-depth alternatives</AnchorLink>\n  <AnchorLink>Accessibility</AnchorLink>\n  <AnchorLink>Related</AnchorLink>\n  <AnchorLink>References</AnchorLink>\n  <AnchorLink>Feedback</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\nEmpty states are a simple yet extremely powerful way to keep a user informed,\nsupported, and on a productive path. They provide opportunities to communicate\nwhat the user would see if they had data, while providing constructive guidance\nabout next steps.\n\nWith just enough contextual guidance, empty states ensure a smoothness of\nexperience, especially when things aren’t working as expected.\n\nMost people are familiar with the basic empty state page that explains what data\nwould normally appear on a page. However, it’s not always a one size fits all.\n\nThis pattern explores the following approaches:\n\n- Basic empty states for first use, user action confirmation, and error\n  management\n- In-depth supplements and alternatives for first use empty states, including\n  in-line documentation, onboarding, and starter content\n\n## Anatomy\n\n<Row>\n<Column colLg={12}>\n\n![Basic empty state with primary action button](/images/1_Empty_state_annotation_fullpage_website_image_1120.png)\n\n<Caption>Basic empty state with primary action button</Caption>\n\n</Column>\n</Row>\n\n1. **Image (optional):** A non-interactive image that relates to the situation\n   (optional).\n1. **Title:** A short and concise explanation. Where possible, write this as a\n   positive statement. In this example, \"Start by adding data assets\" feels more\n   positive than \"You don’t have any data assets.\" Alternatively, you could say\n   \"You don’t have any data assets yet\".\n1. **Body:** Explain clearly the next action to populate the space. You may also\n   explain why the space is empty and include the benefit of taking this step.\n   There are three options for explaining the primary action:\n   - Direct the user to a primary action button positioned underneath the copy\n   - Include a primary action link in the copy\n   - Direct the user to the UI element—see the example below. This has the\n     benefit of teaching the user where elements are and how they will perform\n     tasks in the future.\n1. **Primary action—button or link in copy (optional):** The primary call to\n   action referenced in the body copy above.\n1. **Secondary call to action (optional):** If there is a secondary action, such\n   as referencing documentation for further reading, include it as a link below\n   the copy.\n\n<Row>\n<Column colLg={12}>\n\n![Basic empty state with instruction to click UI element](/images/2_Empty_state_annotation_datatable_website_image_1120.png)\n\n<Caption>Basic empty state with instruction to click UI element</Caption>\n\n</Column>\n</Row>\n\n## Designing with empty states\n\nEmpty states are often treated as an afterthought. When designed thoughtfully,\nthey become an essential part of a smooth user experience, providing just enough\ninformation, in context, to allow users to continue working in a productive way.\n\nDuring the design process, ask yourself these questions:\n\n- What will the pages, tiles, data tables, and side panels look like without\n  content?\n- What are all of the steps a user can take to address the situation?\n- Is there any useful content that might be available to show?\n- How can I turn this situation into something that is engaging and helpful?\n\nDuring the design phase, explore the full range of options with your team to\nensure that the most appropriate and helpful content is created for each empty\nspace.\n\n### When to use\n\nEmpty states happen for a variety of reasons, and can require different\ntreatments.\n\nStrive for a balance between the situation and the content you’re providing.\nMore content doesn’t necessarily mean it’s a better solution as there is a\ncognitive cost for having more content on the page. This is especially true when\nusers first engage with your product, so save the more involved educational\nmoments for primary features and more complex situations.\n\nThe following table suggests different approaches for empty states to match the\nneeds of the user in different situations.\n\n<Title> Basic empty states </Title>\n\n| Type                          | Use cases                                                                                                                                                                                                        | Goal of the empty state                                                                                                                                      | When to use                                                                                                                                                  |\n| ----------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| No data empty states          | First time use, no data yet                                                                                                                                                                                      | User understands what will be available on the page when data has been added or is available. They understand how to add data themselves.                    | For simpler situations, or for secondary features where bite-sized pieces of information are preferable.                                                     |\n| User action empty states      | Provides feedback based on some user action. For example: <br /><br /> <UnorderedList><ListItem>No results when searching</ListItem><ListItem>Confirmation of completion of a process</ListItem></UnorderedList> | User understands how to adjust search terms or filters to continue their search. <br /><br />User understands that they’ve successfully completed a process. | User understands that they’ve successfully completed a process. When you need to provide feedback to the user based on an interaction.                       |\n| Error management empty states | <UnorderedList><ListItem>Permissions issue</ListItem><ListItem>Systems issue</ListItem><ListItem>Configuration required</ListItem></UnorderedList>                                                               | User understands the problem and if there are corrective actions available, knows what action to take or has options to correct the issue.                   | When something is amiss or some level of intervention or troubleshooting is required, a higher level of detail and specificity will better support the user. |\n\n### Where to use\n\nEmpty states always appear in the otherwise empty space, in the context of the\ndata that’s missing. They can occur anywhere your app can display data,\nincluding but not limited to dashboards, data tables, tiles, full pages, and\nside panels.\n\nThe approach and layout you choose will depend on the situation, and what is the\nmost appropriate based on the page layout and context.\n\n### Visual guidelines for smaller empty spaces\n\nFor small tiles and side panels, follow these guidelines and use the layouts\nshown below.\n\n#### Alignment of elements\n\nEmpty state elements should be left-aligned as a block. The one exception to\nthis rule is an empty state in a small tile. In this case the image should be\ncentered above the left-aligned text and primary action, as shown in the example\nbelow. This exception was made to prevent the empty state looking too much like\ncontent, where it could be skipped over. The centered image in a smaller space\nhelps to draw attention to a state that may require user action.\n\n#### Image choice considerations\n\n- The image choice should relate to the situation.\n- The size of the space for the empty state should also guide the size of image.\n  If space is limited, use just text.\n\n#### Multiple empty states\n\nIn situations where there could be multiple empty states showing at once, we\nrecommend using a tertiary button for the call to action. This avoids scenarios\nwith multiple primary action buttons in the UI.\n\n<Row>\n<Column colLg={8}>\n\n![Layout for empty state in a small tile](/images/3_Empty_state_small_tile_website_image_736.png)\n\n<Caption>Layout for empty state in a small tile</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![Layout for empty state in a side panel](/images/4_Empty_state_sidepanel_mock_website_image_736.png)\n\n<Caption>Layout for empty state in a side panel</Caption>\n\n</Column>\n</Row>\n\n### Visual guidelines for larger empty spaces\n\nFor larger spaces, you have some flexibility with laying out the larger empty\nstates. Follow these guidelines, review the examples, and use your judgment as\nto what is best for the situation.\n\n#### Alignment of elements\n\nEmpty state elements should be left-aligned as a block. Depending on the image\nyou’re using, there are different arrangements available.\n\n<Row>\n<Column colLg={8}>\n\n![Example of layout types](/images/5_Layout_types_website_image_736.png)\n\n</Column>\n</Row>\n\n#### Layout/positioning options\n\nYou have two options for positioning the block in the larger empty states:\n\n- Use a wider left margin\n- Block center the left-aligned group in the empty space\n\n#### Image position options\n\nYou have two options for positioning the image in the larger empty states:\n\n- Above the empty state title—generally better for wider images\n- To the left of the element block—generally better for taller images\n\n#### Image choice considerations\n\n- The image choice should relate to the situation.\n- The size of the space for the empty state should also guide the size of image.\n  If space is limited, use just text.\n\n<Row>\n<Column colLg={8}>\n\n![/images/Untitled.png](/images/6_large_tile_blocked_out_website_image_736.png)\n\n<Caption>\n  Layout options for empty states in large tiles—wide margin or centered block\n</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![/images/Untitled%201.png](/images/7_data_table_blocked_out_website_image_736.png)\n\n<Caption>\n  Layout options for empty states in tables—wide margin or centered block\n</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![/images/Untitled%202.png](/images/8_full_page_blocked_out_website_image_736.png)\n\n<Caption>\n  Layout options for full page empty states—wide margin and centered block\n</Caption>\n\n</Column>\n</Row>\n\n#### Best practices\n\n- **Empty states should replace the element that would ordinarily show**. For\n  example, an empty state for a table would replace the table and the column\n  headers and footer should not be present. This practice avoids having a screen\n  reader read the entire table before getting to the message that there is no\n  content in the table. Likewise, if you search for something and there are no\n  results, any underlying content should be replaced by the empty state message.\n\n- **Consider how many empty states may appear in a space**. If you have a\n  dashboard with a number of widgets and there is a failure for multiple widgets\n  to load, the repetition of the empty state may not have the same impact if you\n  use illustrative icons. In this case, an empty state that uses just text may\n  be preferable.\n\n## Types of empty states\n\n### No data empty states\n\nThese are the most recognizable first use empty states, explaining what will be\nin the space once it is populated with data, and providing guidance for the next\nstep the user can take to populate the space.\n\n<Row>\n<Column colLg={12}>\n\n![Basic empty state with primary action button](/images/9_Empty_state_full_page_real_content_website_image_1120.png)\n\n<Caption>Basic empty state with primary action button</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={12}>\n\n![Basic empty state with instruction to click UI element](/images/10_Empty_state_data_table_real_content_website_image_1120.png)\n\n<Caption>Basic empty state with instruction to click UI element</Caption>\n\n</Column>\n</Row>\n\n#### Do:\n\n- Use basic empty states for simpler situations, or secondary features, where\n  bite-sized pieces of information are preferable.\n- Be specific about what will be available in the space when data is there.\n- Keep words to a minimum so they are fast to read and act upon.\n- If there is an actionable next step, include a direct link in your message\n  copy or a primary action button to make that action fast. Alternatively, guide\n  them to what they need to click.\n\n#### Don’t:\n\n- Don’t cover multiple options in one empty state. If there are multiple things\n  a user can do, pick the most important and keep the focus on that action.\n- Don’t use product-specific terms that the user may not yet understand.\n- Don’t include content that is about other areas of the app. Be contextual.\n- As a general rule, don’t lead the user into a dead end. If there are useful\n  next steps, include them.\n\n### User action empty states\n\nThese empty states occur as a result of a user action. For example:\n\n- A message showing there are no search results\n- A success confirmation for completion of a process or set of tasks\n\nExplain the reason for seeing the message and providing any follow up steps to\nguide the user. For example, if there are no search results suggest adjusting\nthe search or filters. Links to documentation may also be appropriate as a\nsecondary call to action.\n\n<Row>\n<Column colLg={8}>\n\n![A message showing there are no search results](/images/11_Empty_state_search_no_results_website_image_736.png)\n\n<Caption>A message showing there are no search results</Caption>\n\n</Column>\n</Row>\n\nThere may be situations where next steps are not possible or supplementary text\nis not required, so use your judgment about what is useful to include. For\nexample, if your user has configured alerts and nothing has been triggered, it’s\nnot a case of alerts not being set up but that there is nothing that requires\nthe user’s attention. In this case, supplementary text is not necessary.\n\n<Row>\n<Column colLg={8}>\n\n![Basic empty state where next steps are not required](/images/12_Empty_state_tabs_website_image_736.png)\n\n<Caption>Basic empty state where next steps are not required</Caption>\n\n</Column>\n</Row>\n\n### Error management empty states\n\nEmpty states can also occur when there is data but it cannot be surfaced for\nsome reason. A higher level of specificity is helpful here, with the aim that\nthe user will be able to address the issue comfortably themselves.\n\nProvide guidance about why there is no data, and either what the user can do to\naddress the lack of data, or the circumstances under which the data would\nappear. And use plain language. Following this fulfills Jakob Nielsen’s ninth\nusability heuristic: _Help users recognize, diagnose, and recover from errors_.\n\n> Error messages should be expressed in plain language (no codes), precisely\n> indicate the problem, and constructively suggest a solution.\n>\n> <cite>\n>   - 10 Usability Heuristics for User Interface Design, Jakob Nielsen\n> </cite>\n\nHere are some error management situations that may be addressed with the basic\nempty state solution.\n\n| Error type               | Explain why there is no data                                                | Explain what the user can do                                                                      |\n| ------------------------ | --------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |\n| _Permissions issue_      | The user does not have permission to view the data.                         | Suggest steps or process to request access.                                                       |\n| _Systems issue_          | Problems with a related system are preventing the data from being supplied. | Explain steps the user can take to learn what has happened. For example, viewing an activity log. |\n| _Configuration required_ | Further configuration may be needed to access the data.                     | Provide an explanation and the first step for the user to take for the required configuration.    |\n| _Action not supported_   | For example, the user attempts to upload an unsupported file type.          | Explain what file types are supported.                                                            |\n\n<Row>\n<Column colLg={12}>\n\n![Example of an error management empty state for a systems issue](/images/13_Empty_state_system_error_website_image_1120.png)\n\n<Caption>\n  Example of an error management empty state for a systems issue\n</Caption>\n\n</Column>\n</Row>\n\n#### Do:\n\n- Consult with your team to explore what information is available.\n- If there are corrective actions, give the user an actionable next step.\n  Include a direct link in your message copy or a primary action button to make\n  the next action fast. Alternatively, guide them to the element they need to\n  click.\n- Use direct, plain language to describe the situation.\n- Be respectful of the user and don’t joke or use flippant language.\n- Any images used should reflect the situation and be sensitive to what could be\n  a serious situation.\n\n#### Don’t:\n\n- Don’t include content that is about other areas of the app. Be contextual.\n- Don’t lead the user into a dead end. Always aim to provide a path to a\n  solution.\n- If there are multiple things for the user to try, be sure to include a\n  hierarchy so that it’s clear which option would be the primary action.\n\nFor more detailed information about writing error messages, see the Nielsen\nNorman group’s\n[Error Message Guidelines](https://www.nngroup.com/articles/error-message-guidelines/).\n\nA pattern providing guidance for error states is currently being planned. If you\nwould like to contribute, please see our\n[guidelines for contributions](/contributing/pattern).\n\n## In-depth alternatives\n\nEducational content that helps users get oriented and started is another option\nfor turning an otherwise empty space into a positive and productive experience\nfor first time users.\n\nWhen deciding on approaches, a good rule of thumb is that a primary resource on\na page could benefit from a more educational approach, while basic empty states\nmay suffice for secondary resources.\n\n<Title> Alternative approaches </Title>\n\n| Type                  | Use cases                                                                                                                                                                     | Goal of the empty state                                                                                                                                              | When to use                                                                                                                                                                                                                                                                                                            |\n| --------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| In-line documentation | <UnorderedList><ListItem>First time use (of app or feature)</ListItem><ListItem>Cleared or deleted data</ListItem><ListItem>Configuration required</ListItem></UnorderedList> | Detailed overview of page so the user understands more about the feature and is given at least one call to action to get started.                                    | When introducing a primary feature, there is an opportunity to showcase the benefit of usage. More educational detail could help to drive engagement.                                                                                                                                                                  |\n| Onboarding            | First time use                                                                                                                                                                | Starting from an empty state, users have an opportunity to launch a contextual onboarding flow to gain deeper understanding about that area of the app.              | When introducing a primary feature that may require more detailed explanation of concepts, a step-through of a workflow sequence, or other information that enhances productivity. <br /><br />Usually onboarding flows are optional for users, therefore they need to be used in conjunction with basic empty states. |\n| Starter content       | First time use                                                                                                                                                                | User can interact with data and learn the system by tinkering.<br /><br />User gets a jumpstart to productivity with basic setup tasks being taken care of for them. | For complex situations, starter content can be a good choice as it saves users a lot of time both in learning and in configuring setups.                                                                                                                                                                               |\n\n### In-line documentation\n\nIn-line documentation is an extension of the basic empty state for first time\nuse. It can be most helpful when a primary feature is first introduced,\nproviding more detail and highlighting any benefits. Including an image of the\nspace populated with data may help trigger interest and usage. Following a\nprogressive disclosure model, it could provide links out to more detailed\ndocumentation.\n\n#### Considerations for in-line documentation\n\n- If testing results show that users do not understand the feature or concept,\n  more detail may encourage usage.\n- This approach may require a higher level of maintenance than a basic empty\n  state if using product images as images will need to be kept up to date. If\n  your app is translated, there could be extra work in providing localized\n  images.\n- Keep the content limited to one feature. Do not talk about other areas of the\n  app. If there are multiple things a user could do, pick the most important and\n  keep the focus on that.\n\n<Row>\n<Column colLg={12}>\n\n![Example of an in-line empty state](/images/14_Empty_state_inline_doc_website_image_1120.png)\n\n</Column>\n</Row>\n\n### Onboarding\n\nOnboarding services provide various options for contextual in-app guidance that\ncan enhance or direct a user through an empty state.\n\nStepping users through workflows with information that supplements the empty\nstate messages can get the user to a place of comfort quickly. Tours can point\nout the location of features, provide more detail for key tasks, and highlight\nbenefits. Because onboarding flows are optional for users, they need to be used\nin conjunction with basic empty states.\n\n<Row>\n<Column colLg={12}>\n\n![Example of onboarding guidance](/images/15_Empty_state_onboarding_website_image_1120.png)\n\n</Column>\n</Row>\n\n#### Considerations for onboarding\n\n- If metrics are showing that users are not attempting to use a feature, even\n  with an empty state, you may need supplementary information. An empty state\n  can be used as a launching point for an onboarding sequence, to help users get\n  through a process.\n- When using an onboarding third party service, metrics can be viewed at any\n  time, and adjustments to content can be made and deployed immediately.\n- Usually onboarding flows are optional for users, therefore they need to be\n  used in conjunction with basic empty states.\n- Another aspect to consider is maintenance and the level of commitment required\n  to maintain it.\n\nA pattern providing guidance for onboarding is currently being planned. It will\ninclude a framework for matching user needs with design solutions, tips for\nwriting copy, and general best practices. If you would like to contribute,\nplease see our [guidelines for contributions](/contributing/pattern).\n\n### Starter content\n\nAnother strategy for addressing an otherwise empty space is to provide pre-built\ncontent that allows new users to get started with an app quickly and without any\nconcern.\n\n#### Pre-built content for apps\n\nStarter content can provide the opportunity for users to dive in and learn about\nprimary features and functions with sample data. Users can tinker, examining and\ndeleting content without serious consequences. If it’s possible to include some\npersonalization here, that adds to the positive experience.\n\n<Row>\n<Column colLg={12}>\n\n![Creating a chatbot is easier when you have a starting place with pre-built content.](/images/16_Empty_state_prebuilt_content_website_image_736.png)\n\n<Caption>\n  Creating a chatbot is easy when you have a starting place with pre-built\n  content.\n</Caption>\n\n</Column>\n</Row>\n\n> When someone feels like she can explore an interface and not suffer dire\n> consequences, she’s likely to learn more—and feel more positive about it—than\n> someone who doesn’t explore. Good software allows people to try something\n> unfamiliar, back out, and try something else, all without stress.\n>\n> <cite>\n>   -Jenifer Tidwell, Designing Interfaces, (O’Reilly Media, 2011), 9.\n> </cite>\n\n#### Pre-configured kits and workflows\n\nOther options for starter content are pre-configured kits and workflows.\nPre-configured kits containing code and API credentials can offer a fast path to\ngetting started.\n\nStarter content can also take the form of pre-configured workflows, where the\nconfiguration of services is automated, saving users from the tedium of a long\nsetup process.\n\n#### Considerations for starter content\n\n- Requires upfront planning with the full product team to determine workflow\n  pre-configurations that would most benefit users.\n- If your starter content can be deleted by your user, you will need a basic\n  empty state as a back up.\n\n## Accessibility\n\nAs most empty state illustrations are considered decorative, they should be\nskipped by screen readers.\n\nA decorative image is one that does not serve any practical or informational\npurpose, and is included to fill a visual void. Do not include any informational\ncontent in your decorative image.\n\n[Web Content Accessibility Guidelines](https://www.w3.org/WAI/tutorials/images/decorative/)\nrequire that decorative images are given either an empty `alt` tag or their\n`role` is assigned `presentation`. As an empty `alt` tag is more widely\nsupported, we recommend you align with the WCAG guidance and avoid assigning\n`role` to `presentation` until support is more ubiquitous.\n\n## Related\n\n<Row>\n<Column colSm={2} colMd={2} colLg={4}>\n\n#### Components\n\n- [Button](/components/button/usage)\n- [Data table](/components/data-table/usage)\n- [Tile](/components/tile/usage)\n\n</Column>\n<Column colSm={2} colMd={2} colLg={4}>\n\n#### Patterns\n\n- Error states (future)\n- Onboarding (future)\n\n</Column>\n</Row>\n\n## References\n\n- Jakob Nielsen,\n  [Error Message Guidelines](https://www.nngroup.com/articles/error-message-guidelines/)\n  (Nielsen Norman Group, 2001)\n- Jakob Nielsen and Page Labuheimer,\n  [Top 10 Application-Design Mistakes](https://www.nngroup.com/articles/top-10-application-design-mistakes/)\n  (Nielsen Norman Group, 2019)\n- Jenifer Tidwell, Designing Interfaces (O’Reilly Media, 2nd edition, 2011)\n- [Web Content Accessibility Guidelines](https://www.w3.org/WAI/standards-guidelines/wcag/)\n  (W3C, 2018)\n- Kathryn Whitenton,\n  [3 Guidelines for Search Engine \"No Results\" Pages](https://www.nngroup.com/articles/search-no-results-serp/)\n  (Nielsen Norman Group, 2014)\n\n## Feedback\n\nHelp us improve this pattern by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","type":"Mdx","contentDigest":"946e5dfbb7b5411ea8534789937abcb4","counter":2986,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Empty states","description":"Empty states are moments in an app where there is no data to display to the user."},"exports":{},"rawBody":"---\ntitle: Empty states\ndescription:\n  Empty states are moments in an app where there is no data to display to the\n  user.\n---\n\nimport {\n  StructuredListWrapper,\n  StructuredListHead,\n  StructuredListBody,\n  StructuredListRow,\n  StructuredListInput,\n  StructuredListCell,\n  UnorderedList,\n  ListItem,\n} from 'carbon-components-react';\n\n<PageDescription>\n\nEmpty states are moments in an app where there is no data to display to the\nuser. They are most commonly seen the first time a user interacts with a product\nor page, but can be used when data has been deleted or is unavailable.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Anatomy</AnchorLink>\n  <AnchorLink>Designing with empty states</AnchorLink>\n  <AnchorLink>Types of empty states</AnchorLink>\n  <AnchorLink>In-depth alternatives</AnchorLink>\n  <AnchorLink>Accessibility</AnchorLink>\n  <AnchorLink>Related</AnchorLink>\n  <AnchorLink>References</AnchorLink>\n  <AnchorLink>Feedback</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\nEmpty states are a simple yet extremely powerful way to keep a user informed,\nsupported, and on a productive path. They provide opportunities to communicate\nwhat the user would see if they had data, while providing constructive guidance\nabout next steps.\n\nWith just enough contextual guidance, empty states ensure a smoothness of\nexperience, especially when things aren’t working as expected.\n\nMost people are familiar with the basic empty state page that explains what data\nwould normally appear on a page. However, it’s not always a one size fits all.\n\nThis pattern explores the following approaches:\n\n- Basic empty states for first use, user action confirmation, and error\n  management\n- In-depth supplements and alternatives for first use empty states, including\n  in-line documentation, onboarding, and starter content\n\n## Anatomy\n\n<Row>\n<Column colLg={12}>\n\n![Basic empty state with primary action button](/images/1_Empty_state_annotation_fullpage_website_image_1120.png)\n\n<Caption>Basic empty state with primary action button</Caption>\n\n</Column>\n</Row>\n\n1. **Image (optional):** A non-interactive image that relates to the situation\n   (optional).\n1. **Title:** A short and concise explanation. Where possible, write this as a\n   positive statement. In this example, \"Start by adding data assets\" feels more\n   positive than \"You don’t have any data assets.\" Alternatively, you could say\n   \"You don’t have any data assets yet\".\n1. **Body:** Explain clearly the next action to populate the space. You may also\n   explain why the space is empty and include the benefit of taking this step.\n   There are three options for explaining the primary action:\n   - Direct the user to a primary action button positioned underneath the copy\n   - Include a primary action link in the copy\n   - Direct the user to the UI element—see the example below. This has the\n     benefit of teaching the user where elements are and how they will perform\n     tasks in the future.\n1. **Primary action—button or link in copy (optional):** The primary call to\n   action referenced in the body copy above.\n1. **Secondary call to action (optional):** If there is a secondary action, such\n   as referencing documentation for further reading, include it as a link below\n   the copy.\n\n<Row>\n<Column colLg={12}>\n\n![Basic empty state with instruction to click UI element](/images/2_Empty_state_annotation_datatable_website_image_1120.png)\n\n<Caption>Basic empty state with instruction to click UI element</Caption>\n\n</Column>\n</Row>\n\n## Designing with empty states\n\nEmpty states are often treated as an afterthought. When designed thoughtfully,\nthey become an essential part of a smooth user experience, providing just enough\ninformation, in context, to allow users to continue working in a productive way.\n\nDuring the design process, ask yourself these questions:\n\n- What will the pages, tiles, data tables, and side panels look like without\n  content?\n- What are all of the steps a user can take to address the situation?\n- Is there any useful content that might be available to show?\n- How can I turn this situation into something that is engaging and helpful?\n\nDuring the design phase, explore the full range of options with your team to\nensure that the most appropriate and helpful content is created for each empty\nspace.\n\n### When to use\n\nEmpty states happen for a variety of reasons, and can require different\ntreatments.\n\nStrive for a balance between the situation and the content you’re providing.\nMore content doesn’t necessarily mean it’s a better solution as there is a\ncognitive cost for having more content on the page. This is especially true when\nusers first engage with your product, so save the more involved educational\nmoments for primary features and more complex situations.\n\nThe following table suggests different approaches for empty states to match the\nneeds of the user in different situations.\n\n<Title> Basic empty states </Title>\n\n| Type                          | Use cases                                                                                                                                                                                                        | Goal of the empty state                                                                                                                                      | When to use                                                                                                                                                  |\n| ----------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| No data empty states          | First time use, no data yet                                                                                                                                                                                      | User understands what will be available on the page when data has been added or is available. They understand how to add data themselves.                    | For simpler situations, or for secondary features where bite-sized pieces of information are preferable.                                                     |\n| User action empty states      | Provides feedback based on some user action. For example: <br /><br /> <UnorderedList><ListItem>No results when searching</ListItem><ListItem>Confirmation of completion of a process</ListItem></UnorderedList> | User understands how to adjust search terms or filters to continue their search. <br /><br />User understands that they’ve successfully completed a process. | User understands that they’ve successfully completed a process. When you need to provide feedback to the user based on an interaction.                       |\n| Error management empty states | <UnorderedList><ListItem>Permissions issue</ListItem><ListItem>Systems issue</ListItem><ListItem>Configuration required</ListItem></UnorderedList>                                                               | User understands the problem and if there are corrective actions available, knows what action to take or has options to correct the issue.                   | When something is amiss or some level of intervention or troubleshooting is required, a higher level of detail and specificity will better support the user. |\n\n### Where to use\n\nEmpty states always appear in the otherwise empty space, in the context of the\ndata that’s missing. They can occur anywhere your app can display data,\nincluding but not limited to dashboards, data tables, tiles, full pages, and\nside panels.\n\nThe approach and layout you choose will depend on the situation, and what is the\nmost appropriate based on the page layout and context.\n\n### Visual guidelines for smaller empty spaces\n\nFor small tiles and side panels, follow these guidelines and use the layouts\nshown below.\n\n#### Alignment of elements\n\nEmpty state elements should be left-aligned as a block. The one exception to\nthis rule is an empty state in a small tile. In this case the image should be\ncentered above the left-aligned text and primary action, as shown in the example\nbelow. This exception was made to prevent the empty state looking too much like\ncontent, where it could be skipped over. The centered image in a smaller space\nhelps to draw attention to a state that may require user action.\n\n#### Image choice considerations\n\n- The image choice should relate to the situation.\n- The size of the space for the empty state should also guide the size of image.\n  If space is limited, use just text.\n\n#### Multiple empty states\n\nIn situations where there could be multiple empty states showing at once, we\nrecommend using a tertiary button for the call to action. This avoids scenarios\nwith multiple primary action buttons in the UI.\n\n<Row>\n<Column colLg={8}>\n\n![Layout for empty state in a small tile](/images/3_Empty_state_small_tile_website_image_736.png)\n\n<Caption>Layout for empty state in a small tile</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![Layout for empty state in a side panel](/images/4_Empty_state_sidepanel_mock_website_image_736.png)\n\n<Caption>Layout for empty state in a side panel</Caption>\n\n</Column>\n</Row>\n\n### Visual guidelines for larger empty spaces\n\nFor larger spaces, you have some flexibility with laying out the larger empty\nstates. Follow these guidelines, review the examples, and use your judgment as\nto what is best for the situation.\n\n#### Alignment of elements\n\nEmpty state elements should be left-aligned as a block. Depending on the image\nyou’re using, there are different arrangements available.\n\n<Row>\n<Column colLg={8}>\n\n![Example of layout types](/images/5_Layout_types_website_image_736.png)\n\n</Column>\n</Row>\n\n#### Layout/positioning options\n\nYou have two options for positioning the block in the larger empty states:\n\n- Use a wider left margin\n- Block center the left-aligned group in the empty space\n\n#### Image position options\n\nYou have two options for positioning the image in the larger empty states:\n\n- Above the empty state title—generally better for wider images\n- To the left of the element block—generally better for taller images\n\n#### Image choice considerations\n\n- The image choice should relate to the situation.\n- The size of the space for the empty state should also guide the size of image.\n  If space is limited, use just text.\n\n<Row>\n<Column colLg={8}>\n\n![/images/Untitled.png](/images/6_large_tile_blocked_out_website_image_736.png)\n\n<Caption>\n  Layout options for empty states in large tiles—wide margin or centered block\n</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![/images/Untitled%201.png](/images/7_data_table_blocked_out_website_image_736.png)\n\n<Caption>\n  Layout options for empty states in tables—wide margin or centered block\n</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![/images/Untitled%202.png](/images/8_full_page_blocked_out_website_image_736.png)\n\n<Caption>\n  Layout options for full page empty states—wide margin and centered block\n</Caption>\n\n</Column>\n</Row>\n\n#### Best practices\n\n- **Empty states should replace the element that would ordinarily show**. For\n  example, an empty state for a table would replace the table and the column\n  headers and footer should not be present. This practice avoids having a screen\n  reader read the entire table before getting to the message that there is no\n  content in the table. Likewise, if you search for something and there are no\n  results, any underlying content should be replaced by the empty state message.\n\n- **Consider how many empty states may appear in a space**. If you have a\n  dashboard with a number of widgets and there is a failure for multiple widgets\n  to load, the repetition of the empty state may not have the same impact if you\n  use illustrative icons. In this case, an empty state that uses just text may\n  be preferable.\n\n## Types of empty states\n\n### No data empty states\n\nThese are the most recognizable first use empty states, explaining what will be\nin the space once it is populated with data, and providing guidance for the next\nstep the user can take to populate the space.\n\n<Row>\n<Column colLg={12}>\n\n![Basic empty state with primary action button](/images/9_Empty_state_full_page_real_content_website_image_1120.png)\n\n<Caption>Basic empty state with primary action button</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={12}>\n\n![Basic empty state with instruction to click UI element](/images/10_Empty_state_data_table_real_content_website_image_1120.png)\n\n<Caption>Basic empty state with instruction to click UI element</Caption>\n\n</Column>\n</Row>\n\n#### Do:\n\n- Use basic empty states for simpler situations, or secondary features, where\n  bite-sized pieces of information are preferable.\n- Be specific about what will be available in the space when data is there.\n- Keep words to a minimum so they are fast to read and act upon.\n- If there is an actionable next step, include a direct link in your message\n  copy or a primary action button to make that action fast. Alternatively, guide\n  them to what they need to click.\n\n#### Don’t:\n\n- Don’t cover multiple options in one empty state. If there are multiple things\n  a user can do, pick the most important and keep the focus on that action.\n- Don’t use product-specific terms that the user may not yet understand.\n- Don’t include content that is about other areas of the app. Be contextual.\n- As a general rule, don’t lead the user into a dead end. If there are useful\n  next steps, include them.\n\n### User action empty states\n\nThese empty states occur as a result of a user action. For example:\n\n- A message showing there are no search results\n- A success confirmation for completion of a process or set of tasks\n\nExplain the reason for seeing the message and providing any follow up steps to\nguide the user. For example, if there are no search results suggest adjusting\nthe search or filters. Links to documentation may also be appropriate as a\nsecondary call to action.\n\n<Row>\n<Column colLg={8}>\n\n![A message showing there are no search results](/images/11_Empty_state_search_no_results_website_image_736.png)\n\n<Caption>A message showing there are no search results</Caption>\n\n</Column>\n</Row>\n\nThere may be situations where next steps are not possible or supplementary text\nis not required, so use your judgment about what is useful to include. For\nexample, if your user has configured alerts and nothing has been triggered, it’s\nnot a case of alerts not being set up but that there is nothing that requires\nthe user’s attention. In this case, supplementary text is not necessary.\n\n<Row>\n<Column colLg={8}>\n\n![Basic empty state where next steps are not required](/images/12_Empty_state_tabs_website_image_736.png)\n\n<Caption>Basic empty state where next steps are not required</Caption>\n\n</Column>\n</Row>\n\n### Error management empty states\n\nEmpty states can also occur when there is data but it cannot be surfaced for\nsome reason. A higher level of specificity is helpful here, with the aim that\nthe user will be able to address the issue comfortably themselves.\n\nProvide guidance about why there is no data, and either what the user can do to\naddress the lack of data, or the circumstances under which the data would\nappear. And use plain language. Following this fulfills Jakob Nielsen’s ninth\nusability heuristic: _Help users recognize, diagnose, and recover from errors_.\n\n> Error messages should be expressed in plain language (no codes), precisely\n> indicate the problem, and constructively suggest a solution.\n>\n> <cite>\n>   - 10 Usability Heuristics for User Interface Design, Jakob Nielsen\n> </cite>\n\nHere are some error management situations that may be addressed with the basic\nempty state solution.\n\n| Error type               | Explain why there is no data                                                | Explain what the user can do                                                                      |\n| ------------------------ | --------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |\n| _Permissions issue_      | The user does not have permission to view the data.                         | Suggest steps or process to request access.                                                       |\n| _Systems issue_          | Problems with a related system are preventing the data from being supplied. | Explain steps the user can take to learn what has happened. For example, viewing an activity log. |\n| _Configuration required_ | Further configuration may be needed to access the data.                     | Provide an explanation and the first step for the user to take for the required configuration.    |\n| _Action not supported_   | For example, the user attempts to upload an unsupported file type.          | Explain what file types are supported.                                                            |\n\n<Row>\n<Column colLg={12}>\n\n![Example of an error management empty state for a systems issue](/images/13_Empty_state_system_error_website_image_1120.png)\n\n<Caption>\n  Example of an error management empty state for a systems issue\n</Caption>\n\n</Column>\n</Row>\n\n#### Do:\n\n- Consult with your team to explore what information is available.\n- If there are corrective actions, give the user an actionable next step.\n  Include a direct link in your message copy or a primary action button to make\n  the next action fast. Alternatively, guide them to the element they need to\n  click.\n- Use direct, plain language to describe the situation.\n- Be respectful of the user and don’t joke or use flippant language.\n- Any images used should reflect the situation and be sensitive to what could be\n  a serious situation.\n\n#### Don’t:\n\n- Don’t include content that is about other areas of the app. Be contextual.\n- Don’t lead the user into a dead end. Always aim to provide a path to a\n  solution.\n- If there are multiple things for the user to try, be sure to include a\n  hierarchy so that it’s clear which option would be the primary action.\n\nFor more detailed information about writing error messages, see the Nielsen\nNorman group’s\n[Error Message Guidelines](https://www.nngroup.com/articles/error-message-guidelines/).\n\nA pattern providing guidance for error states is currently being planned. If you\nwould like to contribute, please see our\n[guidelines for contributions](/contributing/pattern).\n\n## In-depth alternatives\n\nEducational content that helps users get oriented and started is another option\nfor turning an otherwise empty space into a positive and productive experience\nfor first time users.\n\nWhen deciding on approaches, a good rule of thumb is that a primary resource on\na page could benefit from a more educational approach, while basic empty states\nmay suffice for secondary resources.\n\n<Title> Alternative approaches </Title>\n\n| Type                  | Use cases                                                                                                                                                                     | Goal of the empty state                                                                                                                                              | When to use                                                                                                                                                                                                                                                                                                            |\n| --------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| In-line documentation | <UnorderedList><ListItem>First time use (of app or feature)</ListItem><ListItem>Cleared or deleted data</ListItem><ListItem>Configuration required</ListItem></UnorderedList> | Detailed overview of page so the user understands more about the feature and is given at least one call to action to get started.                                    | When introducing a primary feature, there is an opportunity to showcase the benefit of usage. More educational detail could help to drive engagement.                                                                                                                                                                  |\n| Onboarding            | First time use                                                                                                                                                                | Starting from an empty state, users have an opportunity to launch a contextual onboarding flow to gain deeper understanding about that area of the app.              | When introducing a primary feature that may require more detailed explanation of concepts, a step-through of a workflow sequence, or other information that enhances productivity. <br /><br />Usually onboarding flows are optional for users, therefore they need to be used in conjunction with basic empty states. |\n| Starter content       | First time use                                                                                                                                                                | User can interact with data and learn the system by tinkering.<br /><br />User gets a jumpstart to productivity with basic setup tasks being taken care of for them. | For complex situations, starter content can be a good choice as it saves users a lot of time both in learning and in configuring setups.                                                                                                                                                                               |\n\n### In-line documentation\n\nIn-line documentation is an extension of the basic empty state for first time\nuse. It can be most helpful when a primary feature is first introduced,\nproviding more detail and highlighting any benefits. Including an image of the\nspace populated with data may help trigger interest and usage. Following a\nprogressive disclosure model, it could provide links out to more detailed\ndocumentation.\n\n#### Considerations for in-line documentation\n\n- If testing results show that users do not understand the feature or concept,\n  more detail may encourage usage.\n- This approach may require a higher level of maintenance than a basic empty\n  state if using product images as images will need to be kept up to date. If\n  your app is translated, there could be extra work in providing localized\n  images.\n- Keep the content limited to one feature. Do not talk about other areas of the\n  app. If there are multiple things a user could do, pick the most important and\n  keep the focus on that.\n\n<Row>\n<Column colLg={12}>\n\n![Example of an in-line empty state](/images/14_Empty_state_inline_doc_website_image_1120.png)\n\n</Column>\n</Row>\n\n### Onboarding\n\nOnboarding services provide various options for contextual in-app guidance that\ncan enhance or direct a user through an empty state.\n\nStepping users through workflows with information that supplements the empty\nstate messages can get the user to a place of comfort quickly. Tours can point\nout the location of features, provide more detail for key tasks, and highlight\nbenefits. Because onboarding flows are optional for users, they need to be used\nin conjunction with basic empty states.\n\n<Row>\n<Column colLg={12}>\n\n![Example of onboarding guidance](/images/15_Empty_state_onboarding_website_image_1120.png)\n\n</Column>\n</Row>\n\n#### Considerations for onboarding\n\n- If metrics are showing that users are not attempting to use a feature, even\n  with an empty state, you may need supplementary information. An empty state\n  can be used as a launching point for an onboarding sequence, to help users get\n  through a process.\n- When using an onboarding third party service, metrics can be viewed at any\n  time, and adjustments to content can be made and deployed immediately.\n- Usually onboarding flows are optional for users, therefore they need to be\n  used in conjunction with basic empty states.\n- Another aspect to consider is maintenance and the level of commitment required\n  to maintain it.\n\nA pattern providing guidance for onboarding is currently being planned. It will\ninclude a framework for matching user needs with design solutions, tips for\nwriting copy, and general best practices. If you would like to contribute,\nplease see our [guidelines for contributions](/contributing/pattern).\n\n### Starter content\n\nAnother strategy for addressing an otherwise empty space is to provide pre-built\ncontent that allows new users to get started with an app quickly and without any\nconcern.\n\n#### Pre-built content for apps\n\nStarter content can provide the opportunity for users to dive in and learn about\nprimary features and functions with sample data. Users can tinker, examining and\ndeleting content without serious consequences. If it’s possible to include some\npersonalization here, that adds to the positive experience.\n\n<Row>\n<Column colLg={12}>\n\n![Creating a chatbot is easier when you have a starting place with pre-built content.](/images/16_Empty_state_prebuilt_content_website_image_736.png)\n\n<Caption>\n  Creating a chatbot is easy when you have a starting place with pre-built\n  content.\n</Caption>\n\n</Column>\n</Row>\n\n> When someone feels like she can explore an interface and not suffer dire\n> consequences, she’s likely to learn more—and feel more positive about it—than\n> someone who doesn’t explore. Good software allows people to try something\n> unfamiliar, back out, and try something else, all without stress.\n>\n> <cite>\n>   -Jenifer Tidwell, Designing Interfaces, (O’Reilly Media, 2011), 9.\n> </cite>\n\n#### Pre-configured kits and workflows\n\nOther options for starter content are pre-configured kits and workflows.\nPre-configured kits containing code and API credentials can offer a fast path to\ngetting started.\n\nStarter content can also take the form of pre-configured workflows, where the\nconfiguration of services is automated, saving users from the tedium of a long\nsetup process.\n\n#### Considerations for starter content\n\n- Requires upfront planning with the full product team to determine workflow\n  pre-configurations that would most benefit users.\n- If your starter content can be deleted by your user, you will need a basic\n  empty state as a back up.\n\n## Accessibility\n\nAs most empty state illustrations are considered decorative, they should be\nskipped by screen readers.\n\nA decorative image is one that does not serve any practical or informational\npurpose, and is included to fill a visual void. Do not include any informational\ncontent in your decorative image.\n\n[Web Content Accessibility Guidelines](https://www.w3.org/WAI/tutorials/images/decorative/)\nrequire that decorative images are given either an empty `alt` tag or their\n`role` is assigned `presentation`. As an empty `alt` tag is more widely\nsupported, we recommend you align with the WCAG guidance and avoid assigning\n`role` to `presentation` until support is more ubiquitous.\n\n## Related\n\n<Row>\n<Column colSm={2} colMd={2} colLg={4}>\n\n#### Components\n\n- [Button](/components/button/usage)\n- [Data table](/components/data-table/usage)\n- [Tile](/components/tile/usage)\n\n</Column>\n<Column colSm={2} colMd={2} colLg={4}>\n\n#### Patterns\n\n- Error states (future)\n- Onboarding (future)\n\n</Column>\n</Row>\n\n## References\n\n- Jakob Nielsen,\n  [Error Message Guidelines](https://www.nngroup.com/articles/error-message-guidelines/)\n  (Nielsen Norman Group, 2001)\n- Jakob Nielsen and Page Labuheimer,\n  [Top 10 Application-Design Mistakes](https://www.nngroup.com/articles/top-10-application-design-mistakes/)\n  (Nielsen Norman Group, 2019)\n- Jenifer Tidwell, Designing Interfaces (O’Reilly Media, 2nd edition, 2011)\n- [Web Content Accessibility Guidelines](https://www.w3.org/WAI/standards-guidelines/wcag/)\n  (W3C, 2018)\n- Kathryn Whitenton,\n  [3 Guidelines for Search Engine \"No Results\" Pages](https://www.nngroup.com/articles/search-no-results-serp/)\n  (Nielsen Norman Group, 2014)\n\n## Feedback\n\nHelp us improve this pattern by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","fileAbsolutePath":"/Users/jvernon/Documents/Design System/carbon/carbon-website/src/pages/patterns/empty-states-pattern/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2368708353","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","711213475","768070550"]}
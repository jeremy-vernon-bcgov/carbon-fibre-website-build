{"componentChunkName":"component---src-pages-patterns-forms-pattern-index-mdx","path":"/patterns/forms-pattern/","result":{"pageContext":{"frontmatter":{"title":"Forms","description":"A form is a group of related input controls that allow users to provide data or configure options."},"relativePagePath":"/patterns/forms-pattern/index.mdx","titleType":"prepend","MdxNode":{"id":"226851aa-2624-5df2-adca-c1b4079555d3","children":[],"parent":"58932f3e-d1a5-5fc0-9d1a-054819a72c2c","internal":{"content":"---\ntitle: Forms\ndescription:\n  A form is a group of related input controls that allow users to provide data\n  or configure options.\n---\n\n<PageDescription>\n\nA form is a group of related input controls that allows users to provide data or\nconfigure options. Forms can be simple or complex, and may be presented as\ndedicated pages, side panels, or dialogs depending on the use case and the\nsituation.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Building a form</AnchorLink>\n  <AnchorLink>Behavior</AnchorLink>\n  <AnchorLink>Designing a form</AnchorLink>\n  <AnchorLink>Variants</AnchorLink>\n  <AnchorLink>Accessibility</AnchorLink>\n  <AnchorLink>Related</AnchorLink>\n  <AnchorLink>References</AnchorLink>\n  <AnchorLink>Feedback</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\n### When to use\n\nForms are incredibly common in user interfaces and their design and usage\ncontinues to evolve as input methods get smarter and more and more people use\nmobile and tablet devices. You might design a form for a user to:\n\n- Sign up for / log into an account\n- Register for a service\n- Reconfigure settings, (e.g. enabling notifications)\n- Take a survey\n- Purchase a product\n- Provide feedback\n\n### Respect the user\n\nForms are meant to gather information and guide people with as little fuss as\npossible. To allow users to scan and complete the form quickly, forms should:\n\n- Respect the user’s GDPR and other privacy regulations by only asking for\n  information that is absolutely necessary.\n- Group related tasks under section titles to provide more context and make the\n  interface easier to scan.\n- Follow a logical, predictable order—e.g first name first, last name second.\n- Allow users to stay with a single interaction method for as long as possible\n  (i.e. do not make users shift from keyboard to mouse numerous times in a\n  single form).\n- When designing be mindful of password managers and browser capabilities that\n  populate data for users.\n- Progressively disclose additional inputs only as they become relevant; see the\n  [Designing for longer forms](#designing-for-longer-forms) section below.\n\n### Anatomy of a form\n\nForms are comprised of some or all of the following elements.\n\n<Row>\n<Column colLg={8}>\n\n![Basic form with anatomy callouts](/images/Elements.png)\n\n</Column>\n</Row>\n\n1. **Labels:** Input labels helps users understand what the corresponding inputs\n   mean.\n1. **Text inputs:** Enable users to input free-form text.\n1. **Data inputs:** Information can be entered through a variety of non-free\n   form input fields as well, (e.g. checkboxes, radio buttons, dropdowns and\n   selects, file uploader, date pickers, toggles, etc.) Visit the individual\n   component pages for in depth details of their specific states and visuals.\n1. **Help:** Provides in-context guidance like tooltips, placeholder text, or\n   helper text, to assist the user in providing the right information.\n1. **Buttons:** Allows users to submit or exit a form.\n\n## Building a form\n\n### Labels\n\nConcise labels for text and data inputs help users understand what information\nis being requested of them.\n\n- Use sentence-style capitalization for all text elements, except for product\n  names and proper nouns. Sentence-style means only the first word of each\n  sentence is capitalized.\n- Although they may be formatted differently, all input components need labels.\n- Labels should clearly state the required input.\n- Do not use colons after label names.\n- Labels are not helper text; be succinct. Use one to three words only.\n\n<Row>\n<Column colLg={8}>\n\n![Example of labels](/images/labels.png)\n\n</Column>\n</Row>\n\n#### Top-aligned labels\n\nTop-aligned labels are Carbon’s default (vs. left-aligned labels) and the only\nlabel arrangement currently offered. Top-aligned labels provide a consistent\nleft edge, a close proximity between label and input, and are good for\nscannability and quick form completion.\n\nAdvantages:\n\n- Top-alignment enables quick completion.\n- The label length has room to extend or vary, (e.g. other languages).\n- When users are entering familiar content and are less likely to make data\n  entry errors, top-alignment is ideal.\n- This arrangement is best when fewer form fields need to be presented.\n\n#### Optional vs. mandatory\n\nAll fields in a form are assumed required, with optional fields being tagged as\nso in the label. An excess of optional fields should be avoided. If it's\nnecessary to have a large number of optional fields, we recommend devoting an\nentire section to optional fields to avoid excessive repetition.\n\n<Row>\n<Column colLg={8}>\n\n![Example of input field with optional label](/images/optional_v_mandatory.png)\n\n</Column>\n</Row>\n\n### Text inputs\n\nFree-form text inputs are the most commonly used components in forms.\n\n![Example of text input types](/images/Text_inputs.png)\n\n<br />\n\n<Title> Deciding what to use </Title>\n\n| Control                                                                                            | Usage                                            | Context                                                                 |\n| -------------------------------------------------------------------------------------------------- | ------------------------------------------------ | ----------------------------------------------------------------------- |\n| [Text input](/components/text-input/usage)                                                         | To capture several words maximum                 | Names; phone numbers; addresses                                         |\n| [Password](http://react.carbondesignsystem.com/?path=/story/textinput--toggle-password-visibility) | To collect private data by hiding the characters | Passwords, Social Security Numbers (SSN), PINs, credit card information |\n| [Text area](http://react.carbondesignsystem.com/?path=/story/textarea--default)                    | To capture multiple lines of text                | Feedback; support requests                                              |\n\n#### Best practices\n\n- The field widths should reflect the intended length of the content while still\n  aligning to the responsive column or mini unit grid.\n- Make sure users can enter their information at smaller screen sizes.\n- Truncate when an input is too long to be fully displayed in the field.\n- Pre-populate known values when possible, e.g. a default IP address.\n- The first required input field in a form should receive focus on presentation\n  to a user.\n\n### Data inputs\n\nThese controls enable users to provide input on forms by selecting from a set of\npre-determined options or a limited range of values. Carbon provides a variety\nof data input components that enable a user to make a selection. Each component\nwas created to serve a specific use case.\n\n#### Selection controls\n\nSelection controls offer users a selection from pre-determined options. When\ndesigning, consider how many options you need to present as well as how many\nitems the user may need to select. These considerations will determine which\ncomponent to use. Common selection controls include: checkboxes, radio buttons,\nfile uploaders, toggles, and select lists (combo box and multiselect).\n\n![Example of selection controls](/images/Selection_controls.png)\n\n<br />\n\n<Title> Deciding what to use </Title>\n\n| Control                                                                              | Usage                                                                    | Context                                                                  |\n| ------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ | ------------------------------------------------------------------------ |\n| [Checkbox](/components/checkbox/usage)                                               | To select or deselect one or more choices                                | Agree to terms and conditions, add optional items, select all that apply |\n| [Radio button](/components/radio-button/usage)                                       | To select only one option from two or more choices                       | Pick type, shipping method, etc.                                         |\n| [Toggle](/components/toggle/usage)                                                   | To choose one of two or more binary options                              | Changing user settings; On/off; Show/hide                                |\n| [File uploader](/components/file-uploader/usage)                                     | To upload/attach a file or multiple files to a form                      | Attaching SSl certificates; adding config files to support tickets       |\n| [Combo box](http://react.carbondesignsystem.com/?path=/story/combobox--default)      | To select a single item (with typeahead functionality from a longer list | Choosing a state, country, or language preference                        |\n| [Multiselect](http://react.carbondesignsystem.com/?path=/story/multiselect--default) | To select multiple items from a longer list                              | Add a product example for MultiSelect                                    |\n\n#### Radio buttons:\n\n- Pre-select a default option for the user; if the user selects a different\n  option the default is deselected.\n- For null options, provide a radio button with the label “None”.\n\n#### Radio buttons and checkboxes:\n\n- Radio buttons and checkbox item text falls to the right of their controls.\n- When possible, arrange the checkbox and radio button groups vertically for\n  better scannability.\n\n#### Toggles:\n\n- Always label toggles with the affected attribute due to accessibility\n  constraints; color cannot be the only indicator.\n- A standalone toggle or a checkbox can be used for a single option that a user\n  can turn on or off.\n- Toggles are very common controls in instantly updating forms, where submission\n  is not required.\n\n#### Select lists:\n\n- When you have more than five options to present to the user, use a select list\n  (combo box or multiselect), not a checkbox or a radio button.\n\n#### Bound entry controls\n\nBound entry controls allow users to input numeric data, like dates and times\n(e.g. number input, date picker, and slider components). They restrict user\ninput and rely equally on keyboard and mouse interactions. They only allow valid\nentries, so field validation isn’t needed.\n\n![Example of bound entry controls](/images/Bound_entry_controls.png)\n\n<br />\n\n<Title> Deciding what to use </Title>\n\n| Control                                                                             | Usage                                                                   | Context                                            |\n| ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------- | -------------------------------------------------- |\n| [Number input](/components/number-input/usage)                                      | To increase or decrease incremental values                              | Order quantities                                   |\n| [Slider](/components/slider/usage)                                                  | To select one number from a numerical range                             | Percentages, volume, timelines, data visualization |\n| [Date picker](/components/date-picker/usage)                                        | To input/select a single localized date or a date range from a calendar | Scheduling trips, meetings, and events             |\n| [Time picker](http://react.carbondesignsystem.com/?path=/story/timepicker--default) | To input time in hours/minutes                                          | Scheduling meetings and travel times               |\n\n### Offering help\n\n#### Tooltips\n\nTooltips can be very useful for providing additional explanation to users that\nmay be unfamiliar with a particular form field. They can also offer rationale\nfor what may seem like an unusual request. However,\n[research suggests](https://www.nngroup.com/articles/tooltip-guidelines/) that\nusers should not have to dig around for a tooltip to access information that’s\nessential for the completion of their task.\n\nIn Carbon, we use the “i” icon instead of the “?” icon because it indicates\nadditional rather than essential information.\n\n<Row>\n<Column colLg={8}>\n\n![Tooltip appears on hover (desktop) and on click (tablet and mobile).](/images/Tooltip.png)\n\n<Caption>\n  Tooltip appears on hover (desktop) and on click (tablet and mobile).\n</Caption>\n\n</Column>\n</Row>\n\n#### Do:\n\n- Use tooltips with the outlined “i” (info) icon.\n- Use tooltips for explanatory or added information.\n- Tooltips are microcontent; keep them concise.\n\n#### Don’t:\n\n- Tooltips are not catchalls for content that doesn’t fit elsewhere; they must\n  be used intentionally and very sparingly.\n- Never house essential information in a tooltip.\n\n#### Helper text\n\nHelper text appears below the input label and assists the user to provide the\nright information. Helper text is always available, even when the field is\nfocused, that’s why it’s the correct choice for need-to-know information. For\ncontext or background information that is “nice to have”, use placeholder text\nor a tooltip.\n\n<Row>\n<Column colLg={8}>\n\n![Input field with helper text](/images/Help_text.png)\n\n</Column>\n</Row>\n\n#### Do:\n\n- Think of helper text as crucial information that is secondary to the input\n  label.\n- Keep helper text as short and specific as possible.\n- Only use helper text when truly necessary to avoid overloading the user.\n\n#### Don’t:\n\n- Never use helper text in place of field labels.\n- Helper text should not run longer than the input area.\n\n<Row>\n<Column colLg={8}>\n\n![Example of input field alignment](/images/Help_text_alignment.png)\n\n</Column>\n</Row>\n\nWhen fields appear side-by-side and one input has helper text while the other\none doesn’t; always top align the input fields, not the labels.\n\n#### Placeholder text\n\nPlaceholder text provides hints or examples of what to enter (e.g. YYYY-MM-DD).\nSince placeholder text disappears once the user begins to input data, it should\nnot contain crucial information. When the requested input may be unfamiliar to\nthe user or formatting is in question, use placeholder text.\n\n<Row>\n<Column colLg={8}>\n\n![Example of placeholder text](/images/Placeholder_text.png)\n\n</Column>\n</Row>\n\n#### Do:\n\n- Keep hints as short as possible and never overrun the input field.\n- Properly anonymize examples rather than using real values.\n\n#### Don’t:\n\n- Use placeholder text to communicate complex and lengthy requirements like\n  password requirements. Instead, use an infotip.\n- Provide placeholder text when it isn’t necessary.\n- Ever use placeholder text as a replacement for field labels.\n\n### Buttons\n\nUse a primary button for the main action, a secondary button for secondary\nactions like Cancel or Discard.\n\n#### Button alignment\n\nAlignment refers to whether the buttons are aligned to the right or the left of\nthe container or layout. Button alignment depends on the type of form that you\nare building. We’ll touch on alignment briefly here as it relates to the button\ncomponent and offer more detailed information about [form variations](#variants)\nbelow.\n\n#### Margins vs. full bleed\n\nIn side panels, dialogs, and any other forms within tiles, the button group\nshould span the width of the container and buttons should bleed to the bottom\nedge. If the button content is too long for this arrangement, stack buttons\nvertically (with primary button on the bottom) and maintain their margin and\npadding. See [button usage guidance](/components/button/usage) for more\ninformation.\n\n| Alignment     | Bleed | Use case                                                                                       |\n| ------------- | ----- | ---------------------------------------------------------------------------------------------- |\n| Left-aligned  | No    | Non-dialog, in-page forms                                                                      |\n| Right-aligned | No    | Multistep forms/wizards when the primary action implies a navigation step forward              |\n| Full-width    | Yes   | All forms that are presented in dialogs and side panels and in some cases, forms within a tile |\n\n#### Button emphasis\n\nEmphasis refers to the position of the primary button in relation to secondary\nand tertiary actions. When using multiple buttons, the primary button appears to\nthe right and any secondary buttons appear to the left.\n[Research](https://www.nngroup.com/articles/ok-cancel-or-cancel-ok/) has shown\nthat performance differences between secondary and primary button placement are\nnegligible, however maintaining consistency throughout a product, offering, or\nplatform is crucial. The Secondary / Primary button order (secondary to the left\nand primary to the right) is therefore our required guidance and should be\nfollowed at all times.\n\n<Row>\n<Column colLg={8}>\n\n![Example of dedicated page forms](/images/dedicated_pg_buttons.png)\n\n<Caption>Example of dedicated page forms</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![Dialog and side-panel forms](/images/dialog_and_panel_buttons.png)\n\n<Caption>Dialog and side-panel forms</Caption>\n\n</Column>\n</Row>\n\n#### Do not top-align buttons\n\nThere is a trend among product teams to pin buttons at the top of a\ndedicated-page form. We want to discourage this arrangement for several reasons.\n\nFirst, we should only be asking the user for essential input and we should\nelicit that information in a concise, deliberate way. So we should assume that\nthe user scrolls through the appropriate inputs before submitting a form.\n\nSecond, the dedicated page form is not a modal and does not prevent the user\nfrom accessing their previous workflow. A back button will be available to them\nas part of the breadcrumb at the top of the page, or via the progress indicator\ncomponent (if your form is part of a multistep flow). The browser back button is\nalso available. In short, back should never be an action on a secondary button.\nThe secondary button is usually reserved for cancelling the task.\n\nThird, and most important, the top-pinned buttons create a very awkward\nrelationship with the content when the user finishes the form and is ready to\nsubmit. If we feel it’s necessary to pursue pinned actions in the future, we\nshould look into a pinned footer or tray to contain button groups.\n\n<DoDontRow>\n<DoDont\ncaption=\"Do arrange primary and secondary buttons at the bottom of the form.\">\n\n![Do arrange primary and secondary buttons at the bottom of the form](./images/do_bottom_buttons.png)\n\n</DoDont>\n<DoDont\ntype=\"dont\"\ncaption=\"Do not top align primary and secondary action buttons in your layouts.\">\n\n![Do not top align primary and secondary action buttons in your layouts](./images/do_not_top_align_buttons.png)\n\n</DoDont>\n</DoDontRow>\n\n#### Naming actions\n\nAbstract terms like “Submit” give the user the impression that the form is\ngeneric. Although brevity is key in buttons, try to tell the user specifically\nwhat action your button will perform.\n\n<DoDontRow>\n<DoDont\ncaption=\"Do use task-specific language in your buttons.\">\n\n![Do use task-specific language in your buttons](./images/Content_do.png)\n\n</DoDont>\n<DoDont\ntype=\"dont\"\ncaption=\"Do not use vague language to describe an action.\">\n\n![Do not use vague language to describe an action](./images/Content_do_not.png)\n\n</DoDont>\n</DoDontRow>\n\n## Behavior\n\n### Errors and validation\n\nEffective and immediate error messaging can help the user to understand the\nproblem and how to fix it. First, inform the user what has happened, then\nprovide guidance on next steps or possible resolutions. Always present error\nstates on the form, and use inline errors whenever possible.\n\n#### Client-side validation\n\nWe recommend validating the user’s data before form submission. This type of\nreal-time, inline validation (a.k.a. client-side validation) should happen as\nsoon as the field loses focus. This will help to easily identify the elements\nthat need to be corrected.\n\nThe validation label below the field should be as informative as possible when\ndescribing the issue with the user’s data. For example, if password limitations\nrequire 16 characters, but the user inputs a password with only six characters,\nthe text should read something like, “Password must be at least 16 characters.”\n\nCommon user errors include:\n\n- Incorrectly formatting data\n- Leaving a mandatory field blank\n- Leaving a mandatory field incomplete\n\n<Row>\n<Column colLg={8}>\n\n![Example of client-side error message](/images/Inline_error_message.png)\n\n</Column>\n</Row>\n\n#### Server-side validation\n\nInline notifications come into play when server-side errors are involved, i.e.\nthe user tries to submit a form in its entirety and the page is reloaded with\nthe detected errors.\n\nIn these situations, use an inline notification as well as inline error\nmessaging wherever possible to help users make the fix. Inline error messages\nshould disappear when the form criteria is met.\n\n<Row>\n<Column colLg={8}>\n\n![Example of server-side](/images/server_side.gif)\n\n</Column>\n</Row>\n\n### Enabling and disabling buttons\n\n- For short forms that require server-side submission before returning errors,\n  we recommend disabling primary action buttons until all of the form’s\n  requirements are met.\n- For longer forms, do not disable primary action buttons because the error\n  messages and the primary action button may not be visible on the screen\n  simultaneously.\n- When a user submits a form, disable the primary action button to prevent\n  duplicate submissions.\n- If it’s going to take a while to process a form, communicate this to the user\n  with feedback messages and progress indicators (e.g. spinners or progress\n  bars).\n\n### In-line editing\n\nIn-line editing enables users to edit form text in situ instead of taking users\nto another page to edit their entry. This saves users from having to refresh the\nwhole form in order to make an edit.\n\nCarbon does not have consolidated guidance around inline editing. Since it’s\nsomething a lot of products approach in different ways, we’d like to offer more\nrobust, centralized guidance in the future.\n\n### Designing for longer forms\n\nProduct designers often ask about the appropriate length for web forms.\nUnfortunately, there’s no one-size-fits-all answer. Your audience and their\nintentions, along with the context of your product will determine the solution\nthat’s best for you. Here are several techniques to help make longer forms less\noverwhelming.\n\n#### Progressive disclosure\n\nUse progressive disclosure to reveal any additional content that may arise based\non the user’s previous selection. This kind of show/hide approach allows the\nuser to focus on relevant information while keeping workflows short.\n\n<Row>\n<Column colLg={8}>\n\n![Example of progressive disclosure](/images/progressive_disclosure.png)\n\n</Column>\n</Row>\n\n#### Accordion forms\n\nAccordion forms allow users to dynamically expose and hide sections of related\ninformation. Like progressive disclosure, accordion forms allow users to focus\non relevant information without having to navigate between pages. As a general\nrule, this technique should not be used in dialog forms.\n\n[Research suggests](https://www.lukew.com/ff/entry.asp?1190) that accordion\nforms can greatly enhance completion speed and page load times. However the same\nresearch also suggests that confusion can arise for users when it comes to\nprimary action buttons and whether they apply only to sections vs. the full\nform.\n\nThe IoT team has done some design explorations around accordion forms but more\ndesign iteration and user testing is needed before Carbon solidifies our\nguidance around this interaction. Keep an eye out for refined usage examples in\nthe future.\n\n#### Multistep forms\n\nA multistep form spreads form fields across multiple screens and incorporates a\n[progress indicator](/components/progress-indicator/usage) (vertical or\nhorizontal) to track a user’s status step by step. There should be a logical\nrelationship between the fields on each screen and a linear relationship between\nsections.\n\nThis approach is good for saving form progress along the journey and allows\nusers to return to a previous step to review their submissions.\n\n<Row>\n<Column colLg={8}>\n\n![A multistep form with a horizontally oriented progress indicator.](/images/horiztonal_prog_indicator.png)\n\n<Caption>\n  A multistep form with a horizontally oriented progress indicator.\n</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![A multistep form with a vertically oriented progress indicator.](/images/vertical_prog_indicator.png)\n\n<Caption>\n  A multistep form with a vertically oriented progress indicator.\n</Caption>\n\n</Column>\n</Row>\n\n## Designing a form\n\n### Layout\n\n#### Form headings\n\nHeadings describe the form. The heading should be the largest type size in the\nform hierarchy. IBM Product UI often uses the `$productive-heading-03` token for\nthis purpose if the form is within a container or a dialog. A larger type size\nshould be used if the form is the only element on the page. The title can also\nbe followed by a short descriptor.\n\n#### Group and section headings\n\nGroup headings describe a group of controls and fields within a form. Their size\nshould also be adjusted depending on context and form heading size (i.e. the\nchosen token should be larger than the field labels but obviously smaller than\nthe form heading). Inputs should be grouped to help users understand what is\nrequired of them in a logical way. Try to make the group heading short and\nprecise, but, you can add a short description of the group if necessary.\n\n### Spacing\n\nUsers will be confused if inputs are too close together. To ensure sufficient\nspacing between single form elements as well as groups of inputs, use margins,\nspacers, gutters, and key alignments to guide you. See the\n[2x Grid](/guidelines/2x-grid) for more information.\n\n#### Form context\n\nForms can appear as dedicated pages or within dialogs, tiles, or side panels.\nThe form’s context affects its layout and vertical spacing. As a general rule\ndedicated-page forms can handle more complexity. See [form variants](#variants)\nbelow for more detailed usage guidance.\n\nOn dedicated page forms, use the responsive grid to drive layout decisions.\nDialogs and side panel forms will revert to a box model so designers will use\nmini units to guide field widths. Consistency of alignments and geometries in\neither scenario is key.\n\nIndividual input fields default to a 40px height in product regardless of\ncontext. On dedicated-page forms, we recommend a 32px spacer between input\nfields. In contained forms, such as side panels or modals, designers can revert\nto 24px or even 16px between inputs.\n\n#### Separating inputs, actions and sections\n\nVertical spacing between form sections also depends on whether the form is a\ndedicated page or a container. Spacing between groups should be adjusted in\nrelationship to spacing between individual items. For instance, if vertical\nspacing between individual inputs is 24px consider a 32px spacer before the\nfirst input and between sections. If the former number is 32px, consider 40px\nfor the latter.\n\nAs a general rule, we recommend a 48px spacer between the last input and the\nbutton or button group. Again, this will vary in mobile and in certain contained\nforms.\n\n<Row>\n<Column colLg={8}>\n\n![Example of form spacing](/images/form_spacing.png)\n\n</Column>\n</Row>\n\n#### Rules\n\nDesigners often use rules to separate groups of information within forms. Carbon\ndoes not have consolidated guidance around rules within forms (i.e. width,\nthickness, vertical margins). We intend to provide more detailed guidance around\ntheir use in the future.\n\n### Columns\n\nBased on research from the\n[Nielsen Norman Group](https://www.nngroup.com/articles/web-form-design/),\nCarbon generally recommends single-column forms, simply because multicolumn\nforms are more prone to misinterpretation. However, when faced with larger\nscreen sizes and a lot of empty space, multicolumn forms may seem like a good\nidea. And in certain situations they are appropriate.\n\nIf you would like to create a multicolumn form, the number of columns should\ndepend on the number of input controls on the page, their relationship to one\nanother, and the screen size of the product window.\n\nAlways use common sense to group related fields horizontally. Two to three\ninputs on a single line will not cause problems if they logically belong\ntogether. Here are some examples:\n\n- [first name][mi] [last name]\n- [credit card number][expiration date] [security code]\n- [city][state/province] [zip code]\n\nAvoid overloading users with too much information, when a multistep form may be\na better choice.\n\n<DoDontRow>\n<DoDont\ncaption=\"Do consider multistep forms when faced with a lot of inputs.\">\n\n![Do consider multistep forms when faced with](images/do_multi_step_form.png)\n\n</DoDont>\n<DoDont\ntype=\"dont\"\ncaption=\"Do not overload the user with too many input controls at once, especially in modals.\">\n\n![Do not overload the user with too many input controls](images/do_not_columns.png)\n\n</DoDont>\n</DoDontRow>\n\n## Variants\n\nAs mentioned above, forms may be presented as dedicated pages, side panels, or\ndialogs depending on the use case and the situation.\n\n<Title> Deciding what to use </Title>\n\n| Form variant   | Usage                                                                                                   | Context\\*                                                                   |\n| -------------- | ------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------- |\n| Dedicated page | For more complex, lengthier or multistep requests for user input                                        | Creating a new service, such as provisioning; more complex order forms etc. |\n| Dialog         | For critical, infrequent requests for user input often related to editing and management tasks          | User permissions; upgrading a service                                       |\n| Side panel     | For repeated requests for user input which require the user needs to reference the affected information | Calibrating row information in a data table                                 |\n\n<Caption>\n  * We are looking for more input from product teams here. Please connect with\n  us about your use cases.\n</Caption>\n\n#### Dialog forms:\n\n- Use a dialog form when dealing with less than five inputs.\n- Do not hide information in accordions or tabs.\n- A [dialog pattern](/patterns/dialog-pattern) with more detailed guidance will\n  be released shortly.\n\n#### Side panel forms:\n\n- Use a side panel form when dealing with more than five inputs.\n- Do not hide information in accordions or tabs.\n\n## Accessibility\n\nWhen constructing a form, first refer to the specific accessibility guidance for\neach component used. Every text input should have a descriptive and visible\nlabel, along with hard coded instructions for input format. A form must be\nwrapped in a `<form>` element.\n\nRequirements for your form should be announced and declared before the user\nenters the form.\n\nThe most significant challenge facing visually impaired users is form ordering.\nYour form should be tab-navigable, and required fields should be clearly labeled\nas such.\n\nValidation messages should be included to advise the user of data that is input\nincorrectly or a required field that is missing information.\n\nHelper text (`label`) should be used to provide instructions to help users\nunderstand how to complete the form fields as well as indicate any required and\noptional input, data formats, and other relevant information.\n\nSee the [WCAG website](https://www.w3.org/WAI/tutorials/forms/instructions/) for\nin-depth accessibility guidance for each form element.\n\n## Related\n\n<Row>\n<Column colSm={2} colMd={2} colLg={3}>\n\n#### Components\n\n- [Button](/components/button/usage) <br/>\n- [Checkbox](/components/checkbox/usage) <br/>\n- [Combo box](http://react.carbondesignsystem.com/?path=/story/combobox--default)\n  <br />\n- [Multiselect](http://react.carbondesignsystem.com/?path=/story/multiselect--default)\n  <br />\n- [Password input](http://react.carbondesignsystem.com/?path=/story/textinput--toggle-password-visibility)\n  <br />\n- [Radio button](/components/radio-button/usage) <br/>\n- [Text area](http://react.carbondesignsystem.com/?path=/story/textarea--default)\n  <br />\n- [Text input](/components/text-input/usage) <br/>\n- [Toggle](/components/toggle/usage) <br/>\n\n</Column>\n<Column colSm={2} colMd={2} colLg={3}>\n\n#### Patterns\n\n- [Dialogs](/patterns/dialog-pattern) <br/>\n- [Notifications](/patterns/notification-pattern) <br/>\n\n</Column>\n</Row>\n\n## References\n\n- Alita Joyce,\n  [Tooltip Guidelines](https://www.nngroup.com/articles/tooltip-guidelines/),\n  (Nielsen Norman Group, 2019)\n- Jakob Nielsen,\n  [OK-Cancel or Cancel-OK? The Trouble With Buttons](https://www.nngroup.com/articles/ok-cancel-or-cancel-ok/),\n  (Nielsen Norman Group, 2008)\n- Kathryn Whitenton,\n  [Website Forms Usability: Top 10 Recommendations](https://www.nngroup.com/articles/web-form-design/),\n  (Nielsen Norman Group, 2016)\n- Luke Wroblewski,\n  [Testing Accordion Forms](https://www.lukew.com/ff/entry.asp?1190), (A List\n  Apart, 2010)\n\n### Further reading\n\n- Andrew Coyle,\n  [Design Better Forms](https://uxdesign.cc/design-better-forms-96fadca0f49c),\n  (UX Collective, 2016)\n- Hoa Loranger,\n  [Form Design Quick Fix: Group Form Elements Effectively Using White Space](https://www.nngroup.com/articles/form-design-white-space/),\n  Nielsen Norman Group, 2013)\n- Marieke McCloskey,\n  [Accordions Are Not Always the Answer for Complex Content on Desktops](https://www.nngroup.com/articles/accordions-complex-content/),\n  Nielsen Norman Group, 2014)\n\n## Feedback\n\nHelp us improve this pattern by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","type":"Mdx","contentDigest":"050377af3e1f92ebf686c9909eb22bce","counter":2985,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Forms","description":"A form is a group of related input controls that allow users to provide data or configure options."},"exports":{},"rawBody":"---\ntitle: Forms\ndescription:\n  A form is a group of related input controls that allow users to provide data\n  or configure options.\n---\n\n<PageDescription>\n\nA form is a group of related input controls that allows users to provide data or\nconfigure options. Forms can be simple or complex, and may be presented as\ndedicated pages, side panels, or dialogs depending on the use case and the\nsituation.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Building a form</AnchorLink>\n  <AnchorLink>Behavior</AnchorLink>\n  <AnchorLink>Designing a form</AnchorLink>\n  <AnchorLink>Variants</AnchorLink>\n  <AnchorLink>Accessibility</AnchorLink>\n  <AnchorLink>Related</AnchorLink>\n  <AnchorLink>References</AnchorLink>\n  <AnchorLink>Feedback</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\n### When to use\n\nForms are incredibly common in user interfaces and their design and usage\ncontinues to evolve as input methods get smarter and more and more people use\nmobile and tablet devices. You might design a form for a user to:\n\n- Sign up for / log into an account\n- Register for a service\n- Reconfigure settings, (e.g. enabling notifications)\n- Take a survey\n- Purchase a product\n- Provide feedback\n\n### Respect the user\n\nForms are meant to gather information and guide people with as little fuss as\npossible. To allow users to scan and complete the form quickly, forms should:\n\n- Respect the user’s GDPR and other privacy regulations by only asking for\n  information that is absolutely necessary.\n- Group related tasks under section titles to provide more context and make the\n  interface easier to scan.\n- Follow a logical, predictable order—e.g first name first, last name second.\n- Allow users to stay with a single interaction method for as long as possible\n  (i.e. do not make users shift from keyboard to mouse numerous times in a\n  single form).\n- When designing be mindful of password managers and browser capabilities that\n  populate data for users.\n- Progressively disclose additional inputs only as they become relevant; see the\n  [Designing for longer forms](#designing-for-longer-forms) section below.\n\n### Anatomy of a form\n\nForms are comprised of some or all of the following elements.\n\n<Row>\n<Column colLg={8}>\n\n![Basic form with anatomy callouts](/images/Elements.png)\n\n</Column>\n</Row>\n\n1. **Labels:** Input labels helps users understand what the corresponding inputs\n   mean.\n1. **Text inputs:** Enable users to input free-form text.\n1. **Data inputs:** Information can be entered through a variety of non-free\n   form input fields as well, (e.g. checkboxes, radio buttons, dropdowns and\n   selects, file uploader, date pickers, toggles, etc.) Visit the individual\n   component pages for in depth details of their specific states and visuals.\n1. **Help:** Provides in-context guidance like tooltips, placeholder text, or\n   helper text, to assist the user in providing the right information.\n1. **Buttons:** Allows users to submit or exit a form.\n\n## Building a form\n\n### Labels\n\nConcise labels for text and data inputs help users understand what information\nis being requested of them.\n\n- Use sentence-style capitalization for all text elements, except for product\n  names and proper nouns. Sentence-style means only the first word of each\n  sentence is capitalized.\n- Although they may be formatted differently, all input components need labels.\n- Labels should clearly state the required input.\n- Do not use colons after label names.\n- Labels are not helper text; be succinct. Use one to three words only.\n\n<Row>\n<Column colLg={8}>\n\n![Example of labels](/images/labels.png)\n\n</Column>\n</Row>\n\n#### Top-aligned labels\n\nTop-aligned labels are Carbon’s default (vs. left-aligned labels) and the only\nlabel arrangement currently offered. Top-aligned labels provide a consistent\nleft edge, a close proximity between label and input, and are good for\nscannability and quick form completion.\n\nAdvantages:\n\n- Top-alignment enables quick completion.\n- The label length has room to extend or vary, (e.g. other languages).\n- When users are entering familiar content and are less likely to make data\n  entry errors, top-alignment is ideal.\n- This arrangement is best when fewer form fields need to be presented.\n\n#### Optional vs. mandatory\n\nAll fields in a form are assumed required, with optional fields being tagged as\nso in the label. An excess of optional fields should be avoided. If it's\nnecessary to have a large number of optional fields, we recommend devoting an\nentire section to optional fields to avoid excessive repetition.\n\n<Row>\n<Column colLg={8}>\n\n![Example of input field with optional label](/images/optional_v_mandatory.png)\n\n</Column>\n</Row>\n\n### Text inputs\n\nFree-form text inputs are the most commonly used components in forms.\n\n![Example of text input types](/images/Text_inputs.png)\n\n<br />\n\n<Title> Deciding what to use </Title>\n\n| Control                                                                                            | Usage                                            | Context                                                                 |\n| -------------------------------------------------------------------------------------------------- | ------------------------------------------------ | ----------------------------------------------------------------------- |\n| [Text input](/components/text-input/usage)                                                         | To capture several words maximum                 | Names; phone numbers; addresses                                         |\n| [Password](http://react.carbondesignsystem.com/?path=/story/textinput--toggle-password-visibility) | To collect private data by hiding the characters | Passwords, Social Security Numbers (SSN), PINs, credit card information |\n| [Text area](http://react.carbondesignsystem.com/?path=/story/textarea--default)                    | To capture multiple lines of text                | Feedback; support requests                                              |\n\n#### Best practices\n\n- The field widths should reflect the intended length of the content while still\n  aligning to the responsive column or mini unit grid.\n- Make sure users can enter their information at smaller screen sizes.\n- Truncate when an input is too long to be fully displayed in the field.\n- Pre-populate known values when possible, e.g. a default IP address.\n- The first required input field in a form should receive focus on presentation\n  to a user.\n\n### Data inputs\n\nThese controls enable users to provide input on forms by selecting from a set of\npre-determined options or a limited range of values. Carbon provides a variety\nof data input components that enable a user to make a selection. Each component\nwas created to serve a specific use case.\n\n#### Selection controls\n\nSelection controls offer users a selection from pre-determined options. When\ndesigning, consider how many options you need to present as well as how many\nitems the user may need to select. These considerations will determine which\ncomponent to use. Common selection controls include: checkboxes, radio buttons,\nfile uploaders, toggles, and select lists (combo box and multiselect).\n\n![Example of selection controls](/images/Selection_controls.png)\n\n<br />\n\n<Title> Deciding what to use </Title>\n\n| Control                                                                              | Usage                                                                    | Context                                                                  |\n| ------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ | ------------------------------------------------------------------------ |\n| [Checkbox](/components/checkbox/usage)                                               | To select or deselect one or more choices                                | Agree to terms and conditions, add optional items, select all that apply |\n| [Radio button](/components/radio-button/usage)                                       | To select only one option from two or more choices                       | Pick type, shipping method, etc.                                         |\n| [Toggle](/components/toggle/usage)                                                   | To choose one of two or more binary options                              | Changing user settings; On/off; Show/hide                                |\n| [File uploader](/components/file-uploader/usage)                                     | To upload/attach a file or multiple files to a form                      | Attaching SSl certificates; adding config files to support tickets       |\n| [Combo box](http://react.carbondesignsystem.com/?path=/story/combobox--default)      | To select a single item (with typeahead functionality from a longer list | Choosing a state, country, or language preference                        |\n| [Multiselect](http://react.carbondesignsystem.com/?path=/story/multiselect--default) | To select multiple items from a longer list                              | Add a product example for MultiSelect                                    |\n\n#### Radio buttons:\n\n- Pre-select a default option for the user; if the user selects a different\n  option the default is deselected.\n- For null options, provide a radio button with the label “None”.\n\n#### Radio buttons and checkboxes:\n\n- Radio buttons and checkbox item text falls to the right of their controls.\n- When possible, arrange the checkbox and radio button groups vertically for\n  better scannability.\n\n#### Toggles:\n\n- Always label toggles with the affected attribute due to accessibility\n  constraints; color cannot be the only indicator.\n- A standalone toggle or a checkbox can be used for a single option that a user\n  can turn on or off.\n- Toggles are very common controls in instantly updating forms, where submission\n  is not required.\n\n#### Select lists:\n\n- When you have more than five options to present to the user, use a select list\n  (combo box or multiselect), not a checkbox or a radio button.\n\n#### Bound entry controls\n\nBound entry controls allow users to input numeric data, like dates and times\n(e.g. number input, date picker, and slider components). They restrict user\ninput and rely equally on keyboard and mouse interactions. They only allow valid\nentries, so field validation isn’t needed.\n\n![Example of bound entry controls](/images/Bound_entry_controls.png)\n\n<br />\n\n<Title> Deciding what to use </Title>\n\n| Control                                                                             | Usage                                                                   | Context                                            |\n| ----------------------------------------------------------------------------------- | ----------------------------------------------------------------------- | -------------------------------------------------- |\n| [Number input](/components/number-input/usage)                                      | To increase or decrease incremental values                              | Order quantities                                   |\n| [Slider](/components/slider/usage)                                                  | To select one number from a numerical range                             | Percentages, volume, timelines, data visualization |\n| [Date picker](/components/date-picker/usage)                                        | To input/select a single localized date or a date range from a calendar | Scheduling trips, meetings, and events             |\n| [Time picker](http://react.carbondesignsystem.com/?path=/story/timepicker--default) | To input time in hours/minutes                                          | Scheduling meetings and travel times               |\n\n### Offering help\n\n#### Tooltips\n\nTooltips can be very useful for providing additional explanation to users that\nmay be unfamiliar with a particular form field. They can also offer rationale\nfor what may seem like an unusual request. However,\n[research suggests](https://www.nngroup.com/articles/tooltip-guidelines/) that\nusers should not have to dig around for a tooltip to access information that’s\nessential for the completion of their task.\n\nIn Carbon, we use the “i” icon instead of the “?” icon because it indicates\nadditional rather than essential information.\n\n<Row>\n<Column colLg={8}>\n\n![Tooltip appears on hover (desktop) and on click (tablet and mobile).](/images/Tooltip.png)\n\n<Caption>\n  Tooltip appears on hover (desktop) and on click (tablet and mobile).\n</Caption>\n\n</Column>\n</Row>\n\n#### Do:\n\n- Use tooltips with the outlined “i” (info) icon.\n- Use tooltips for explanatory or added information.\n- Tooltips are microcontent; keep them concise.\n\n#### Don’t:\n\n- Tooltips are not catchalls for content that doesn’t fit elsewhere; they must\n  be used intentionally and very sparingly.\n- Never house essential information in a tooltip.\n\n#### Helper text\n\nHelper text appears below the input label and assists the user to provide the\nright information. Helper text is always available, even when the field is\nfocused, that’s why it’s the correct choice for need-to-know information. For\ncontext or background information that is “nice to have”, use placeholder text\nor a tooltip.\n\n<Row>\n<Column colLg={8}>\n\n![Input field with helper text](/images/Help_text.png)\n\n</Column>\n</Row>\n\n#### Do:\n\n- Think of helper text as crucial information that is secondary to the input\n  label.\n- Keep helper text as short and specific as possible.\n- Only use helper text when truly necessary to avoid overloading the user.\n\n#### Don’t:\n\n- Never use helper text in place of field labels.\n- Helper text should not run longer than the input area.\n\n<Row>\n<Column colLg={8}>\n\n![Example of input field alignment](/images/Help_text_alignment.png)\n\n</Column>\n</Row>\n\nWhen fields appear side-by-side and one input has helper text while the other\none doesn’t; always top align the input fields, not the labels.\n\n#### Placeholder text\n\nPlaceholder text provides hints or examples of what to enter (e.g. YYYY-MM-DD).\nSince placeholder text disappears once the user begins to input data, it should\nnot contain crucial information. When the requested input may be unfamiliar to\nthe user or formatting is in question, use placeholder text.\n\n<Row>\n<Column colLg={8}>\n\n![Example of placeholder text](/images/Placeholder_text.png)\n\n</Column>\n</Row>\n\n#### Do:\n\n- Keep hints as short as possible and never overrun the input field.\n- Properly anonymize examples rather than using real values.\n\n#### Don’t:\n\n- Use placeholder text to communicate complex and lengthy requirements like\n  password requirements. Instead, use an infotip.\n- Provide placeholder text when it isn’t necessary.\n- Ever use placeholder text as a replacement for field labels.\n\n### Buttons\n\nUse a primary button for the main action, a secondary button for secondary\nactions like Cancel or Discard.\n\n#### Button alignment\n\nAlignment refers to whether the buttons are aligned to the right or the left of\nthe container or layout. Button alignment depends on the type of form that you\nare building. We’ll touch on alignment briefly here as it relates to the button\ncomponent and offer more detailed information about [form variations](#variants)\nbelow.\n\n#### Margins vs. full bleed\n\nIn side panels, dialogs, and any other forms within tiles, the button group\nshould span the width of the container and buttons should bleed to the bottom\nedge. If the button content is too long for this arrangement, stack buttons\nvertically (with primary button on the bottom) and maintain their margin and\npadding. See [button usage guidance](/components/button/usage) for more\ninformation.\n\n| Alignment     | Bleed | Use case                                                                                       |\n| ------------- | ----- | ---------------------------------------------------------------------------------------------- |\n| Left-aligned  | No    | Non-dialog, in-page forms                                                                      |\n| Right-aligned | No    | Multistep forms/wizards when the primary action implies a navigation step forward              |\n| Full-width    | Yes   | All forms that are presented in dialogs and side panels and in some cases, forms within a tile |\n\n#### Button emphasis\n\nEmphasis refers to the position of the primary button in relation to secondary\nand tertiary actions. When using multiple buttons, the primary button appears to\nthe right and any secondary buttons appear to the left.\n[Research](https://www.nngroup.com/articles/ok-cancel-or-cancel-ok/) has shown\nthat performance differences between secondary and primary button placement are\nnegligible, however maintaining consistency throughout a product, offering, or\nplatform is crucial. The Secondary / Primary button order (secondary to the left\nand primary to the right) is therefore our required guidance and should be\nfollowed at all times.\n\n<Row>\n<Column colLg={8}>\n\n![Example of dedicated page forms](/images/dedicated_pg_buttons.png)\n\n<Caption>Example of dedicated page forms</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![Dialog and side-panel forms](/images/dialog_and_panel_buttons.png)\n\n<Caption>Dialog and side-panel forms</Caption>\n\n</Column>\n</Row>\n\n#### Do not top-align buttons\n\nThere is a trend among product teams to pin buttons at the top of a\ndedicated-page form. We want to discourage this arrangement for several reasons.\n\nFirst, we should only be asking the user for essential input and we should\nelicit that information in a concise, deliberate way. So we should assume that\nthe user scrolls through the appropriate inputs before submitting a form.\n\nSecond, the dedicated page form is not a modal and does not prevent the user\nfrom accessing their previous workflow. A back button will be available to them\nas part of the breadcrumb at the top of the page, or via the progress indicator\ncomponent (if your form is part of a multistep flow). The browser back button is\nalso available. In short, back should never be an action on a secondary button.\nThe secondary button is usually reserved for cancelling the task.\n\nThird, and most important, the top-pinned buttons create a very awkward\nrelationship with the content when the user finishes the form and is ready to\nsubmit. If we feel it’s necessary to pursue pinned actions in the future, we\nshould look into a pinned footer or tray to contain button groups.\n\n<DoDontRow>\n<DoDont\ncaption=\"Do arrange primary and secondary buttons at the bottom of the form.\">\n\n![Do arrange primary and secondary buttons at the bottom of the form](./images/do_bottom_buttons.png)\n\n</DoDont>\n<DoDont\ntype=\"dont\"\ncaption=\"Do not top align primary and secondary action buttons in your layouts.\">\n\n![Do not top align primary and secondary action buttons in your layouts](./images/do_not_top_align_buttons.png)\n\n</DoDont>\n</DoDontRow>\n\n#### Naming actions\n\nAbstract terms like “Submit” give the user the impression that the form is\ngeneric. Although brevity is key in buttons, try to tell the user specifically\nwhat action your button will perform.\n\n<DoDontRow>\n<DoDont\ncaption=\"Do use task-specific language in your buttons.\">\n\n![Do use task-specific language in your buttons](./images/Content_do.png)\n\n</DoDont>\n<DoDont\ntype=\"dont\"\ncaption=\"Do not use vague language to describe an action.\">\n\n![Do not use vague language to describe an action](./images/Content_do_not.png)\n\n</DoDont>\n</DoDontRow>\n\n## Behavior\n\n### Errors and validation\n\nEffective and immediate error messaging can help the user to understand the\nproblem and how to fix it. First, inform the user what has happened, then\nprovide guidance on next steps or possible resolutions. Always present error\nstates on the form, and use inline errors whenever possible.\n\n#### Client-side validation\n\nWe recommend validating the user’s data before form submission. This type of\nreal-time, inline validation (a.k.a. client-side validation) should happen as\nsoon as the field loses focus. This will help to easily identify the elements\nthat need to be corrected.\n\nThe validation label below the field should be as informative as possible when\ndescribing the issue with the user’s data. For example, if password limitations\nrequire 16 characters, but the user inputs a password with only six characters,\nthe text should read something like, “Password must be at least 16 characters.”\n\nCommon user errors include:\n\n- Incorrectly formatting data\n- Leaving a mandatory field blank\n- Leaving a mandatory field incomplete\n\n<Row>\n<Column colLg={8}>\n\n![Example of client-side error message](/images/Inline_error_message.png)\n\n</Column>\n</Row>\n\n#### Server-side validation\n\nInline notifications come into play when server-side errors are involved, i.e.\nthe user tries to submit a form in its entirety and the page is reloaded with\nthe detected errors.\n\nIn these situations, use an inline notification as well as inline error\nmessaging wherever possible to help users make the fix. Inline error messages\nshould disappear when the form criteria is met.\n\n<Row>\n<Column colLg={8}>\n\n![Example of server-side](/images/server_side.gif)\n\n</Column>\n</Row>\n\n### Enabling and disabling buttons\n\n- For short forms that require server-side submission before returning errors,\n  we recommend disabling primary action buttons until all of the form’s\n  requirements are met.\n- For longer forms, do not disable primary action buttons because the error\n  messages and the primary action button may not be visible on the screen\n  simultaneously.\n- When a user submits a form, disable the primary action button to prevent\n  duplicate submissions.\n- If it’s going to take a while to process a form, communicate this to the user\n  with feedback messages and progress indicators (e.g. spinners or progress\n  bars).\n\n### In-line editing\n\nIn-line editing enables users to edit form text in situ instead of taking users\nto another page to edit their entry. This saves users from having to refresh the\nwhole form in order to make an edit.\n\nCarbon does not have consolidated guidance around inline editing. Since it’s\nsomething a lot of products approach in different ways, we’d like to offer more\nrobust, centralized guidance in the future.\n\n### Designing for longer forms\n\nProduct designers often ask about the appropriate length for web forms.\nUnfortunately, there’s no one-size-fits-all answer. Your audience and their\nintentions, along with the context of your product will determine the solution\nthat’s best for you. Here are several techniques to help make longer forms less\noverwhelming.\n\n#### Progressive disclosure\n\nUse progressive disclosure to reveal any additional content that may arise based\non the user’s previous selection. This kind of show/hide approach allows the\nuser to focus on relevant information while keeping workflows short.\n\n<Row>\n<Column colLg={8}>\n\n![Example of progressive disclosure](/images/progressive_disclosure.png)\n\n</Column>\n</Row>\n\n#### Accordion forms\n\nAccordion forms allow users to dynamically expose and hide sections of related\ninformation. Like progressive disclosure, accordion forms allow users to focus\non relevant information without having to navigate between pages. As a general\nrule, this technique should not be used in dialog forms.\n\n[Research suggests](https://www.lukew.com/ff/entry.asp?1190) that accordion\nforms can greatly enhance completion speed and page load times. However the same\nresearch also suggests that confusion can arise for users when it comes to\nprimary action buttons and whether they apply only to sections vs. the full\nform.\n\nThe IoT team has done some design explorations around accordion forms but more\ndesign iteration and user testing is needed before Carbon solidifies our\nguidance around this interaction. Keep an eye out for refined usage examples in\nthe future.\n\n#### Multistep forms\n\nA multistep form spreads form fields across multiple screens and incorporates a\n[progress indicator](/components/progress-indicator/usage) (vertical or\nhorizontal) to track a user’s status step by step. There should be a logical\nrelationship between the fields on each screen and a linear relationship between\nsections.\n\nThis approach is good for saving form progress along the journey and allows\nusers to return to a previous step to review their submissions.\n\n<Row>\n<Column colLg={8}>\n\n![A multistep form with a horizontally oriented progress indicator.](/images/horiztonal_prog_indicator.png)\n\n<Caption>\n  A multistep form with a horizontally oriented progress indicator.\n</Caption>\n\n</Column>\n</Row>\n\n<Row>\n<Column colLg={8}>\n\n![A multistep form with a vertically oriented progress indicator.](/images/vertical_prog_indicator.png)\n\n<Caption>\n  A multistep form with a vertically oriented progress indicator.\n</Caption>\n\n</Column>\n</Row>\n\n## Designing a form\n\n### Layout\n\n#### Form headings\n\nHeadings describe the form. The heading should be the largest type size in the\nform hierarchy. IBM Product UI often uses the `$productive-heading-03` token for\nthis purpose if the form is within a container or a dialog. A larger type size\nshould be used if the form is the only element on the page. The title can also\nbe followed by a short descriptor.\n\n#### Group and section headings\n\nGroup headings describe a group of controls and fields within a form. Their size\nshould also be adjusted depending on context and form heading size (i.e. the\nchosen token should be larger than the field labels but obviously smaller than\nthe form heading). Inputs should be grouped to help users understand what is\nrequired of them in a logical way. Try to make the group heading short and\nprecise, but, you can add a short description of the group if necessary.\n\n### Spacing\n\nUsers will be confused if inputs are too close together. To ensure sufficient\nspacing between single form elements as well as groups of inputs, use margins,\nspacers, gutters, and key alignments to guide you. See the\n[2x Grid](/guidelines/2x-grid) for more information.\n\n#### Form context\n\nForms can appear as dedicated pages or within dialogs, tiles, or side panels.\nThe form’s context affects its layout and vertical spacing. As a general rule\ndedicated-page forms can handle more complexity. See [form variants](#variants)\nbelow for more detailed usage guidance.\n\nOn dedicated page forms, use the responsive grid to drive layout decisions.\nDialogs and side panel forms will revert to a box model so designers will use\nmini units to guide field widths. Consistency of alignments and geometries in\neither scenario is key.\n\nIndividual input fields default to a 40px height in product regardless of\ncontext. On dedicated-page forms, we recommend a 32px spacer between input\nfields. In contained forms, such as side panels or modals, designers can revert\nto 24px or even 16px between inputs.\n\n#### Separating inputs, actions and sections\n\nVertical spacing between form sections also depends on whether the form is a\ndedicated page or a container. Spacing between groups should be adjusted in\nrelationship to spacing between individual items. For instance, if vertical\nspacing between individual inputs is 24px consider a 32px spacer before the\nfirst input and between sections. If the former number is 32px, consider 40px\nfor the latter.\n\nAs a general rule, we recommend a 48px spacer between the last input and the\nbutton or button group. Again, this will vary in mobile and in certain contained\nforms.\n\n<Row>\n<Column colLg={8}>\n\n![Example of form spacing](/images/form_spacing.png)\n\n</Column>\n</Row>\n\n#### Rules\n\nDesigners often use rules to separate groups of information within forms. Carbon\ndoes not have consolidated guidance around rules within forms (i.e. width,\nthickness, vertical margins). We intend to provide more detailed guidance around\ntheir use in the future.\n\n### Columns\n\nBased on research from the\n[Nielsen Norman Group](https://www.nngroup.com/articles/web-form-design/),\nCarbon generally recommends single-column forms, simply because multicolumn\nforms are more prone to misinterpretation. However, when faced with larger\nscreen sizes and a lot of empty space, multicolumn forms may seem like a good\nidea. And in certain situations they are appropriate.\n\nIf you would like to create a multicolumn form, the number of columns should\ndepend on the number of input controls on the page, their relationship to one\nanother, and the screen size of the product window.\n\nAlways use common sense to group related fields horizontally. Two to three\ninputs on a single line will not cause problems if they logically belong\ntogether. Here are some examples:\n\n- [first name][mi] [last name]\n- [credit card number][expiration date] [security code]\n- [city][state/province] [zip code]\n\nAvoid overloading users with too much information, when a multistep form may be\na better choice.\n\n<DoDontRow>\n<DoDont\ncaption=\"Do consider multistep forms when faced with a lot of inputs.\">\n\n![Do consider multistep forms when faced with](images/do_multi_step_form.png)\n\n</DoDont>\n<DoDont\ntype=\"dont\"\ncaption=\"Do not overload the user with too many input controls at once, especially in modals.\">\n\n![Do not overload the user with too many input controls](images/do_not_columns.png)\n\n</DoDont>\n</DoDontRow>\n\n## Variants\n\nAs mentioned above, forms may be presented as dedicated pages, side panels, or\ndialogs depending on the use case and the situation.\n\n<Title> Deciding what to use </Title>\n\n| Form variant   | Usage                                                                                                   | Context\\*                                                                   |\n| -------------- | ------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------- |\n| Dedicated page | For more complex, lengthier or multistep requests for user input                                        | Creating a new service, such as provisioning; more complex order forms etc. |\n| Dialog         | For critical, infrequent requests for user input often related to editing and management tasks          | User permissions; upgrading a service                                       |\n| Side panel     | For repeated requests for user input which require the user needs to reference the affected information | Calibrating row information in a data table                                 |\n\n<Caption>\n  * We are looking for more input from product teams here. Please connect with\n  us about your use cases.\n</Caption>\n\n#### Dialog forms:\n\n- Use a dialog form when dealing with less than five inputs.\n- Do not hide information in accordions or tabs.\n- A [dialog pattern](/patterns/dialog-pattern) with more detailed guidance will\n  be released shortly.\n\n#### Side panel forms:\n\n- Use a side panel form when dealing with more than five inputs.\n- Do not hide information in accordions or tabs.\n\n## Accessibility\n\nWhen constructing a form, first refer to the specific accessibility guidance for\neach component used. Every text input should have a descriptive and visible\nlabel, along with hard coded instructions for input format. A form must be\nwrapped in a `<form>` element.\n\nRequirements for your form should be announced and declared before the user\nenters the form.\n\nThe most significant challenge facing visually impaired users is form ordering.\nYour form should be tab-navigable, and required fields should be clearly labeled\nas such.\n\nValidation messages should be included to advise the user of data that is input\nincorrectly or a required field that is missing information.\n\nHelper text (`label`) should be used to provide instructions to help users\nunderstand how to complete the form fields as well as indicate any required and\noptional input, data formats, and other relevant information.\n\nSee the [WCAG website](https://www.w3.org/WAI/tutorials/forms/instructions/) for\nin-depth accessibility guidance for each form element.\n\n## Related\n\n<Row>\n<Column colSm={2} colMd={2} colLg={3}>\n\n#### Components\n\n- [Button](/components/button/usage) <br/>\n- [Checkbox](/components/checkbox/usage) <br/>\n- [Combo box](http://react.carbondesignsystem.com/?path=/story/combobox--default)\n  <br />\n- [Multiselect](http://react.carbondesignsystem.com/?path=/story/multiselect--default)\n  <br />\n- [Password input](http://react.carbondesignsystem.com/?path=/story/textinput--toggle-password-visibility)\n  <br />\n- [Radio button](/components/radio-button/usage) <br/>\n- [Text area](http://react.carbondesignsystem.com/?path=/story/textarea--default)\n  <br />\n- [Text input](/components/text-input/usage) <br/>\n- [Toggle](/components/toggle/usage) <br/>\n\n</Column>\n<Column colSm={2} colMd={2} colLg={3}>\n\n#### Patterns\n\n- [Dialogs](/patterns/dialog-pattern) <br/>\n- [Notifications](/patterns/notification-pattern) <br/>\n\n</Column>\n</Row>\n\n## References\n\n- Alita Joyce,\n  [Tooltip Guidelines](https://www.nngroup.com/articles/tooltip-guidelines/),\n  (Nielsen Norman Group, 2019)\n- Jakob Nielsen,\n  [OK-Cancel or Cancel-OK? The Trouble With Buttons](https://www.nngroup.com/articles/ok-cancel-or-cancel-ok/),\n  (Nielsen Norman Group, 2008)\n- Kathryn Whitenton,\n  [Website Forms Usability: Top 10 Recommendations](https://www.nngroup.com/articles/web-form-design/),\n  (Nielsen Norman Group, 2016)\n- Luke Wroblewski,\n  [Testing Accordion Forms](https://www.lukew.com/ff/entry.asp?1190), (A List\n  Apart, 2010)\n\n### Further reading\n\n- Andrew Coyle,\n  [Design Better Forms](https://uxdesign.cc/design-better-forms-96fadca0f49c),\n  (UX Collective, 2016)\n- Hoa Loranger,\n  [Form Design Quick Fix: Group Form Elements Effectively Using White Space](https://www.nngroup.com/articles/form-design-white-space/),\n  Nielsen Norman Group, 2013)\n- Marieke McCloskey,\n  [Accordions Are Not Always the Answer for Complex Content on Desktops](https://www.nngroup.com/articles/accordions-complex-content/),\n  Nielsen Norman Group, 2014)\n\n## Feedback\n\nHelp us improve this pattern by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","fileAbsolutePath":"/Users/jvernon/Documents/Design System/carbon/carbon-website/src/pages/patterns/forms-pattern/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2368708353","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","711213475","768070550"]}
{"componentChunkName":"component---src-pages-patterns-notification-pattern-index-mdx","path":"/patterns/notification-pattern/","result":{"pageContext":{"frontmatter":{"title":"Notifications","description":"Notifications are an important method of communicating with users and providing feedback."},"relativePagePath":"/patterns/notification-pattern/index.mdx","titleType":"prepend","MdxNode":{"id":"7641fc95-45e8-5c61-82e3-6c3a56d3a6c8","children":[],"parent":"53c7b6a7-a81c-58f4-a9d8-fa4024da4d17","internal":{"content":"---\ntitle: Notifications\ndescription:\n  Notifications are an important method of communicating with users and\n  providing feedback.\n---\n\n<PageDescription>\n\nNotifications are an important method of communicating with users and providing\nfeedback. They range from granular, inline responses to user actions to\nsystem-wide messages.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Designing with notifications</AnchorLink>\n<AnchorLink>Notification status</AnchorLink>\n<AnchorLink>Notification types</AnchorLink>\n<AnchorLink>Considerations when designing</AnchorLink>\n<AnchorLink>Accessibility</AnchorLink>\n<AnchorLink>Related components and patterns</AnchorLink>\n<AnchorLink>References</AnchorLink>\n<AnchorLink>Feedback</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\nIt’s important to keep users informed and send notifications when there is an\nupdate or status change they should be aware of. Users should always be given\nappropriate and timely messages to help them understand whether they are moving\ntowards their goal. Ensure your notifications are relevant, timely, and\ninformative.\n\n| Key principle | Definition                                                                                              |\n| ------------- | ------------------------------------------------------------------------------------------------------- |\n| Relevant      | Notifications should be related to the user’s goals and presented in the context of what they are doing |\n| Timely        | Ensure users are kept up to date with prompt notifications and see critical notifications immediately   |\n| Informative   | Provide users with the context and next steps needed to understand and address the notification         |\n\nBe considerate of your users when sending a notification. Notifications that are\ntoo frequent or disruptive create negative experiences and drive users from\nplatforms.\n\nNotifications are comprised of status and type. Their status signifies the\npurpose of the information being conveyed. Notification types allow you to\ntailor the disruptiveness of the notification to the specific situation.\nNotification status and type options in Carbon should be combined to create\nnotifications that are relevant, timely, and informative for each use case.\n\n<Row>\n<Column colSm={2} colMd={2} colLg={4}>\n\n#### Notification status\n\n- Informational\n- Success\n- Warning\n- Error\n\n</Column>\n<Column colSm={2} colMd={2} colLg={4}>\n\n#### Notification type\n\n- Inline\n- Toast\n- Banner\n- Notification panel\n- Modal\n\n</Column>\n</Row>\n\n## Designing with notifications\n\n### When to use\n\nUse notifications to inform users of important status changes and updates.\nTransparency is a core element of building user trust and is the first of Jakob\nNielsen’s\n[10 usability heuristics](https://www.nngroup.com/articles/ten-usability-heuristics/).\nThey should be relevant to the user and as minimally disruptive as possible.\nThere are two major use cases for notifications: task-generated and\nsystem-generated.\n\n#### Task-generated notifications\n\nTask-generated notifications are initiated in response to user action during a\nspecific task. They give users direct, immediate feedback. They should be placed\nin the region of the page the user is working in and be related to the user’s\naction.\n\nYou might send a task-generated notification when:\n\n- A form is successfully submitted\n- There is a problem uploading a file\n- Credentials can’t be found\n\n#### System-generated notifications\n\nThese notifications are initiated by the application or system, independent of\nuser action. They provide updates on background system status or out-of-context\nevents that have finished.\n\nYou might send a system-generated notification when:\n\n- A user loses network connection\n- Planned system maintenance is coming soon\n- A new report is ready\n- The user’s login session is about to expire\n\n### When not to use\n\nOnly send notifications where necessary. Confine each notification to the\nportion of the interface and workflow it is relevant to. Being interrupted\ncreates a frustrating and discouraging experience for users, so this should be\nlimited as much as possible. Additionally, frequent distractions\n[lower productivity](https://link.springer.com/chapter/10.1007/978-1-4842-4221-6_9#Sec22)\nand can lead to [alert fatigue](https://psnet.ahrq.gov/primer/alert-fatigue).\n\n## Notification status\n\nNotification status helps convey the information being communicated. These\nstatuses correspond with a color and icon to provide a consistent, universal\nexperience for users.\n\n<Row>\n<Column colLg={12}>\n\n![Example of notification status](/images/1_notification_status_1120.png)\n\n<Caption>Notification status using the inline notification component</Caption>\n\n</Column>\n</Row>\n\n<br />\n\n<Title> Deciding what to use </Title>\n\n| Status        | Usage                                                                                                                        | Action                                                                                                         | Color  | Icon                 |\n| ------------- | ---------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------- | ------ | -------------------- |\n| Informational | Provide additional information to users that may not be tied to their current action or task                                 | Do not require immediate action and can be dismissed on a timer or persist, depending on the content           | Blue   | `information filled` |\n| Success       | Confirm a task was completed as expected                                                                                     | Typically do not require further action and can be dismissed automatically or persist in a nonintrusive manner | Green  | `checkmark filled`   |\n| Warning       | Inform users that they are taking actions that are not desirable or might have unexpected results                            | Often persist until the user dismisses the notification or continues in their task                             | Yellow | `warning filled`     |\n| Error         | Inform users of an error or critical failure and optionally block the user from proceeding until the issue has been resolved | Always persist until the user dismisses them or resolves error                                                 | Red    | `error filled`       |\n\n## Notification types\n\n<Row>\n<Column colLg={12}>\n\n![Examples of basic notification types](/images/2_Notification_types_1120.png)\n\n</Column>\n</Row>\n\n<br />\n\n<Title> Deciding what to use </Title>\n\n| Type               | Usage                                                                                                             | Duration and interaction                                                                                                                         |\n| ------------------ | ----------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Inline             | Provide users with nondisruptive feedback or the status of an action                                              | Persist until the message is resolved or dismissed by user and may include a ghost button action                                                 |\n| Toast              | Short, time-based messages that slide in and out of a page and provide nondisruptive information                  | Disappear automatically or can be dismissed by user                                                                                              |\n| Banner             | System or product level notifications that are not specific to a task                                             | Persist until dismissed by user and may include a ghost button or link                                                                           |\n| Notification panel | Notification center that provides users with system-generated messages                                            | Opened and closed by user                                                                                                                        |\n| Modal              | Highly disruptive notifications that provide users with critical information that needs their attention or action | Persist and block tasks until dismissed by user. Modals allow more user action than other notifications and can include other Carbon components. |\n\n### Inline notification\n\n[Inline notifications](https://www.carbondesignsystem.com/components/notification/usage/)\nare nondisruptive and confined to a specific area in the UI. Inline\nnotifications display both task-generated and system-generated messages and\npersist until they are dismissed by the user or the notification is resolved.\nThey are frequently used in conjunction with field-level messages for errors in\nforms or other input areas.\n\nCarbon offers low-contrast and high-contrast inline notifications. All inline\nnotifications use a color that corresponds with their message intent and can\nalso be accompanied by an icon to reinforce the message intent.\n\n#### Best practices:\n\n- Place inline notifications near their related items.\n- In forms, inline notifications can be placed either at the top or bottom.\n- Keep the message under two lines.\n- Do not cover other content with inline notifications.\n- The notification width varies based on the context and page layout.\n- Be descriptive and give users clear next steps.\n\n<Row>\n<Column colLg={8}>\n\n![Inline notification in a product](/images/3_Inline_736.png)\n\n<Caption>Low-contrast inline notification</Caption>\n\n</Column>\n</Row>\n\n### Toast\n\n[Toasts](https://www.carbondesignsystem.com/components/notification/usage/) are\nnotifications that slide in and out, typically in the top right of the page.\nThey are more disruptive than inline notifications and are best used with\nsystem-generated messages that do not correspond to a specific section of the\nUI. Toasts disappear automatically after a set amount of time but can also be\ndismissed by the user.\n\nCarbon toasts can be either low-contrast or high-contrast. Their color should\ncorrespond with the message intent and they can also use an icon to convey the\nmessage intent.\n\n#### Long messages\n\nRemoving the timestamp provides space for a third line of content for longer\ntoast messages. Toasts are intended to be at-a-glance messages confined to a\nsmall region of the screen so their messages should not exceed three lines.\n\nIf it is possible a toast will have a message longer than three lines, include a\nshort message with a \"View more\" link that takes the user to a view of the full\nnotification message. This can be either a full page with more details or a\nmodal.\n\n#### Best practices:\n\n- Multiple toasts stack horizontally, with the newest appearing at the top of\n  the list.\n- Keep messages clear and concise\n- Toasts dismiss after five seconds.\n- The timestamp is optional and can be removed.\n- Toast notifications have a fixed width and should not be expanded to fit the\n  content area.\n\n<Row>\n<Column colLg={8}>\n\n![Toast notification in a product](/images/4_Toast_736.png)\n\n<Caption>Low-contrast toast notification</Caption>\n\n</Column>\n</Row>\n\n### Banner\n\nBanners take over the top of an interface to show general notifications for the\nproduct or system, not a specific task. They persist until they are dismissed by\nthe user. Banners can include a ghost button or link. Depending on the message,\nthe user resolving a product or system issue (for example, updating necessary\naccount information), may also dismiss the banner. Banners may also persist\nacross multiple sessions.\n\n#### Best practices:\n\n- Banners should be placed at the top of the content area they relate to.\n- Do not cover other content with a banner notification.\n- Place system-wide messages directly below the main header or navigation bar.\n- Banners are not sticky and should scroll with the other content on the page.\n- Only show one banner at a time.\n\nMore design iteration and user testing is needed before Carbon solidifies our\nguidance for banners and creates a banner component. Keep an eye out for refined\nusage examples in the future. If your team has developed a banner component,\nconsider contributing it to Carbon so that it can be made available to others.\n\n<Row>\n<Column colLg={8}>\n\n![Banner notification in a product](/images/5_Banner_736.png)\n\n<Caption>Low-contrast banner notification</Caption>\n\n</Column>\n</Row>\n\n### Notification panel\n\nNotification panels are helpful for users who receive a large number of\nsystem-generated notifications or may need to reference their notifications\nlater. They are used in conjunction with toasts to alert users of notifications\nas they come in.\n\nNotification panels ensure that users can access and read all notifications\nwithout cluttering the screen with many persistent notifications. They also\nprovide a consistent experience to users who need more time to read\nnotifications, use a screen reader, or prefer to limit the notifications they\nreceive.\n\nMore design iteration and user testing is needed before Carbon solidifies our\nguidance for notification panel and creates a notification panel component. Keep\nan eye out for refined usage examples in the future. If your team has developed\na notification panel component, consider contributing it to Carbon so that it\ncan be made available to others.\n\n#### Best practices:\n\n- Give users the ability to manage notification preferences.\n- Don’t send the same notification multiple times if users don’t interact with\n  it.\n- List notifications in chronological order.\n- Notifications can be grouped by source or urgency.\n\n<Row>\n<Column colLg={8}>\n\n![Notification panel in a product](/images/6_Panel_736.png)\n\n<Caption>Notification panel with the Gray 100 theme</Caption>\n\n</Column>\n</Row>\n\n### Modal\n\nModals interrupt the user and pause their current task. They are highly\ndisruptive to users and should be used sparingly. Only use a modal when the\nmessage is critical and needs the user’s immediate attention or action. Modals\npersist until users engage with them and only disappear when dismissed by the\nuser.\n\n#### Best practices:\n\n- Only display one modal notification at a time.\n- Use modals when you need to immediately interrupt a user’s task.\n- Give users clear steps to resolve and dismiss the notification.\n\n<Row>\n<Column colLg={8}>\n\n![Modal notification in a product](/images/7_Modal_736.png)\n\n<Caption>Danger modal notification</Caption>\n\n</Column>\n</Row>\n\n## Considerations when designing\n\n### Notification priority\n\nNotifications range in their priority and therefore should vary in their\ndisruptiveness to users. It is important to match the urgency and priority of\nthe information being communicated to the visual style and behavior of the\nnotification.\n\nCarbon offers two visual styles for inline and toast notifications. The\nhigh-contrast style is more visually disruptive and should be used for\nnotifications that are urgent or critical. The low-contrast style is better for\nsupplemental messaging or other low priority use cases. Toast and inline\nnotifications can use different styles, but you should never mix styles within\nthe variations.\n\n### User action\n\n#### Optional action\n\nNotifications can include a ghost button that lets users interact with them.\nTaking action on these notifications should be optional and should not block the\nuser from continuing with their current task. This action frequently takes users\nto a flow or page related to the message, where they can resolve the\nnotification. All notifications should be dismissed when users interact with\nthem.\n\n#### Required action\n\nSome notifications must block users from dismissing the notification or\ncontinuing with their task until the message has been addressed. This is common\nin forms when there are errors or empty input fields. Notifications that prevent\nusers from continuing should be relevant to the current task and provide the\nuser with the steps needed to resolve them or continue with their current task.\n\nBlocking users from continuing with a task is disruptive and hinders the overall\nexperience, so these notifications should only be used when it is critical the\nuser sees the notification or the user needs to take action right away.\n\n### Notification message\n\nIt’s important to consider the user’s context when writing notification\nmessages. Use language that is accessible to the user and that will be easily\nunderstood. Use a tone that is appropriate for the situation and notification.\n\nBecause task-generated notifications are sent in response to user action, it\nisn’t necessary to give users extensive background information. Conversely,\nsystem-generated notifications are generally not relevant to the user’s current\ntask so you should ensure the user has sufficient context to understand the\nnotification.\n\n<DoDontRow>\n  <DoDont\n    caption=\"Do use clear and concise language.\"\n    text=\"Success! Your resource has been created.\"\n    aspectRatio=\"1:1\"\n  />\n  <DoDont\n    type=\"dont\"\n    caption=\"Do not use technical jargon or language unfamiliar to the user.\"\n    text=\"503 Service Unavailable\"\n    aspectRatio=\"1:1\"\n  />\n</DoDontRow>\n<DoDontRow>\n  <DoDont\n    caption=\"Do ensure users know how to take action if it is necessary.\"\n    text=\"Script failed to run. Check the log for more detail.\"\n    aspectRatio=\"1:1\"\n  />\n  <DoDont\n    type=\"dont\"\n    caption=\"Do not leave users without next steps.\"\n    text=\"Instance was not created.\"\n    aspectRatio=\"1:1\"\n  />\n</DoDontRow>\n\n## Accessibility\n\n**Don’t use notifications that dismiss on a timer for critical or emergency\nmessages.** Some users with disabilities need more time to read or interact with\nmessages and timed toasts may not provide sufficient time.\n[WCAG 2.1 success criterion 2.2.4 (AAA)](https://www.w3.org/WAI/WCAG21/Understanding/no-timing.html)\n\n**Users should be able to manage or limit noncritical notifications.** This\ngives users the control to reduce the number of distractions or disruptions they\nreceive, which is particularly helpful for users with cognitive limitations.\n[WCAG 2.1 success criterion 2.2.3 (AAA)](https://www.w3.org/WAI/WCAG21/Understanding/interruptions.html)\n\n## Related components and patterns\n\n<Row>\n<Column colSm={2} colMd={2} colLg={4}>\n\n#### Components\n\n- [Modal](/components/modal/usage)\n- [Notification](/components/notification/usage)\n- [UI shell](/components/UI-shell-right-panel/usage)\n\n</Column>\n<Column colSm={2} colMd={2} colLg={4}>\n\n#### Patterns\n\n- [Dialogs](https://www.carbondesignsystem.com/patterns/dialog-pattern/)\n- Error states (future)\n- [Forms](/patterns/forms-pattern/)\n\n</Column>\n</Row>\n\nThe Error state pattern is currently being planned. If you would like to\ncontribute, please see our\n[guidelines for contributions](/contributing/pattern).\n\n## References\n\n- [Alert Fatigue](https://psnet.ahrq.gov/primer/alert-fatigue) (Patient Safety\n  Network, 2019)\n- [Aria Live Regions](https://www.w3.org/TR/wai-aria-1.1/#aria-live) (W3C, 2017)\n- Duncan P. Brumby, Christian P. Janssen, and Gloria Mark,\n  [How Do Interruptions Affect Productivity?](https://link.springer.com/chapter/10.1007/978-1-4842-4221-6_9)\n  (Rethinking Productivity in Software Engineering, 2019)\n- Kim Flaherty,\n  [Indicators, Validations, and Notifications](https://www.nngroup.com/articles/indicators-validations-notifications/)\n  (Nielsen Norman Group, 2015)\n- Aurora Harley,\n  [Visibility of System Status](https://www.nngroup.com/articles/visibility-system-status/)\n  (Nielsen Norman Group, 2018)\n- Jakob Nielsen,\n  [10 Usability Heuristics for User Interface Design](https://www.nngroup.com/articles/ten-usability-heuristics/)\n  (Nielsen Norman Group, 1994)\n- [Web Content Accessibility Guidelines](https://www.w3.org/WAI/standards-guidelines/wcag/)\n  (W3C, 2018)\n\n## Feedback\n\nHelp us improve this pattern by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","type":"Mdx","contentDigest":"fb0929dbb1bd87b837ef83c74859378c","counter":2981,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Notifications","description":"Notifications are an important method of communicating with users and providing feedback."},"exports":{},"rawBody":"---\ntitle: Notifications\ndescription:\n  Notifications are an important method of communicating with users and\n  providing feedback.\n---\n\n<PageDescription>\n\nNotifications are an important method of communicating with users and providing\nfeedback. They range from granular, inline responses to user actions to\nsystem-wide messages.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Designing with notifications</AnchorLink>\n<AnchorLink>Notification status</AnchorLink>\n<AnchorLink>Notification types</AnchorLink>\n<AnchorLink>Considerations when designing</AnchorLink>\n<AnchorLink>Accessibility</AnchorLink>\n<AnchorLink>Related components and patterns</AnchorLink>\n<AnchorLink>References</AnchorLink>\n<AnchorLink>Feedback</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\nIt’s important to keep users informed and send notifications when there is an\nupdate or status change they should be aware of. Users should always be given\nappropriate and timely messages to help them understand whether they are moving\ntowards their goal. Ensure your notifications are relevant, timely, and\ninformative.\n\n| Key principle | Definition                                                                                              |\n| ------------- | ------------------------------------------------------------------------------------------------------- |\n| Relevant      | Notifications should be related to the user’s goals and presented in the context of what they are doing |\n| Timely        | Ensure users are kept up to date with prompt notifications and see critical notifications immediately   |\n| Informative   | Provide users with the context and next steps needed to understand and address the notification         |\n\nBe considerate of your users when sending a notification. Notifications that are\ntoo frequent or disruptive create negative experiences and drive users from\nplatforms.\n\nNotifications are comprised of status and type. Their status signifies the\npurpose of the information being conveyed. Notification types allow you to\ntailor the disruptiveness of the notification to the specific situation.\nNotification status and type options in Carbon should be combined to create\nnotifications that are relevant, timely, and informative for each use case.\n\n<Row>\n<Column colSm={2} colMd={2} colLg={4}>\n\n#### Notification status\n\n- Informational\n- Success\n- Warning\n- Error\n\n</Column>\n<Column colSm={2} colMd={2} colLg={4}>\n\n#### Notification type\n\n- Inline\n- Toast\n- Banner\n- Notification panel\n- Modal\n\n</Column>\n</Row>\n\n## Designing with notifications\n\n### When to use\n\nUse notifications to inform users of important status changes and updates.\nTransparency is a core element of building user trust and is the first of Jakob\nNielsen’s\n[10 usability heuristics](https://www.nngroup.com/articles/ten-usability-heuristics/).\nThey should be relevant to the user and as minimally disruptive as possible.\nThere are two major use cases for notifications: task-generated and\nsystem-generated.\n\n#### Task-generated notifications\n\nTask-generated notifications are initiated in response to user action during a\nspecific task. They give users direct, immediate feedback. They should be placed\nin the region of the page the user is working in and be related to the user’s\naction.\n\nYou might send a task-generated notification when:\n\n- A form is successfully submitted\n- There is a problem uploading a file\n- Credentials can’t be found\n\n#### System-generated notifications\n\nThese notifications are initiated by the application or system, independent of\nuser action. They provide updates on background system status or out-of-context\nevents that have finished.\n\nYou might send a system-generated notification when:\n\n- A user loses network connection\n- Planned system maintenance is coming soon\n- A new report is ready\n- The user’s login session is about to expire\n\n### When not to use\n\nOnly send notifications where necessary. Confine each notification to the\nportion of the interface and workflow it is relevant to. Being interrupted\ncreates a frustrating and discouraging experience for users, so this should be\nlimited as much as possible. Additionally, frequent distractions\n[lower productivity](https://link.springer.com/chapter/10.1007/978-1-4842-4221-6_9#Sec22)\nand can lead to [alert fatigue](https://psnet.ahrq.gov/primer/alert-fatigue).\n\n## Notification status\n\nNotification status helps convey the information being communicated. These\nstatuses correspond with a color and icon to provide a consistent, universal\nexperience for users.\n\n<Row>\n<Column colLg={12}>\n\n![Example of notification status](/images/1_notification_status_1120.png)\n\n<Caption>Notification status using the inline notification component</Caption>\n\n</Column>\n</Row>\n\n<br />\n\n<Title> Deciding what to use </Title>\n\n| Status        | Usage                                                                                                                        | Action                                                                                                         | Color  | Icon                 |\n| ------------- | ---------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------- | ------ | -------------------- |\n| Informational | Provide additional information to users that may not be tied to their current action or task                                 | Do not require immediate action and can be dismissed on a timer or persist, depending on the content           | Blue   | `information filled` |\n| Success       | Confirm a task was completed as expected                                                                                     | Typically do not require further action and can be dismissed automatically or persist in a nonintrusive manner | Green  | `checkmark filled`   |\n| Warning       | Inform users that they are taking actions that are not desirable or might have unexpected results                            | Often persist until the user dismisses the notification or continues in their task                             | Yellow | `warning filled`     |\n| Error         | Inform users of an error or critical failure and optionally block the user from proceeding until the issue has been resolved | Always persist until the user dismisses them or resolves error                                                 | Red    | `error filled`       |\n\n## Notification types\n\n<Row>\n<Column colLg={12}>\n\n![Examples of basic notification types](/images/2_Notification_types_1120.png)\n\n</Column>\n</Row>\n\n<br />\n\n<Title> Deciding what to use </Title>\n\n| Type               | Usage                                                                                                             | Duration and interaction                                                                                                                         |\n| ------------------ | ----------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Inline             | Provide users with nondisruptive feedback or the status of an action                                              | Persist until the message is resolved or dismissed by user and may include a ghost button action                                                 |\n| Toast              | Short, time-based messages that slide in and out of a page and provide nondisruptive information                  | Disappear automatically or can be dismissed by user                                                                                              |\n| Banner             | System or product level notifications that are not specific to a task                                             | Persist until dismissed by user and may include a ghost button or link                                                                           |\n| Notification panel | Notification center that provides users with system-generated messages                                            | Opened and closed by user                                                                                                                        |\n| Modal              | Highly disruptive notifications that provide users with critical information that needs their attention or action | Persist and block tasks until dismissed by user. Modals allow more user action than other notifications and can include other Carbon components. |\n\n### Inline notification\n\n[Inline notifications](https://www.carbondesignsystem.com/components/notification/usage/)\nare nondisruptive and confined to a specific area in the UI. Inline\nnotifications display both task-generated and system-generated messages and\npersist until they are dismissed by the user or the notification is resolved.\nThey are frequently used in conjunction with field-level messages for errors in\nforms or other input areas.\n\nCarbon offers low-contrast and high-contrast inline notifications. All inline\nnotifications use a color that corresponds with their message intent and can\nalso be accompanied by an icon to reinforce the message intent.\n\n#### Best practices:\n\n- Place inline notifications near their related items.\n- In forms, inline notifications can be placed either at the top or bottom.\n- Keep the message under two lines.\n- Do not cover other content with inline notifications.\n- The notification width varies based on the context and page layout.\n- Be descriptive and give users clear next steps.\n\n<Row>\n<Column colLg={8}>\n\n![Inline notification in a product](/images/3_Inline_736.png)\n\n<Caption>Low-contrast inline notification</Caption>\n\n</Column>\n</Row>\n\n### Toast\n\n[Toasts](https://www.carbondesignsystem.com/components/notification/usage/) are\nnotifications that slide in and out, typically in the top right of the page.\nThey are more disruptive than inline notifications and are best used with\nsystem-generated messages that do not correspond to a specific section of the\nUI. Toasts disappear automatically after a set amount of time but can also be\ndismissed by the user.\n\nCarbon toasts can be either low-contrast or high-contrast. Their color should\ncorrespond with the message intent and they can also use an icon to convey the\nmessage intent.\n\n#### Long messages\n\nRemoving the timestamp provides space for a third line of content for longer\ntoast messages. Toasts are intended to be at-a-glance messages confined to a\nsmall region of the screen so their messages should not exceed three lines.\n\nIf it is possible a toast will have a message longer than three lines, include a\nshort message with a \"View more\" link that takes the user to a view of the full\nnotification message. This can be either a full page with more details or a\nmodal.\n\n#### Best practices:\n\n- Multiple toasts stack horizontally, with the newest appearing at the top of\n  the list.\n- Keep messages clear and concise\n- Toasts dismiss after five seconds.\n- The timestamp is optional and can be removed.\n- Toast notifications have a fixed width and should not be expanded to fit the\n  content area.\n\n<Row>\n<Column colLg={8}>\n\n![Toast notification in a product](/images/4_Toast_736.png)\n\n<Caption>Low-contrast toast notification</Caption>\n\n</Column>\n</Row>\n\n### Banner\n\nBanners take over the top of an interface to show general notifications for the\nproduct or system, not a specific task. They persist until they are dismissed by\nthe user. Banners can include a ghost button or link. Depending on the message,\nthe user resolving a product or system issue (for example, updating necessary\naccount information), may also dismiss the banner. Banners may also persist\nacross multiple sessions.\n\n#### Best practices:\n\n- Banners should be placed at the top of the content area they relate to.\n- Do not cover other content with a banner notification.\n- Place system-wide messages directly below the main header or navigation bar.\n- Banners are not sticky and should scroll with the other content on the page.\n- Only show one banner at a time.\n\nMore design iteration and user testing is needed before Carbon solidifies our\nguidance for banners and creates a banner component. Keep an eye out for refined\nusage examples in the future. If your team has developed a banner component,\nconsider contributing it to Carbon so that it can be made available to others.\n\n<Row>\n<Column colLg={8}>\n\n![Banner notification in a product](/images/5_Banner_736.png)\n\n<Caption>Low-contrast banner notification</Caption>\n\n</Column>\n</Row>\n\n### Notification panel\n\nNotification panels are helpful for users who receive a large number of\nsystem-generated notifications or may need to reference their notifications\nlater. They are used in conjunction with toasts to alert users of notifications\nas they come in.\n\nNotification panels ensure that users can access and read all notifications\nwithout cluttering the screen with many persistent notifications. They also\nprovide a consistent experience to users who need more time to read\nnotifications, use a screen reader, or prefer to limit the notifications they\nreceive.\n\nMore design iteration and user testing is needed before Carbon solidifies our\nguidance for notification panel and creates a notification panel component. Keep\nan eye out for refined usage examples in the future. If your team has developed\na notification panel component, consider contributing it to Carbon so that it\ncan be made available to others.\n\n#### Best practices:\n\n- Give users the ability to manage notification preferences.\n- Don’t send the same notification multiple times if users don’t interact with\n  it.\n- List notifications in chronological order.\n- Notifications can be grouped by source or urgency.\n\n<Row>\n<Column colLg={8}>\n\n![Notification panel in a product](/images/6_Panel_736.png)\n\n<Caption>Notification panel with the Gray 100 theme</Caption>\n\n</Column>\n</Row>\n\n### Modal\n\nModals interrupt the user and pause their current task. They are highly\ndisruptive to users and should be used sparingly. Only use a modal when the\nmessage is critical and needs the user’s immediate attention or action. Modals\npersist until users engage with them and only disappear when dismissed by the\nuser.\n\n#### Best practices:\n\n- Only display one modal notification at a time.\n- Use modals when you need to immediately interrupt a user’s task.\n- Give users clear steps to resolve and dismiss the notification.\n\n<Row>\n<Column colLg={8}>\n\n![Modal notification in a product](/images/7_Modal_736.png)\n\n<Caption>Danger modal notification</Caption>\n\n</Column>\n</Row>\n\n## Considerations when designing\n\n### Notification priority\n\nNotifications range in their priority and therefore should vary in their\ndisruptiveness to users. It is important to match the urgency and priority of\nthe information being communicated to the visual style and behavior of the\nnotification.\n\nCarbon offers two visual styles for inline and toast notifications. The\nhigh-contrast style is more visually disruptive and should be used for\nnotifications that are urgent or critical. The low-contrast style is better for\nsupplemental messaging or other low priority use cases. Toast and inline\nnotifications can use different styles, but you should never mix styles within\nthe variations.\n\n### User action\n\n#### Optional action\n\nNotifications can include a ghost button that lets users interact with them.\nTaking action on these notifications should be optional and should not block the\nuser from continuing with their current task. This action frequently takes users\nto a flow or page related to the message, where they can resolve the\nnotification. All notifications should be dismissed when users interact with\nthem.\n\n#### Required action\n\nSome notifications must block users from dismissing the notification or\ncontinuing with their task until the message has been addressed. This is common\nin forms when there are errors or empty input fields. Notifications that prevent\nusers from continuing should be relevant to the current task and provide the\nuser with the steps needed to resolve them or continue with their current task.\n\nBlocking users from continuing with a task is disruptive and hinders the overall\nexperience, so these notifications should only be used when it is critical the\nuser sees the notification or the user needs to take action right away.\n\n### Notification message\n\nIt’s important to consider the user’s context when writing notification\nmessages. Use language that is accessible to the user and that will be easily\nunderstood. Use a tone that is appropriate for the situation and notification.\n\nBecause task-generated notifications are sent in response to user action, it\nisn’t necessary to give users extensive background information. Conversely,\nsystem-generated notifications are generally not relevant to the user’s current\ntask so you should ensure the user has sufficient context to understand the\nnotification.\n\n<DoDontRow>\n  <DoDont\n    caption=\"Do use clear and concise language.\"\n    text=\"Success! Your resource has been created.\"\n    aspectRatio=\"1:1\"\n  />\n  <DoDont\n    type=\"dont\"\n    caption=\"Do not use technical jargon or language unfamiliar to the user.\"\n    text=\"503 Service Unavailable\"\n    aspectRatio=\"1:1\"\n  />\n</DoDontRow>\n<DoDontRow>\n  <DoDont\n    caption=\"Do ensure users know how to take action if it is necessary.\"\n    text=\"Script failed to run. Check the log for more detail.\"\n    aspectRatio=\"1:1\"\n  />\n  <DoDont\n    type=\"dont\"\n    caption=\"Do not leave users without next steps.\"\n    text=\"Instance was not created.\"\n    aspectRatio=\"1:1\"\n  />\n</DoDontRow>\n\n## Accessibility\n\n**Don’t use notifications that dismiss on a timer for critical or emergency\nmessages.** Some users with disabilities need more time to read or interact with\nmessages and timed toasts may not provide sufficient time.\n[WCAG 2.1 success criterion 2.2.4 (AAA)](https://www.w3.org/WAI/WCAG21/Understanding/no-timing.html)\n\n**Users should be able to manage or limit noncritical notifications.** This\ngives users the control to reduce the number of distractions or disruptions they\nreceive, which is particularly helpful for users with cognitive limitations.\n[WCAG 2.1 success criterion 2.2.3 (AAA)](https://www.w3.org/WAI/WCAG21/Understanding/interruptions.html)\n\n## Related components and patterns\n\n<Row>\n<Column colSm={2} colMd={2} colLg={4}>\n\n#### Components\n\n- [Modal](/components/modal/usage)\n- [Notification](/components/notification/usage)\n- [UI shell](/components/UI-shell-right-panel/usage)\n\n</Column>\n<Column colSm={2} colMd={2} colLg={4}>\n\n#### Patterns\n\n- [Dialogs](https://www.carbondesignsystem.com/patterns/dialog-pattern/)\n- Error states (future)\n- [Forms](/patterns/forms-pattern/)\n\n</Column>\n</Row>\n\nThe Error state pattern is currently being planned. If you would like to\ncontribute, please see our\n[guidelines for contributions](/contributing/pattern).\n\n## References\n\n- [Alert Fatigue](https://psnet.ahrq.gov/primer/alert-fatigue) (Patient Safety\n  Network, 2019)\n- [Aria Live Regions](https://www.w3.org/TR/wai-aria-1.1/#aria-live) (W3C, 2017)\n- Duncan P. Brumby, Christian P. Janssen, and Gloria Mark,\n  [How Do Interruptions Affect Productivity?](https://link.springer.com/chapter/10.1007/978-1-4842-4221-6_9)\n  (Rethinking Productivity in Software Engineering, 2019)\n- Kim Flaherty,\n  [Indicators, Validations, and Notifications](https://www.nngroup.com/articles/indicators-validations-notifications/)\n  (Nielsen Norman Group, 2015)\n- Aurora Harley,\n  [Visibility of System Status](https://www.nngroup.com/articles/visibility-system-status/)\n  (Nielsen Norman Group, 2018)\n- Jakob Nielsen,\n  [10 Usability Heuristics for User Interface Design](https://www.nngroup.com/articles/ten-usability-heuristics/)\n  (Nielsen Norman Group, 1994)\n- [Web Content Accessibility Guidelines](https://www.w3.org/WAI/standards-guidelines/wcag/)\n  (W3C, 2018)\n\n## Feedback\n\nHelp us improve this pattern by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","fileAbsolutePath":"/Users/jvernon/Documents/Design System/carbon/carbon-website/src/pages/patterns/notification-pattern/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2368708353","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","711213475","768070550"]}
{"componentChunkName":"component---src-pages-developing-react-tutorial-step-1-mdx","path":"/developing/react-tutorial/step-1/","result":{"pageContext":{"frontmatter":{"title":"1. Installing Carbon","description":"Welcome to Carbon! This tutorial will guide you in creating a React app with the Carbon Design System.","tabs":["Overview","Step 1","Step 2","Step 3","Step 4","Step 5","Wrapping up"]},"relativePagePath":"/developing/react-tutorial/step-1.mdx","titleType":"prepend","MdxNode":{"id":"ae861b71-1b47-58dd-90a4-5ac3bb35fde3","children":[],"parent":"135c502f-248f-5507-9ee0-9d3362a12c69","internal":{"content":"---\ntitle: 1. Installing Carbon\ndescription:\n  Welcome to Carbon! This tutorial will guide you in creating a React app with\n  the Carbon Design System.\ntabs:\n  ['Overview', 'Step 1', 'Step 2', 'Step 3', 'Step 4', 'Step 5', 'Wrapping up']\n---\n\nimport Preview from 'components/Preview';\n\n<PageDescription>\n\nStarting with Create React App, let's install Carbon and begin using Carbon\ncomponents. By the end you will have a React app that uses the UI Shell to\nnavigate between pages.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Fork, clone and branch</AnchorLink>\n<AnchorLink>Build and start</AnchorLink>\n<AnchorLink>Install Carbon</AnchorLink>\n<AnchorLink>Install and build Sass</AnchorLink>\n<AnchorLink>Add UI Shell</AnchorLink>\n<AnchorLink>Create pages</AnchorLink>\n<AnchorLink>Add routing</AnchorLink>\n<AnchorLink>Submit pull request</AnchorLink>\n\n</AnchorLinks>\n\n## Preview\n\nA [preview](https://react-step-2--carbon-tutorial.netlify.com) of what you will\nbuild:\n\n<Preview\n  height=\"200\"\n  title=\"Carbon Tutorial Step 1\"\n  src=\"https://react-step-2--carbon-tutorial.netlify.com\"\n  frameborder=\"no\"\n  allowtransparency=\"true\"\n  allowfullscreen=\"true\"\n/>\n\n## Fork, clone and branch\n\nThis tutorial has an accompanying GitHub repository called\n[carbon-tutorial](https://github.com/carbon-design-system/carbon-tutorial) that\nwe'll use as a starting point for each step.\n\n### Fork\n\nTo begin, fork\n[carbon-tutorial](https://github.com/carbon-design-system/carbon-tutorial) using\nyour GitHub account.\n\n### Clone\n\nGo to your forked repository, copy the SSH or HTTPS URL and in your terminal run\nthe two commands to get the repository in your local file system and enter that\ndirectory.\n\n```bash\ngit clone [your fork SSH/HTTPS]\ncd carbon-tutorial\n```\n\n### Add upstream remote\n\nAdd a remote called `upstream` so we can eventually submit a pull request once\nyou have completed this tutorial step.\n\n```bash\ngit remote add upstream git@github.com:carbon-design-system/carbon-tutorial.git\n```\n\nOr, if you prefer to use HTTPS instead of SSH with your remotes:\n\n```bash\ngit remote add upstream https://github.com/carbon-design-system/carbon-tutorial.git\n```\n\nVerify that your forked repository remotes are correct:\n\n```bash\ngit remote -v\n```\n\nYour terminal should output something like this:\n\n```bash\norigin\t[your forked repo] (fetch)\norigin\t[your forked repo] (push)\nupstream\tgit@github.com:carbon-design-system/carbon-tutorial.git (fetch)\nupstream\tgit@github.com:carbon-design-system/carbon-tutorial.git (push)\n```\n\n### Branch\n\nNow that we have our repository set up, let's check out the branch for this\ntutorial step's starting point. Run the two commands:\n\n```bash\ngit fetch upstream\ngit checkout -b react-step-1 upstream/react-step-1\n```\n\n## Build and start\n\nWe have the repository forked to your GitHub account, cloned down to your\nmachine, and the starting branch checked out. Next, install the React app's\ndependencies with:\n\n```bash\nyarn\n```\n\nAfter the dependencies are installed, you can start the app with:\n\n```bash\nyarn start\n```\n\nYour default browser should open up with an empty page that says:\n`Hello Carbon! Well, not quite yet. This is the starting point for the Carbon tutorial.`\n\n## Install Carbon\n\nEven though we installed existing dependencies, we've yet to install the Carbon\npackages.\n\n- `carbon-components` - component styles\n- `carbon-components-react` - React components\n- `@carbon/icons-react` - React icons\n\nStop your development server with `CTRL-C` and install Carbon dependencies with:\n\n```bash\nyarn add carbon-components@10.3.0 carbon-components-react@7.3.0 @carbon/icons-react@10.3.0 carbon-icons@7.0.7\n```\n\n## Install and build Sass\n\nWe need to run a Sass build as the Carbon styles are authored in Sass, so run\nthe following command to install `node-sass` as a dependency.\n\n```bash\nyarn add node-sass@4.12.0\n```\n\nTo avoid having to add the `~` prefix when importing SCSS files from\n`node_modules`, create a `.env` file at the project root that contains:\n\n```bash path=.env\nSASS_PATH=\"node_modules\"\n```\n\nFor the Windows operating system, use:\n\n```bash  path=.env\nSASS_PATH=./node_modules\n```\n\nThen, start the app again. If your app's currently running, you'll need to\nrestart it for the new environment variable to be used.\n\n```bash\nyarn start\n```\n\nThe app looks as it did before. Next, let's prepare our app for a Sass build.\n\nIn the `src` directory, rename `index.css` as `index.scss`. Then in `index.js`\nupdate the `index.css` import to `index.scss`.\n\n### Import carbon-component styles\n\nIn `index.scss`, import the Carbon styles by adding the following at the top of\nthe file:\n\n```scss path=src/index.scss\n@import 'carbon-components/scss/globals/scss/styles.scss';\n```\n\nMaking this change to `index.scss` will cause all of the Carbon Sass to\nre-compile. Once finished re-compiling the Carbon base styling is applied (IBM\nPlex Sans font family, font size, weight, colors, etc.)\n\nRe-compiling all of the Carbon Sass takes a while, even on fast systems. Let's\nspeed this up by moving our custom app Sass into a separate file, `app.scss` in\nthe 'src' directory, and import that from `App.js`.\n\n```javascript path=src/App.js\nimport './app.scss';\n```\n\nBy modifying `index.scss` as little as possible and storing all app-specific\nstyling in `app.scss` we will make compile times much quicker. Storing the\napp-specific styling in a separate file also makes good organizational sense.\n\nNext, we'll import a `Button` from Carbon to test that our dependencies are\nworking properly. At the top of `App.js`, import the `Button` by adding the\nfollowing:\n\n```javascript path=src/App.js\nimport { Button } from 'carbon-components-react';\n```\n\nIn the `App` component return, you can now replace:\n\n<!-- prettier-ignore-start -->\n```html path=src/App.js\n<div>\n  Hello Carbon! Well, not quite yet. This is the starting point for the Carbon tutorial.\n</div>\n```\n<!-- prettier-ignore-end -->\n\nwith:\n\n<!-- prettier-ignore-start -->\n```html path=src/App.js\n<Button>Button</Button>\n```\n<!-- prettier-ignore-end -->\n\nCongratulations, you've imported your first component! You should see a Carbon\nstyled button on the page.\n\n## Add UI Shell\n\n<InlineNotification>\n\n**Note:** The UI Shell has experimental status at the moment. We do not\nrecommend using it for production until it is stable, but if doing so, know that\nthere may be breaking changes in the future.\n\n</InlineNotification>\n\nNext, we're going to create a React component called `TutorialHeader` to use\nwith the UI Shell Carbon component. In the `src` directory, create a\n`components` directory and inside of that, a `TutorialHeader` directory. Create\nthe following files inside `src/components/TutorialHeader`:\n\n```bash\nsrc/components/TutorialHeader\n├──_tutorial-header.scss\n├──index.js\n└──TutorialHeader.js\n```\n\n### Add UI Shell Sass\n\nIn `index.scss` add the following feature-flag **above** the Carbon styles\nimport like so:\n\n```scss path=src/index.scss\n$feature-flags: (\n  ui-shell: true,\n);\n```\n\nThis is because our UI Shell is in experimental mode and the styles need to be\nmanually imported.\n\nNext, in `app.scss`, we'll import our `TutorialHeader` styles. Your file should\nnow look like this:\n\n```scss path=src/app.scss\n@import './components/TutorialHeader/tutorial-header.scss';\n```\n\n### Import and export the header\n\nIn `src/components/TutorialHeader/index.js`, import and export our\n`TutorialHeader` component like so:\n\n```javascript path=src/components/TutorialHeader/index.js\nimport TutorialHeader from './TutorialHeader';\nexport default TutorialHeader;\n```\n\nNext we'll import our Carbon UI Shell components into `TutorialHeader.js`. Set\nup the file like so:\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\nimport React from 'react';\nimport {\n  Header,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuItem,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n  SkipToContent,\n} from 'carbon-components-react';\n\nconst TutorialHeader = () => (\n  <Header aria-label=\"Carbon Tutorial\">\n    <SkipToContent />\n    <HeaderName href=\"/\" prefix=\"IBM\">\n      Carbon Tutorial\n    </HeaderName>\n    <HeaderNavigation aria-label=\"Carbon Tutorial\">\n      <HeaderMenuItem href=\"/repos\">Repositories</HeaderMenuItem>\n    </HeaderNavigation>\n    <HeaderGlobalBar />\n  </Header>\n);\n\nexport default TutorialHeader;\n```\n\n<InlineNotification>\n\n**Note:** you can find a description of the different components used UI Shell\nin our\n[carbon-components-react](https://github.com/carbon-design-system/carbon/tree/master/packages/react/src/components/UIShell)\npackage.\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** When creating navigation headers, it's important to have a\n`Skip to content` link so keyboard users can skip the navigation items and go\nstraight to the main content.\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** It's important that the `TutorialHeader` returns the Carbon `Header`\nas its containing element, as we'll later be rendering `TutorialHeader` in\n`App.js` as a preceding sibling of `Content`, another UI Shell component. Those\ncomponents need to live one after another for the UI Shell to properly render.\n\n</InlineNotification>\n\n### Import icons\n\nNow let's import the icons from our `@carbon/icons-react` elements package. In\nthe `TutorialHeader.js` file, we need to import each individual icon we will\nuse.\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\nimport {\n  AppSwitcher20,\n  Notification20,\n  UserAvatar20,\n} from '@carbon/icons-react';\n```\n\nThen we need to add the `HeaderGlobalAction` component inside of the\n`HeaderGlobalBar` where we will add our icons. These represent actions in the\nheader a user can make. Replace:\n\n```html path=src/components/TutorialHeader/TutorialHeader.js\n<HeaderGlobalBar />\n```\n\nWith:\n\n```html path=src/components/TutorialHeader/TutorialHeader.js\n<HeaderGlobalBar>\n  <HeaderGlobalAction aria-label=\"Notifications\">\n    <Notification20 />\n  </HeaderGlobalAction>\n  <HeaderGlobalAction aria-label=\"User Avatar\">\n    <UserAvatar20 />\n  </HeaderGlobalAction>\n  <HeaderGlobalAction aria-label=\"App Switcher\">\n    <AppSwitcher20 />\n  </HeaderGlobalAction>\n</HeaderGlobalBar>\n```\n\n### Render the header\n\nNext we'll render our UI Shell by importing our `TutorialHeader` component and\n`Content` into `App.js`. Your imports should look like this:\n\n```javascript path=src/App.js\nimport React, { Component } from 'react';\nimport './app.scss';\nimport { Button, Content } from 'carbon-components-react';\nimport TutorialHeader from './components/TutorialHeader';\n```\n\nOur `return` currently just contains a `Button`. Let's update that to include\nour imported components. This should look like the following:\n\n```javascript path=src/App.js\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <TutorialHeader />\n        <Content>\n          <Button>Button</Button>\n        </Content>\n      </>\n    );\n  }\n}\n```\n\nYou should now see a styled UI Shell header and a button below it.\n\n## Create pages\n\nNext thing we need to do is create the files for our content. Start by creating\na folder called `content` in `src`. This should be a sibling of\n`src/components`.\n\nSince our app will have two pages, we'll create two folders in `src/content`.\n\n```bash\nsrc/content\n├── LandingPage\n└── RepoPage\n```\n\nNext, we'll set up these folders the same way we set up\n`src/components/TutorialHeader`.\n\nCreate the following files in the `LandingPage` folder:\n\n```bash\nsrc/content/LandingPage\n├── _landing-page.scss\n├── index.js\n└── LandingPage.js\n```\n\nCreate the following files in the `RepoPage` folder:\n\n```bash\nsrc/content/RepoPage\n├── _repo-page.scss\n├── index.js\n└── RepoPage.js\n```\n\n### Set up content Sass\n\nNext, we'll import our content Sass files in `app.scss`, like so:\n\n```scss path=src/app.scss\n@import './components/TutorialHeader/tutorial-header.scss';\n@import './content/LandingPage/landing-page.scss';\n@import './content/RepoPage/repo-page.scss';\n```\n\n### Import and export content pages\n\nNow that our stylesheets are set up, we need to create our pages' components.\nStarting with `LandingPage`, just like with our header, we need to export the\ncomponent in `src/content/LandingPage/index.js` by adding:\n\n```javascript path=src/content/LandingPage/index.js\nimport LandingPage from './LandingPage';\nexport default LandingPage;\n```\n\nNext in `LandingPage.js`, we'll create our component.\n\n```javascript path=src/content/LandingPage/LandingPage.js\nimport React from 'react';\n\nconst LandingPage = () => {\n  return <div>LANDING PAGE</div>;\n};\n\nexport default LandingPage;\n```\n\nWe'll repeat this process with `RepoPage`.\n\nIn `src/content/RepoPage/index.js`, import and export the `RepoPage` component\nlike so:\n\n```javascript path=src/content/RepoPage/index.js\nimport RepoPage from './RepoPage';\nexport default RepoPage;\n```\n\nThen in `RepoPage.js` create the component.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nimport React from 'react';\n\nconst RepoPage = () => {\n  return <div>REPO PAGE</div>;\n};\n\nexport default RepoPage;\n```\n\nAwesome! We've just created our content pages. Next thing we need to do is\nrender them with our router.\n\n## Add routing\n\nWe've updated our app to render our header, but now we need to add routing\nfunctionality. To do this we need to install `react-router-dom`. Go ahead and\nstop your development server (with `CTRL-C`) and then:\n\n```bash\nyarn add react-router-dom@5.0.0\nyarn start\n```\n\nFirst, we need to wrap our app in the `Router` component. In the root\n`index.js`, add the import:\n\n```javascript path=src/index.js\nimport { HashRouter as Router } from 'react-router-dom';\n```\n\n<InlineNotification>\n\n**Note:** We're using `HashRouter` instead of `BrowserRouter` to simplify\ndeployments in upcoming tutorial steps. Learn more about the React Router\n[here](https://reacttraining.com/react-router/web/api/BrowserRouter).\n\n</InlineNotification>\n\nThen, update the `render()` function to include the `Router`.\n\n```javascript path=src/index.js\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n```\n\nIn order to render our content pages, we need to add the following imports in\n`App.js` below our existing imports.\n\n```javascript path=src/App.js\nimport { Route, Switch } from 'react-router-dom';\nimport LandingPage from './content/LandingPage';\nimport RepoPage from './content/RepoPage';\n```\n\nThis allows us to use our page content components and routing components from\n`react-router-dom`.\n\nThe next thing we need to do is update what we're returning to `App.js`. We\ncurrently just have a button in our content. In order to render our pages\ncorrectly, we need to delete the `Button` component within `Content` (and remove\nthe Button import).\n\nNow inside `Content` we'll add the following:\n\n<!-- prettier-ignore-start -->\n```html path=src/App.js\n<Switch>\n  <Route exact path=\"/\" component={LandingPage} />\n  <Route path=\"/repos\" component={RepoPage} />\n</Switch>\n```\n<!-- prettier-ignore-end -->\n\nAfter that we need to do a couple quick fixes to the UI Shell to have it work\nwith the React router.\n\nAdd the `Link` import in `TutorialHeader.js`:\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\nimport { Link } from 'react-router-dom';\n```\n\nWe need to use the `Link` component instead of the default anchor elements to\nprevent full page reload when navigating to different pages with React Router.\nTo use `Link`, update the `HeaderName` component to use the `element` prop and\nreplace the `href` with `to`:\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\n<HeaderName element={Link} to=\"/\" prefix=\"IBM\">\n  Carbon Tutorial\n</HeaderName>\n```\n\nDo the same with the component that contains `href=\"/repos\"`, updating to:\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\n<HeaderMenuItem element={Link} to=\"/repos\">\n  Repositories\n</HeaderMenuItem>\n```\n\nYou should now have a working header that routes to different pages without full\npage reload!\n\n## Submit pull request\n\nWe're going to submit a pull request to verify completion of this tutorial step\nand demonstrate a couple of related concepts.\n\n### Continuous integration (CI) check\n\nWe have a `ci-check` script defined in `package.json` that verifies file\nformatting for files that have been touched since the last Git commit with a\ntool called [Prettier](https://prettier.io). You'd typically also have that\nscript run your test suite as part of your CI build. Go ahead and make sure\neverything looks good with:\n\n```bash\nyarn ci-check\n```\n\n<InlineNotification>\n\n**Note:** If the `ci-check` is giving an error, it's likely that some of your\nsource files are not properly formatted. This could happen if your text editor\nisn't formatting with Prettier on save. To get `ci-check` to pass, run\n`yarn format` then re-run `yarn ci-check`.\n\n</InlineNotification>\n\n### Git commit and push\n\nBefore we can create a pull request, stage and commit all of your changes:\n\n```bash\ngit add --all && git commit -m \"feat(tutorial): complete step 1\"\n```\n\n<InlineNotification>\n\n**Note:** You'll notice that your commit includes binaries in the\n`.yarn-offline-mirror` folder. That's expected as the repository is configured\nto run [Yarn offline](https://yarnpkg.com/blog/2016/11/24/offline-mirror) for\nmore reliable builds. Future tutorial steps that don't install new packages\nwon't have `.yarn-offline-mirror` commit changes.\n\n</InlineNotification>\n\nThen, push to your repository:\n\n```bash\ngit push origin react-step-1\n```\n\n<InlineNotification>\n\n**Note:** If your Git remote protocol is HTTPS instead of SSH, you may be\nprompted to authenticate with GitHub when you push changes. If your GitHub\naccount has two-factor authentication enabled, we recommend that you follow\nthese instructions to\n[create a personal access token for the command line](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line).\nThat lets you use your token instead of password when performing Git operations\nover HTTPS.\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** If you receive a `non-fast-forward` error, it's likely that your\nforked repository is behind the original repository and needs to be updated.\nThis can happen if the tutorial was updated after you began working on it. To\nfix, run `git pull upstream react-step-1` to merge the changes into your branch,\nthen you can try pushing again. Or, you can\n[manually merge](https://help.github.com/en/articles/syncing-a-fork) in the\nupstream changes.\n\n</InlineNotification>\n\n### Pull request (PR)\n\nFinally, visit\n[carbon-tutorial](https://github.com/carbon-design-system/carbon-tutorial) to\n\"Compare & pull request\". In doing so, make sure that you are comparing to\n`react-step-1` into `base: react-step-1`. Take notice of the\n[Netlify](https://www.netlify.com) bot that deploys a preview of your PR every\ntime that you push new commits. These previews can be shared and viewed by\nanybody to assist the PR review process.\n\n<InlineNotification>\n\n**Note:** Expect your tutorial step PRs to be reviewed by the Carbon team but\nnot merged. We'll close your PR so we can keep the repository's remote branches\npristine and ready for the next person!\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** If your PR fails the CircleCI test with the error\n`Can't make a request in offline mode`, try running the following command:\n`rm -rf .yarn-offline-mirror node_modules && yarn cache clean && yarn install`.\nAdd and commit the changes once this completes, and try pushing again.\n\n</InlineNotification>\n","type":"Mdx","contentDigest":"5cef2c9b444f44ce4e716e42c72754b9","counter":3035,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"1. Installing Carbon","description":"Welcome to Carbon! This tutorial will guide you in creating a React app with the Carbon Design System.","tabs":["Overview","Step 1","Step 2","Step 3","Step 4","Step 5","Wrapping up"]},"exports":{},"rawBody":"---\ntitle: 1. Installing Carbon\ndescription:\n  Welcome to Carbon! This tutorial will guide you in creating a React app with\n  the Carbon Design System.\ntabs:\n  ['Overview', 'Step 1', 'Step 2', 'Step 3', 'Step 4', 'Step 5', 'Wrapping up']\n---\n\nimport Preview from 'components/Preview';\n\n<PageDescription>\n\nStarting with Create React App, let's install Carbon and begin using Carbon\ncomponents. By the end you will have a React app that uses the UI Shell to\nnavigate between pages.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Fork, clone and branch</AnchorLink>\n<AnchorLink>Build and start</AnchorLink>\n<AnchorLink>Install Carbon</AnchorLink>\n<AnchorLink>Install and build Sass</AnchorLink>\n<AnchorLink>Add UI Shell</AnchorLink>\n<AnchorLink>Create pages</AnchorLink>\n<AnchorLink>Add routing</AnchorLink>\n<AnchorLink>Submit pull request</AnchorLink>\n\n</AnchorLinks>\n\n## Preview\n\nA [preview](https://react-step-2--carbon-tutorial.netlify.com) of what you will\nbuild:\n\n<Preview\n  height=\"200\"\n  title=\"Carbon Tutorial Step 1\"\n  src=\"https://react-step-2--carbon-tutorial.netlify.com\"\n  frameborder=\"no\"\n  allowtransparency=\"true\"\n  allowfullscreen=\"true\"\n/>\n\n## Fork, clone and branch\n\nThis tutorial has an accompanying GitHub repository called\n[carbon-tutorial](https://github.com/carbon-design-system/carbon-tutorial) that\nwe'll use as a starting point for each step.\n\n### Fork\n\nTo begin, fork\n[carbon-tutorial](https://github.com/carbon-design-system/carbon-tutorial) using\nyour GitHub account.\n\n### Clone\n\nGo to your forked repository, copy the SSH or HTTPS URL and in your terminal run\nthe two commands to get the repository in your local file system and enter that\ndirectory.\n\n```bash\ngit clone [your fork SSH/HTTPS]\ncd carbon-tutorial\n```\n\n### Add upstream remote\n\nAdd a remote called `upstream` so we can eventually submit a pull request once\nyou have completed this tutorial step.\n\n```bash\ngit remote add upstream git@github.com:carbon-design-system/carbon-tutorial.git\n```\n\nOr, if you prefer to use HTTPS instead of SSH with your remotes:\n\n```bash\ngit remote add upstream https://github.com/carbon-design-system/carbon-tutorial.git\n```\n\nVerify that your forked repository remotes are correct:\n\n```bash\ngit remote -v\n```\n\nYour terminal should output something like this:\n\n```bash\norigin\t[your forked repo] (fetch)\norigin\t[your forked repo] (push)\nupstream\tgit@github.com:carbon-design-system/carbon-tutorial.git (fetch)\nupstream\tgit@github.com:carbon-design-system/carbon-tutorial.git (push)\n```\n\n### Branch\n\nNow that we have our repository set up, let's check out the branch for this\ntutorial step's starting point. Run the two commands:\n\n```bash\ngit fetch upstream\ngit checkout -b react-step-1 upstream/react-step-1\n```\n\n## Build and start\n\nWe have the repository forked to your GitHub account, cloned down to your\nmachine, and the starting branch checked out. Next, install the React app's\ndependencies with:\n\n```bash\nyarn\n```\n\nAfter the dependencies are installed, you can start the app with:\n\n```bash\nyarn start\n```\n\nYour default browser should open up with an empty page that says:\n`Hello Carbon! Well, not quite yet. This is the starting point for the Carbon tutorial.`\n\n## Install Carbon\n\nEven though we installed existing dependencies, we've yet to install the Carbon\npackages.\n\n- `carbon-components` - component styles\n- `carbon-components-react` - React components\n- `@carbon/icons-react` - React icons\n\nStop your development server with `CTRL-C` and install Carbon dependencies with:\n\n```bash\nyarn add carbon-components@10.3.0 carbon-components-react@7.3.0 @carbon/icons-react@10.3.0 carbon-icons@7.0.7\n```\n\n## Install and build Sass\n\nWe need to run a Sass build as the Carbon styles are authored in Sass, so run\nthe following command to install `node-sass` as a dependency.\n\n```bash\nyarn add node-sass@4.12.0\n```\n\nTo avoid having to add the `~` prefix when importing SCSS files from\n`node_modules`, create a `.env` file at the project root that contains:\n\n```bash path=.env\nSASS_PATH=\"node_modules\"\n```\n\nFor the Windows operating system, use:\n\n```bash  path=.env\nSASS_PATH=./node_modules\n```\n\nThen, start the app again. If your app's currently running, you'll need to\nrestart it for the new environment variable to be used.\n\n```bash\nyarn start\n```\n\nThe app looks as it did before. Next, let's prepare our app for a Sass build.\n\nIn the `src` directory, rename `index.css` as `index.scss`. Then in `index.js`\nupdate the `index.css` import to `index.scss`.\n\n### Import carbon-component styles\n\nIn `index.scss`, import the Carbon styles by adding the following at the top of\nthe file:\n\n```scss path=src/index.scss\n@import 'carbon-components/scss/globals/scss/styles.scss';\n```\n\nMaking this change to `index.scss` will cause all of the Carbon Sass to\nre-compile. Once finished re-compiling the Carbon base styling is applied (IBM\nPlex Sans font family, font size, weight, colors, etc.)\n\nRe-compiling all of the Carbon Sass takes a while, even on fast systems. Let's\nspeed this up by moving our custom app Sass into a separate file, `app.scss` in\nthe 'src' directory, and import that from `App.js`.\n\n```javascript path=src/App.js\nimport './app.scss';\n```\n\nBy modifying `index.scss` as little as possible and storing all app-specific\nstyling in `app.scss` we will make compile times much quicker. Storing the\napp-specific styling in a separate file also makes good organizational sense.\n\nNext, we'll import a `Button` from Carbon to test that our dependencies are\nworking properly. At the top of `App.js`, import the `Button` by adding the\nfollowing:\n\n```javascript path=src/App.js\nimport { Button } from 'carbon-components-react';\n```\n\nIn the `App` component return, you can now replace:\n\n<!-- prettier-ignore-start -->\n```html path=src/App.js\n<div>\n  Hello Carbon! Well, not quite yet. This is the starting point for the Carbon tutorial.\n</div>\n```\n<!-- prettier-ignore-end -->\n\nwith:\n\n<!-- prettier-ignore-start -->\n```html path=src/App.js\n<Button>Button</Button>\n```\n<!-- prettier-ignore-end -->\n\nCongratulations, you've imported your first component! You should see a Carbon\nstyled button on the page.\n\n## Add UI Shell\n\n<InlineNotification>\n\n**Note:** The UI Shell has experimental status at the moment. We do not\nrecommend using it for production until it is stable, but if doing so, know that\nthere may be breaking changes in the future.\n\n</InlineNotification>\n\nNext, we're going to create a React component called `TutorialHeader` to use\nwith the UI Shell Carbon component. In the `src` directory, create a\n`components` directory and inside of that, a `TutorialHeader` directory. Create\nthe following files inside `src/components/TutorialHeader`:\n\n```bash\nsrc/components/TutorialHeader\n├──_tutorial-header.scss\n├──index.js\n└──TutorialHeader.js\n```\n\n### Add UI Shell Sass\n\nIn `index.scss` add the following feature-flag **above** the Carbon styles\nimport like so:\n\n```scss path=src/index.scss\n$feature-flags: (\n  ui-shell: true,\n);\n```\n\nThis is because our UI Shell is in experimental mode and the styles need to be\nmanually imported.\n\nNext, in `app.scss`, we'll import our `TutorialHeader` styles. Your file should\nnow look like this:\n\n```scss path=src/app.scss\n@import './components/TutorialHeader/tutorial-header.scss';\n```\n\n### Import and export the header\n\nIn `src/components/TutorialHeader/index.js`, import and export our\n`TutorialHeader` component like so:\n\n```javascript path=src/components/TutorialHeader/index.js\nimport TutorialHeader from './TutorialHeader';\nexport default TutorialHeader;\n```\n\nNext we'll import our Carbon UI Shell components into `TutorialHeader.js`. Set\nup the file like so:\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\nimport React from 'react';\nimport {\n  Header,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuItem,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n  SkipToContent,\n} from 'carbon-components-react';\n\nconst TutorialHeader = () => (\n  <Header aria-label=\"Carbon Tutorial\">\n    <SkipToContent />\n    <HeaderName href=\"/\" prefix=\"IBM\">\n      Carbon Tutorial\n    </HeaderName>\n    <HeaderNavigation aria-label=\"Carbon Tutorial\">\n      <HeaderMenuItem href=\"/repos\">Repositories</HeaderMenuItem>\n    </HeaderNavigation>\n    <HeaderGlobalBar />\n  </Header>\n);\n\nexport default TutorialHeader;\n```\n\n<InlineNotification>\n\n**Note:** you can find a description of the different components used UI Shell\nin our\n[carbon-components-react](https://github.com/carbon-design-system/carbon/tree/master/packages/react/src/components/UIShell)\npackage.\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** When creating navigation headers, it's important to have a\n`Skip to content` link so keyboard users can skip the navigation items and go\nstraight to the main content.\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** It's important that the `TutorialHeader` returns the Carbon `Header`\nas its containing element, as we'll later be rendering `TutorialHeader` in\n`App.js` as a preceding sibling of `Content`, another UI Shell component. Those\ncomponents need to live one after another for the UI Shell to properly render.\n\n</InlineNotification>\n\n### Import icons\n\nNow let's import the icons from our `@carbon/icons-react` elements package. In\nthe `TutorialHeader.js` file, we need to import each individual icon we will\nuse.\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\nimport {\n  AppSwitcher20,\n  Notification20,\n  UserAvatar20,\n} from '@carbon/icons-react';\n```\n\nThen we need to add the `HeaderGlobalAction` component inside of the\n`HeaderGlobalBar` where we will add our icons. These represent actions in the\nheader a user can make. Replace:\n\n```html path=src/components/TutorialHeader/TutorialHeader.js\n<HeaderGlobalBar />\n```\n\nWith:\n\n```html path=src/components/TutorialHeader/TutorialHeader.js\n<HeaderGlobalBar>\n  <HeaderGlobalAction aria-label=\"Notifications\">\n    <Notification20 />\n  </HeaderGlobalAction>\n  <HeaderGlobalAction aria-label=\"User Avatar\">\n    <UserAvatar20 />\n  </HeaderGlobalAction>\n  <HeaderGlobalAction aria-label=\"App Switcher\">\n    <AppSwitcher20 />\n  </HeaderGlobalAction>\n</HeaderGlobalBar>\n```\n\n### Render the header\n\nNext we'll render our UI Shell by importing our `TutorialHeader` component and\n`Content` into `App.js`. Your imports should look like this:\n\n```javascript path=src/App.js\nimport React, { Component } from 'react';\nimport './app.scss';\nimport { Button, Content } from 'carbon-components-react';\nimport TutorialHeader from './components/TutorialHeader';\n```\n\nOur `return` currently just contains a `Button`. Let's update that to include\nour imported components. This should look like the following:\n\n```javascript path=src/App.js\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <TutorialHeader />\n        <Content>\n          <Button>Button</Button>\n        </Content>\n      </>\n    );\n  }\n}\n```\n\nYou should now see a styled UI Shell header and a button below it.\n\n## Create pages\n\nNext thing we need to do is create the files for our content. Start by creating\na folder called `content` in `src`. This should be a sibling of\n`src/components`.\n\nSince our app will have two pages, we'll create two folders in `src/content`.\n\n```bash\nsrc/content\n├── LandingPage\n└── RepoPage\n```\n\nNext, we'll set up these folders the same way we set up\n`src/components/TutorialHeader`.\n\nCreate the following files in the `LandingPage` folder:\n\n```bash\nsrc/content/LandingPage\n├── _landing-page.scss\n├── index.js\n└── LandingPage.js\n```\n\nCreate the following files in the `RepoPage` folder:\n\n```bash\nsrc/content/RepoPage\n├── _repo-page.scss\n├── index.js\n└── RepoPage.js\n```\n\n### Set up content Sass\n\nNext, we'll import our content Sass files in `app.scss`, like so:\n\n```scss path=src/app.scss\n@import './components/TutorialHeader/tutorial-header.scss';\n@import './content/LandingPage/landing-page.scss';\n@import './content/RepoPage/repo-page.scss';\n```\n\n### Import and export content pages\n\nNow that our stylesheets are set up, we need to create our pages' components.\nStarting with `LandingPage`, just like with our header, we need to export the\ncomponent in `src/content/LandingPage/index.js` by adding:\n\n```javascript path=src/content/LandingPage/index.js\nimport LandingPage from './LandingPage';\nexport default LandingPage;\n```\n\nNext in `LandingPage.js`, we'll create our component.\n\n```javascript path=src/content/LandingPage/LandingPage.js\nimport React from 'react';\n\nconst LandingPage = () => {\n  return <div>LANDING PAGE</div>;\n};\n\nexport default LandingPage;\n```\n\nWe'll repeat this process with `RepoPage`.\n\nIn `src/content/RepoPage/index.js`, import and export the `RepoPage` component\nlike so:\n\n```javascript path=src/content/RepoPage/index.js\nimport RepoPage from './RepoPage';\nexport default RepoPage;\n```\n\nThen in `RepoPage.js` create the component.\n\n```javascript path=src/content/RepoPage/RepoPage.js\nimport React from 'react';\n\nconst RepoPage = () => {\n  return <div>REPO PAGE</div>;\n};\n\nexport default RepoPage;\n```\n\nAwesome! We've just created our content pages. Next thing we need to do is\nrender them with our router.\n\n## Add routing\n\nWe've updated our app to render our header, but now we need to add routing\nfunctionality. To do this we need to install `react-router-dom`. Go ahead and\nstop your development server (with `CTRL-C`) and then:\n\n```bash\nyarn add react-router-dom@5.0.0\nyarn start\n```\n\nFirst, we need to wrap our app in the `Router` component. In the root\n`index.js`, add the import:\n\n```javascript path=src/index.js\nimport { HashRouter as Router } from 'react-router-dom';\n```\n\n<InlineNotification>\n\n**Note:** We're using `HashRouter` instead of `BrowserRouter` to simplify\ndeployments in upcoming tutorial steps. Learn more about the React Router\n[here](https://reacttraining.com/react-router/web/api/BrowserRouter).\n\n</InlineNotification>\n\nThen, update the `render()` function to include the `Router`.\n\n```javascript path=src/index.js\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n```\n\nIn order to render our content pages, we need to add the following imports in\n`App.js` below our existing imports.\n\n```javascript path=src/App.js\nimport { Route, Switch } from 'react-router-dom';\nimport LandingPage from './content/LandingPage';\nimport RepoPage from './content/RepoPage';\n```\n\nThis allows us to use our page content components and routing components from\n`react-router-dom`.\n\nThe next thing we need to do is update what we're returning to `App.js`. We\ncurrently just have a button in our content. In order to render our pages\ncorrectly, we need to delete the `Button` component within `Content` (and remove\nthe Button import).\n\nNow inside `Content` we'll add the following:\n\n<!-- prettier-ignore-start -->\n```html path=src/App.js\n<Switch>\n  <Route exact path=\"/\" component={LandingPage} />\n  <Route path=\"/repos\" component={RepoPage} />\n</Switch>\n```\n<!-- prettier-ignore-end -->\n\nAfter that we need to do a couple quick fixes to the UI Shell to have it work\nwith the React router.\n\nAdd the `Link` import in `TutorialHeader.js`:\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\nimport { Link } from 'react-router-dom';\n```\n\nWe need to use the `Link` component instead of the default anchor elements to\nprevent full page reload when navigating to different pages with React Router.\nTo use `Link`, update the `HeaderName` component to use the `element` prop and\nreplace the `href` with `to`:\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\n<HeaderName element={Link} to=\"/\" prefix=\"IBM\">\n  Carbon Tutorial\n</HeaderName>\n```\n\nDo the same with the component that contains `href=\"/repos\"`, updating to:\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\n<HeaderMenuItem element={Link} to=\"/repos\">\n  Repositories\n</HeaderMenuItem>\n```\n\nYou should now have a working header that routes to different pages without full\npage reload!\n\n## Submit pull request\n\nWe're going to submit a pull request to verify completion of this tutorial step\nand demonstrate a couple of related concepts.\n\n### Continuous integration (CI) check\n\nWe have a `ci-check` script defined in `package.json` that verifies file\nformatting for files that have been touched since the last Git commit with a\ntool called [Prettier](https://prettier.io). You'd typically also have that\nscript run your test suite as part of your CI build. Go ahead and make sure\neverything looks good with:\n\n```bash\nyarn ci-check\n```\n\n<InlineNotification>\n\n**Note:** If the `ci-check` is giving an error, it's likely that some of your\nsource files are not properly formatted. This could happen if your text editor\nisn't formatting with Prettier on save. To get `ci-check` to pass, run\n`yarn format` then re-run `yarn ci-check`.\n\n</InlineNotification>\n\n### Git commit and push\n\nBefore we can create a pull request, stage and commit all of your changes:\n\n```bash\ngit add --all && git commit -m \"feat(tutorial): complete step 1\"\n```\n\n<InlineNotification>\n\n**Note:** You'll notice that your commit includes binaries in the\n`.yarn-offline-mirror` folder. That's expected as the repository is configured\nto run [Yarn offline](https://yarnpkg.com/blog/2016/11/24/offline-mirror) for\nmore reliable builds. Future tutorial steps that don't install new packages\nwon't have `.yarn-offline-mirror` commit changes.\n\n</InlineNotification>\n\nThen, push to your repository:\n\n```bash\ngit push origin react-step-1\n```\n\n<InlineNotification>\n\n**Note:** If your Git remote protocol is HTTPS instead of SSH, you may be\nprompted to authenticate with GitHub when you push changes. If your GitHub\naccount has two-factor authentication enabled, we recommend that you follow\nthese instructions to\n[create a personal access token for the command line](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line).\nThat lets you use your token instead of password when performing Git operations\nover HTTPS.\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** If you receive a `non-fast-forward` error, it's likely that your\nforked repository is behind the original repository and needs to be updated.\nThis can happen if the tutorial was updated after you began working on it. To\nfix, run `git pull upstream react-step-1` to merge the changes into your branch,\nthen you can try pushing again. Or, you can\n[manually merge](https://help.github.com/en/articles/syncing-a-fork) in the\nupstream changes.\n\n</InlineNotification>\n\n### Pull request (PR)\n\nFinally, visit\n[carbon-tutorial](https://github.com/carbon-design-system/carbon-tutorial) to\n\"Compare & pull request\". In doing so, make sure that you are comparing to\n`react-step-1` into `base: react-step-1`. Take notice of the\n[Netlify](https://www.netlify.com) bot that deploys a preview of your PR every\ntime that you push new commits. These previews can be shared and viewed by\nanybody to assist the PR review process.\n\n<InlineNotification>\n\n**Note:** Expect your tutorial step PRs to be reviewed by the Carbon team but\nnot merged. We'll close your PR so we can keep the repository's remote branches\npristine and ready for the next person!\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** If your PR fails the CircleCI test with the error\n`Can't make a request in offline mode`, try running the following command:\n`rm -rf .yarn-offline-mirror node_modules && yarn cache clean && yarn install`.\nAdd and commit the changes once this completes, and try pushing again.\n\n</InlineNotification>\n","fileAbsolutePath":"/Users/jvernon/Documents/Design System/carbon/carbon-website/src/pages/developing/react-tutorial/step-1.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2368708353","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","711213475","768070550"]}
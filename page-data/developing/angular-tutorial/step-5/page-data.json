{"componentChunkName":"component---src-pages-developing-angular-tutorial-step-5-mdx","path":"/developing/angular-tutorial/step-5/","result":{"pageContext":{"frontmatter":{"title":"5. Deploying to IBM Cloud","tabs":["Overview","Step 1","Step 2","Step 3","Step 4","Step 5","Wrapping up"]},"relativePagePath":"/developing/angular-tutorial/step-5.mdx","titleType":"prepend","MdxNode":{"id":"d3ced727-66a8-51cd-a025-38e88b4b6d1f","children":[],"parent":"b036e419-7e2e-5ede-8153-517618e4054c","internal":{"content":"---\ntitle: 5. Deploying to IBM Cloud\ntabs:\n  ['Overview', 'Step 1', 'Step 2', 'Step 3', 'Step 4', 'Step 5', 'Wrapping up']\n---\n\nimport Preview from 'components/Preview';\n\n<PageDescription>\n\nThis step takes what we've built so far and optimizes the app for a production\nenvironment. We'll be deploying the production build to IBM Cloud.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Fork, clone and branch</AnchorLink>\n<AnchorLink>Create IBM Cloud account</AnchorLink>\n<AnchorLink>Optimize Sass</AnchorLink>\n<AnchorLink>Build for production</AnchorLink>\n<AnchorLink>Create manifest file</AnchorLink>\n<AnchorLink>Create static file</AnchorLink>\n<AnchorLink>Deploy app</AnchorLink>\n<AnchorLink>Submit pull request</AnchorLink>\n\n</AnchorLinks>\n\n## Preview\n\nA [preview](https://angular-step-6-carbon-tutorial.netlify.com) of what you'll\nbuild (visually no different, but built for production):\n\n<Preview\n  height=\"400\"\n  title=\"Carbon Angular Tutorial Step 5\"\n  src=\"https://angular-step-6-carbon-tutorial.netlify.com\"\n  frameborder=\"no\"\n  allowtransparency=\"true\"\n  allowfullscreen=\"true\"\n/>\n\n## Fork, clone and branch\n\nThis tutorial has an accompanying GitHub repository called\n[carbon-tutorial-angular](https://github.com/carbon-design-system/carbon-tutorial-angular)\nthat we'll use as a starting point for each step. If you haven't forked and\ncloned that repository yet, and haven't added the upstream remote, go ahead and\ndo so by following the\n[step 1 instructions](/developing/angular-tutorial/step-1#fork-clone-and-branch).\n\n### Branch\n\nWith your repository all set up, let's check out the branch for this tutorial\nstep's starting point.\n\n```bash\ngit fetch upstream\ngit checkout -b angular-step-5 upstream/angular-step-5\n```\n\n<InlineNotification>\n\n**Note:** This builds on top of step 4, but be sure to check out the upstream\nstep 5 branch because it includes the static assets required to get through this\nstep.\n\n</InlineNotification>\n\n### Build and start app\n\nInstall the app's dependencies (in case you're starting fresh in your current\ndirectory and not continuing from the previous step):\n\n```bash\nnpm install\n```\n\nThen, start the app:\n\n```bash\nnpm start\n```\n\nYou should see something similar to where the\n[previous step](/developing/angular-tutorial/step-4) left off.\n\n## Create IBM Cloud account\n\nBefore we get started,\n[create an IBM Cloud account](https://cloud.ibm.com/registration) if you don't\nalready have one, as we'll be deploying there in a bit.\n\n## Optimize Sass\n\nSo far we've been developing in a, well, development environment where static\nasset optimization hasn't been a priority. If you reference `/src/styles.scss`,\nyou'll see one `@import` that is pulling in Carbon's full Sass build.\n\n<!-- prettier-ignore-start -->\n```scss path=src/styles.scss\n@import \"~carbon-components/scss/globals/scss/styles\";\n```\n<!-- prettier-ignore-end -->\n\nTo give you an idea of what's all included, open up\n`node_modules/carbon-components/scss/globals/scss/styles.scss`. You'll see\nimports for components like accordion, slider, tooltip, etc. Since we aren't\nusing those components, let's exclude them from our built stylesheets. Keeping\nthe `$feature-flags` Sass map, and `carbon-overrides.scss`, replace the\n`styles.scss` import with:\n\n<!-- prettier-ignore-start -->\n```scss path=src/styles.scss\n// Feature flags\n$css--font-face: true;\n$css--plex: true;\n\n// Global styles\n@import \"~carbon-components/scss/globals/scss/css--font-face\";\n@import \"~carbon-components/scss/globals/grid/grid\";\n\n// Carbon components\n@import \"~carbon-components/scss/components/breadcrumb/breadcrumb\";\n@import \"~carbon-components/scss/components/button/button\";\n@import \"~carbon-components/scss/components/data-table/data-table\";\n@import \"~carbon-components/scss/components/link/link\";\n@import \"~carbon-components/scss/components/pagination/pagination\";\n@import \"~carbon-components/scss/components/tabs/tabs\";\n@import \"~carbon-components/scss/components/ui-shell/ui-shell\";\n```\n<!-- prettier-ignore-end -->\n\nLooking at the new `styles.scss` file, you may be asking what happened to\nimporting `_vars.scss`, `_colors.scss`, `_theme.scss`, etc.? Many of those\nglobal Sass partials get imported through the components. For example, open\n`node_modules/carbon-components/scss/components/button/_button.scss` to see its\ndependencies. No harm in importing them as `styles.scss` does, but for\nsimplicity here, we'll let the components pull them in.\n\nYou can read more about optimizing Carbon's Sass in the\n[Carbon Design System publication](https://medium.com/carbondesign/minimal-css-with-carbon-b0c089ccfa71)\non Medium.\n\n## Build for production\n\nBefore we deploy our app, we need to create an optimized production build with\nthis command. You may need to `CTRL-C` to stop the development environment\nfirst.\n\n```bash\nnpm run build\n```\n\nLooking at `package.json`, you'll find `yarn build` to run `ng build`. This\nbuilds the app for production to the `dist` folder. It bundles Angular in\nproduction mode and optimizes the build for the best performance. It even goes\nso far to minify files and include hashes in filenames for caching.\n\nAs a lot of this may seem like magic since the build configuration came from\nCreate React App, go ahead and check out their\n[production build guidelines](https://facebook.github.io/create-react-app/docs/production-build)\nfor a full description of what's happening.\n\n## Create manifest file\n\nNow that we have a production build, let's get it on the cloud. We're going to\nuse\n[staticfile-buildpack](https://github.com/cloudfoundry/staticfile-buildpack.git)\nto deploy our webapp. Since this is a Cloud Foundry buildpack, we'll be using\nthe `cf` command line interface (CLI). If running `cf --help` doesn't work for\nyou, chances are you need to\n[install the CLI](https://docs.cloudfoundry.org/cf-cli/install-go-cli.html).\n\n<InlineNotification>\n\n**Note:** If unfamiliar with buildpacks, the\n[staticfile buildpack docs](https://docs.cloudfoundry.org/buildpacks/staticfile/index.html)\nhas good definitions and configuration documentation.\n\n</InlineNotification>\n\nWith the Cloud Foundry CLI installed, next, we need to create a `manifest.yml`\nfile in the root of the project. To prevent multiple apps trying to use the\n`carbon-tutorial-angular` name, replace `USERNAME` with your GitHub username\nbelow to make sure our apps are uniquely named.\n\n```bash path=manifest.yml\n---\napplications:\n  - name: carbon-tutorial-angular-USERNAME\n    memory: 64M\n    buildpack: https://github.com/cloudfoundry/staticfile-buildpack.git\n```\n\n<InlineNotification>\n\n**Note:** With this set-up we're still using a GitHub personal access token\nsaved in `.env.local`. If you haven't created a GitHub access token yet, see\n[step 3](/tutorial/react/step-3#create-access-token). You can put the\nenvironment variable in the manifest file, or manually add it in the IBM Cloud\ndashboard, but since we're building off previous tutorial steps nothing more is\nneeded.\n\n</InlineNotification>\n\n## Create static file\n\nCreate a new static file in the root of the project named `Staticfile`. This\ntells the app to deploy from the `dist` folder and not the root of the project.\n\n```bash path=Staticfile\nroot: dist\n```\n\n### Cloud Foundry ignore\n\nAfter telling Cloud Foundry what to include, we can also specify what to ignore.\nCreate a top-level `.cfignore` file. Cloud Foundry doesn't let you push\nread-only files (specifically, files with permissions <`400`), so to prevent\nissues with the deploy, add:\n\n```bash path=.cfignore\nnode_modules/.cache\n```\n\nYou can speed up deploys by decreasing the files uploaded through cloud foundry.\nTo accomplish this, ignore any folder not required by the production application\non IBM Cloud. For example, in the case of serving static files, you can ignore\n`node_modules/` and `src/` because the only folder being served is `build/`.\n\n## Deploy app\n\nLogin to IBM Cloud with:\n\n```bash\ncf login -a https://api.ng.bluemix.net -sso\n```\n\nDeploy app using the `cf push` command. Since `manifest.yml` is in our root\ndirectory, we don't need to specify it in the push command. But, if you have\nmultiple manifest files that target different environments, it's good practice\nto specify the file.\n\n_Note: To successfully deploy, you might need to update the region code (e.g.\n`api.[REGION].bluemix.net`).\n[Learn more.](https://developer.ibm.com/answers/answers/166990/view.html)_\n\n```bash\ncf push -f manifest.yml\n```\n\nTo make it easy on ourselves by not needing to remember that command, let's add\na script in `package.json`. We can combine the build and deploy steps to make\nsure we only deploy immediately after running the build. In the `\"scripts\"`\nobject in `package.json`, add:\n\n```bash path=package.json\n\"deploy\": \"rm -rf ./dist && yarn build && cf push -f manifest.yml\"\n```\n\nNext time you want to deploy, you can simply run `yarn deploy`.\n\n## Submit pull request\n\nThat does it! We're going to submit a pull request to verify completion of this\ntutorial step. In doing so, **please include the mybluemix.net URL for your\ndeployed app in your pull request description**.\n\n### Git commit and push\n\nBefore we can create a pull request, stage and commit all of your changes:\n\n```bash\ngit add --all && git commit -m \"feat(tutorial): complete step 5\"\n```\n\nThen, push to your repository:\n\n```bash\ngit push origin angular-step-5\n```\n\n<InlineNotification>\n\n**Note:** Having issues pushing your changes?\n[Step 1](/developing/angular-tutorial/step-1#git-commit-and-push) has\ntroubleshooting notes that may help.\n\n</InlineNotification>\n\n### Pull request (PR)\n\nFinally, visit\n[carbon-tutorial-angular](https://github.com/carbon-design-system/carbon-tutorial-angular)\nto \"Compare & pull request\". In doing so, make sure that you are comparing to\n`angular-step-5` into `base: angular-step-5`.\n\n<InlineNotification>\n\n**Note:** Expect your tutorial step PRs to be reviewed by the Carbon team but\nnot merged. We'll close your PR so we can keep the repository's remote branches\npristine and ready for the next person!\n\n</InlineNotification>\n","type":"Mdx","contentDigest":"3c78ad774fefbdae3c0877c144f60883","counter":3052,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"5. Deploying to IBM Cloud","tabs":["Overview","Step 1","Step 2","Step 3","Step 4","Step 5","Wrapping up"]},"exports":{},"rawBody":"---\ntitle: 5. Deploying to IBM Cloud\ntabs:\n  ['Overview', 'Step 1', 'Step 2', 'Step 3', 'Step 4', 'Step 5', 'Wrapping up']\n---\n\nimport Preview from 'components/Preview';\n\n<PageDescription>\n\nThis step takes what we've built so far and optimizes the app for a production\nenvironment. We'll be deploying the production build to IBM Cloud.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Fork, clone and branch</AnchorLink>\n<AnchorLink>Create IBM Cloud account</AnchorLink>\n<AnchorLink>Optimize Sass</AnchorLink>\n<AnchorLink>Build for production</AnchorLink>\n<AnchorLink>Create manifest file</AnchorLink>\n<AnchorLink>Create static file</AnchorLink>\n<AnchorLink>Deploy app</AnchorLink>\n<AnchorLink>Submit pull request</AnchorLink>\n\n</AnchorLinks>\n\n## Preview\n\nA [preview](https://angular-step-6-carbon-tutorial.netlify.com) of what you'll\nbuild (visually no different, but built for production):\n\n<Preview\n  height=\"400\"\n  title=\"Carbon Angular Tutorial Step 5\"\n  src=\"https://angular-step-6-carbon-tutorial.netlify.com\"\n  frameborder=\"no\"\n  allowtransparency=\"true\"\n  allowfullscreen=\"true\"\n/>\n\n## Fork, clone and branch\n\nThis tutorial has an accompanying GitHub repository called\n[carbon-tutorial-angular](https://github.com/carbon-design-system/carbon-tutorial-angular)\nthat we'll use as a starting point for each step. If you haven't forked and\ncloned that repository yet, and haven't added the upstream remote, go ahead and\ndo so by following the\n[step 1 instructions](/developing/angular-tutorial/step-1#fork-clone-and-branch).\n\n### Branch\n\nWith your repository all set up, let's check out the branch for this tutorial\nstep's starting point.\n\n```bash\ngit fetch upstream\ngit checkout -b angular-step-5 upstream/angular-step-5\n```\n\n<InlineNotification>\n\n**Note:** This builds on top of step 4, but be sure to check out the upstream\nstep 5 branch because it includes the static assets required to get through this\nstep.\n\n</InlineNotification>\n\n### Build and start app\n\nInstall the app's dependencies (in case you're starting fresh in your current\ndirectory and not continuing from the previous step):\n\n```bash\nnpm install\n```\n\nThen, start the app:\n\n```bash\nnpm start\n```\n\nYou should see something similar to where the\n[previous step](/developing/angular-tutorial/step-4) left off.\n\n## Create IBM Cloud account\n\nBefore we get started,\n[create an IBM Cloud account](https://cloud.ibm.com/registration) if you don't\nalready have one, as we'll be deploying there in a bit.\n\n## Optimize Sass\n\nSo far we've been developing in a, well, development environment where static\nasset optimization hasn't been a priority. If you reference `/src/styles.scss`,\nyou'll see one `@import` that is pulling in Carbon's full Sass build.\n\n<!-- prettier-ignore-start -->\n```scss path=src/styles.scss\n@import \"~carbon-components/scss/globals/scss/styles\";\n```\n<!-- prettier-ignore-end -->\n\nTo give you an idea of what's all included, open up\n`node_modules/carbon-components/scss/globals/scss/styles.scss`. You'll see\nimports for components like accordion, slider, tooltip, etc. Since we aren't\nusing those components, let's exclude them from our built stylesheets. Keeping\nthe `$feature-flags` Sass map, and `carbon-overrides.scss`, replace the\n`styles.scss` import with:\n\n<!-- prettier-ignore-start -->\n```scss path=src/styles.scss\n// Feature flags\n$css--font-face: true;\n$css--plex: true;\n\n// Global styles\n@import \"~carbon-components/scss/globals/scss/css--font-face\";\n@import \"~carbon-components/scss/globals/grid/grid\";\n\n// Carbon components\n@import \"~carbon-components/scss/components/breadcrumb/breadcrumb\";\n@import \"~carbon-components/scss/components/button/button\";\n@import \"~carbon-components/scss/components/data-table/data-table\";\n@import \"~carbon-components/scss/components/link/link\";\n@import \"~carbon-components/scss/components/pagination/pagination\";\n@import \"~carbon-components/scss/components/tabs/tabs\";\n@import \"~carbon-components/scss/components/ui-shell/ui-shell\";\n```\n<!-- prettier-ignore-end -->\n\nLooking at the new `styles.scss` file, you may be asking what happened to\nimporting `_vars.scss`, `_colors.scss`, `_theme.scss`, etc.? Many of those\nglobal Sass partials get imported through the components. For example, open\n`node_modules/carbon-components/scss/components/button/_button.scss` to see its\ndependencies. No harm in importing them as `styles.scss` does, but for\nsimplicity here, we'll let the components pull them in.\n\nYou can read more about optimizing Carbon's Sass in the\n[Carbon Design System publication](https://medium.com/carbondesign/minimal-css-with-carbon-b0c089ccfa71)\non Medium.\n\n## Build for production\n\nBefore we deploy our app, we need to create an optimized production build with\nthis command. You may need to `CTRL-C` to stop the development environment\nfirst.\n\n```bash\nnpm run build\n```\n\nLooking at `package.json`, you'll find `yarn build` to run `ng build`. This\nbuilds the app for production to the `dist` folder. It bundles Angular in\nproduction mode and optimizes the build for the best performance. It even goes\nso far to minify files and include hashes in filenames for caching.\n\nAs a lot of this may seem like magic since the build configuration came from\nCreate React App, go ahead and check out their\n[production build guidelines](https://facebook.github.io/create-react-app/docs/production-build)\nfor a full description of what's happening.\n\n## Create manifest file\n\nNow that we have a production build, let's get it on the cloud. We're going to\nuse\n[staticfile-buildpack](https://github.com/cloudfoundry/staticfile-buildpack.git)\nto deploy our webapp. Since this is a Cloud Foundry buildpack, we'll be using\nthe `cf` command line interface (CLI). If running `cf --help` doesn't work for\nyou, chances are you need to\n[install the CLI](https://docs.cloudfoundry.org/cf-cli/install-go-cli.html).\n\n<InlineNotification>\n\n**Note:** If unfamiliar with buildpacks, the\n[staticfile buildpack docs](https://docs.cloudfoundry.org/buildpacks/staticfile/index.html)\nhas good definitions and configuration documentation.\n\n</InlineNotification>\n\nWith the Cloud Foundry CLI installed, next, we need to create a `manifest.yml`\nfile in the root of the project. To prevent multiple apps trying to use the\n`carbon-tutorial-angular` name, replace `USERNAME` with your GitHub username\nbelow to make sure our apps are uniquely named.\n\n```bash path=manifest.yml\n---\napplications:\n  - name: carbon-tutorial-angular-USERNAME\n    memory: 64M\n    buildpack: https://github.com/cloudfoundry/staticfile-buildpack.git\n```\n\n<InlineNotification>\n\n**Note:** With this set-up we're still using a GitHub personal access token\nsaved in `.env.local`. If you haven't created a GitHub access token yet, see\n[step 3](/tutorial/react/step-3#create-access-token). You can put the\nenvironment variable in the manifest file, or manually add it in the IBM Cloud\ndashboard, but since we're building off previous tutorial steps nothing more is\nneeded.\n\n</InlineNotification>\n\n## Create static file\n\nCreate a new static file in the root of the project named `Staticfile`. This\ntells the app to deploy from the `dist` folder and not the root of the project.\n\n```bash path=Staticfile\nroot: dist\n```\n\n### Cloud Foundry ignore\n\nAfter telling Cloud Foundry what to include, we can also specify what to ignore.\nCreate a top-level `.cfignore` file. Cloud Foundry doesn't let you push\nread-only files (specifically, files with permissions <`400`), so to prevent\nissues with the deploy, add:\n\n```bash path=.cfignore\nnode_modules/.cache\n```\n\nYou can speed up deploys by decreasing the files uploaded through cloud foundry.\nTo accomplish this, ignore any folder not required by the production application\non IBM Cloud. For example, in the case of serving static files, you can ignore\n`node_modules/` and `src/` because the only folder being served is `build/`.\n\n## Deploy app\n\nLogin to IBM Cloud with:\n\n```bash\ncf login -a https://api.ng.bluemix.net -sso\n```\n\nDeploy app using the `cf push` command. Since `manifest.yml` is in our root\ndirectory, we don't need to specify it in the push command. But, if you have\nmultiple manifest files that target different environments, it's good practice\nto specify the file.\n\n_Note: To successfully deploy, you might need to update the region code (e.g.\n`api.[REGION].bluemix.net`).\n[Learn more.](https://developer.ibm.com/answers/answers/166990/view.html)_\n\n```bash\ncf push -f manifest.yml\n```\n\nTo make it easy on ourselves by not needing to remember that command, let's add\na script in `package.json`. We can combine the build and deploy steps to make\nsure we only deploy immediately after running the build. In the `\"scripts\"`\nobject in `package.json`, add:\n\n```bash path=package.json\n\"deploy\": \"rm -rf ./dist && yarn build && cf push -f manifest.yml\"\n```\n\nNext time you want to deploy, you can simply run `yarn deploy`.\n\n## Submit pull request\n\nThat does it! We're going to submit a pull request to verify completion of this\ntutorial step. In doing so, **please include the mybluemix.net URL for your\ndeployed app in your pull request description**.\n\n### Git commit and push\n\nBefore we can create a pull request, stage and commit all of your changes:\n\n```bash\ngit add --all && git commit -m \"feat(tutorial): complete step 5\"\n```\n\nThen, push to your repository:\n\n```bash\ngit push origin angular-step-5\n```\n\n<InlineNotification>\n\n**Note:** Having issues pushing your changes?\n[Step 1](/developing/angular-tutorial/step-1#git-commit-and-push) has\ntroubleshooting notes that may help.\n\n</InlineNotification>\n\n### Pull request (PR)\n\nFinally, visit\n[carbon-tutorial-angular](https://github.com/carbon-design-system/carbon-tutorial-angular)\nto \"Compare & pull request\". In doing so, make sure that you are comparing to\n`angular-step-5` into `base: angular-step-5`.\n\n<InlineNotification>\n\n**Note:** Expect your tutorial step PRs to be reviewed by the Carbon team but\nnot merged. We'll close your PR so we can keep the repository's remote branches\npristine and ready for the next person!\n\n</InlineNotification>\n","fileAbsolutePath":"/Users/jvernon/Documents/Design System/carbon/carbon-website/src/pages/developing/angular-tutorial/step-5.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2368708353","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","711213475","768070550"]}